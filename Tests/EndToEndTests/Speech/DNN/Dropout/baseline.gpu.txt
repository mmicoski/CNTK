CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu DeviceId=0 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
08/04/2016 13:53:17: Redirecting stderr to file /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank0
08/04/2016 13:53:17: Redirecting stderr to file /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank1
MPI Rank 0: 08/04/2016 13:53:17: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:53:17: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:17: 		Built time: Aug  4 2016 13:05:36
MPI Rank 0: 08/04/2016 13:53:17: 		Last modified date: Thu Aug  4 12:33:33 2016
MPI Rank 0: 08/04/2016 13:53:17: 		Build type: release
MPI Rank 0: 08/04/2016 13:53:17: 		Build target: GPU
MPI Rank 0: 08/04/2016 13:53:17: 		With 1bit-SGD: no
MPI Rank 0: 08/04/2016 13:53:17: 		Math lib: mkl
MPI Rank 0: 08/04/2016 13:53:17: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 08/04/2016 13:53:17: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 08/04/2016 13:53:17: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 08/04/2016 13:53:17: 		Build Branch: HEAD
MPI Rank 0: 08/04/2016 13:53:17: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 0: 08/04/2016 13:53:17: 		Built by philly on 643085f7f8c2
MPI Rank 0: 08/04/2016 13:53:17: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 08/04/2016 13:53:17: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:53:18: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:53:18: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:18: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:18: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:18: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:18: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: Running on localhost at 2016/08/04 13:53:18
MPI Rank 0: 08/04/2016 13:53:18: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 13:53:18: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 13:53:18: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/04/2016 13:53:18: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/04/2016 13:53:18: Commands: speechTrain
MPI Rank 0: 08/04/2016 13:53:18: Precision = "float"
MPI Rank 0: 08/04/2016 13:53:18: Using 12 CPU threads.
MPI Rank 0: 08/04/2016 13:53:18: CNTKModelPath: /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 08/04/2016 13:53:18: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/04/2016 13:53:18: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: ##############################################################################
MPI Rank 0: 08/04/2016 13:53:18: #                                                                            #
MPI Rank 0: 08/04/2016 13:53:18: # Action "train"                                                             #
MPI Rank 0: 08/04/2016 13:53:18: #                                                                            #
MPI Rank 0: 08/04/2016 13:53:18: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:18: Creating virgin network.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:19: Created model with 36 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:19: Training criterion node(s):
MPI Rank 0: 08/04/2016 13:53:19: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:19: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:19: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0x2c8aff8: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x2ca33d8: {[labels Value[132 x *]] }
MPI Rank 0: 0x351cf58: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x3520538: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x3520ba8: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 0x3521678: {[logPrior Value[132]] }
MPI Rank 0: 0x3522ab8: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 0x3522dc8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x35239d8: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 0x3524188: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 0x35247d8: {[features Value[363 x *]] }
MPI Rank 0: 0x35264d8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x3529cb8: {[featNorm Value[363 x *]] }
MPI Rank 0: 0x3529e78: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 0x352a3e8: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x352a5a8: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 0x352a768: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x352a928: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x352aae8: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x352aca8: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x352e488: {[logPrior._ Value[132]] }
MPI Rank 0: 0x35300f8: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 0x3532d38: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 0x3532e08: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x3533f98: {[link Value[1 x 1]] }
MPI Rank 0: 0x3534b78: {[ce Value[1]] }
MPI Rank 0: 0x3535618: {[err Value[1]] }
MPI Rank 0: 0x39adef8: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x39ae058: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x39ae1b8: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x39ae378: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x39ae538: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x39ae6f8: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x39ae8b8: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x39aea78: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x39aec38: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 0x39aedf8: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 0x39aefb8: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 0x39af178: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 0x39afbf8: {[ce Gradient[1]] }
MPI Rank 0: 0x39afdb8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 0x39aff78: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 0x39b0138: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:19: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:19: 	featNorm.meanVector = Mean()
MPI Rank 0: 08/04/2016 13:53:19: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 08/04/2016 13:53:19: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:20: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:20: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:20: Starting minibatch loop.
MPI Rank 0: (GPU): creating curand object with seed 0
MPI Rank 0: (GPU): creating curand object with seed 1
MPI Rank 0: (GPU): creating curand object with seed 2
MPI Rank 0: (GPU): creating curand object with seed 3
MPI Rank 0: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 6.13292961 * 2560; err = 0.93710938 * 2560; time = 0.0627s; samplesPerSecond = 40854.8
MPI Rank 0: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 5.91662025 * 2560; err = 0.89648438 * 2560; time = 0.0440s; samplesPerSecond = 58237.4
MPI Rank 0: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 5.20531769 * 2560; err = 0.91445312 * 2560; time = 0.0440s; samplesPerSecond = 58238.7
MPI Rank 0: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.37569427 * 2560; err = 0.89179688 * 2560; time = 0.0441s; samplesPerSecond = 58002.5
MPI Rank 0: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.08423920 * 2560; err = 0.88515625 * 2560; time = 0.0414s; samplesPerSecond = 61838.7
MPI Rank 0: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.02230530 * 2560; err = 0.88398438 * 2560; time = 0.0404s; samplesPerSecond = 63303.7
MPI Rank 0: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.97137451 * 2560; err = 0.86953125 * 2560; time = 0.0404s; samplesPerSecond = 63367.9
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.92463074 * 2560; err = 0.85429687 * 2560; time = 0.0404s; samplesPerSecond = 63344.4
MPI Rank 0: 08/04/2016 13:53:21: Finished Epoch[ 1 of 5]: [Training] ce = 4.70413895 * 20480; err = 0.89160156 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=0.359876s
MPI Rank 0: 08/04/2016 13:53:21: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:21: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:21: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 4
MPI Rank 0: (GPU): creating curand object with seed 5
MPI Rank 0: (GPU): creating curand object with seed 6
MPI Rank 0: (GPU): creating curand object with seed 7
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.83498361 * 2560; err = 0.87109375 * 2560; time = 0.0779s; samplesPerSecond = 32847.9
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.77564236 * 2560; err = 0.84296875 * 2560; time = 0.0630s; samplesPerSecond = 40623.3
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.54234607 * 2560; err = 0.81914062 * 2560; time = 0.0655s; samplesPerSecond = 39069.7
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.48943866 * 2560; err = 0.81914062 * 2560; time = 0.0638s; samplesPerSecond = 40125.4
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.34760180 * 2560; err = 0.78203125 * 2560; time = 0.0626s; samplesPerSecond = 40911.6
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.29908204 * 2560; err = 0.80078125 * 2560; time = 0.0625s; samplesPerSecond = 40950.2
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.20116391 * 2560; err = 0.78281250 * 2560; time = 0.0629s; samplesPerSecond = 40731.9
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.27573045 * 2560; err = 0.77421875 * 2560; time = 0.0625s; samplesPerSecond = 40932.5
MPI Rank 0: 08/04/2016 13:53:21: Finished Epoch[ 2 of 5]: [Training] ce = 3.47074861 * 20480; err = 0.81152344 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.526347s
MPI Rank 0: 08/04/2016 13:53:21: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:21: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:21: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 8
MPI Rank 0: (GPU): creating curand object with seed 9
MPI Rank 0: (GPU): creating curand object with seed 10
MPI Rank 0: (GPU): creating curand object with seed 11
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.19629574 * 2560; err = 0.77812500 * 2560; time = 0.0683s; samplesPerSecond = 37474.6
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.13536084 * 2560; err = 0.76015625 * 2560; time = 0.0630s; samplesPerSecond = 40650.4
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.06409756 * 2560; err = 0.74531250 * 2560; time = 0.0624s; samplesPerSecond = 41019.7
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.03717151 * 2560; err = 0.73437500 * 2560; time = 0.0623s; samplesPerSecond = 41117.9
MPI Rank 0: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.03136703 * 2560; err = 0.73632812 * 2560; time = 0.0635s; samplesPerSecond = 40305.4
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.96022550 * 2560; err = 0.72695312 * 2560; time = 0.0626s; samplesPerSecond = 40925.3
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.86776599 * 2560; err = 0.71445313 * 2560; time = 0.0628s; samplesPerSecond = 40759.1
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.82975508 * 2560; err = 0.70312500 * 2560; time = 0.0630s; samplesPerSecond = 40665.3
MPI Rank 0: 08/04/2016 13:53:22: Finished Epoch[ 3 of 5]: [Training] ce = 3.01525491 * 20480; err = 0.73735352 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=0.512949s
MPI Rank 0: 08/04/2016 13:53:22: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:22: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:22: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 12
MPI Rank 0: (GPU): creating curand object with seed 13
MPI Rank 0: (GPU): creating curand object with seed 14
MPI Rank 0: (GPU): creating curand object with seed 15
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.76041389 * 2560; err = 0.67695313 * 2560; time = 0.0767s; samplesPerSecond = 33362.9
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.75799566 * 2560; err = 0.68593750 * 2560; time = 0.0666s; samplesPerSecond = 38419.4
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.60445123 * 2560; err = 0.65429688 * 2560; time = 0.0626s; samplesPerSecond = 40889.3
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.60625460 * 2560; err = 0.66484375 * 2560; time = 0.0631s; samplesPerSecond = 40568.0
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.53408292 * 2560; err = 0.63437500 * 2560; time = 0.0622s; samplesPerSecond = 41154.9
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.55838602 * 2560; err = 0.64414063 * 2560; time = 0.0641s; samplesPerSecond = 39920.2
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.56397916 * 2560; err = 0.65078125 * 2560; time = 0.0652s; samplesPerSecond = 39260.8
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.50889103 * 2560; err = 0.64609375 * 2560; time = 0.0636s; samplesPerSecond = 40230.7
MPI Rank 0: 08/04/2016 13:53:22: Finished Epoch[ 4 of 5]: [Training] ce = 2.61180681 * 20480; err = 0.65717773 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.529681s
MPI Rank 0: 08/04/2016 13:53:22: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:22: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:22: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.37738425 * 2560; err = 0.63125000 * 2560; time = 0.0627s; samplesPerSecond = 40846.3
MPI Rank 0: 08/04/2016 13:53:22:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.25116727 * 2560; err = 0.60312500 * 2560; time = 0.0601s; samplesPerSecond = 42596.4
MPI Rank 0: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.27802641 * 2560; err = 0.59062500 * 2560; time = 0.0595s; samplesPerSecond = 43045.5
MPI Rank 0: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.22965624 * 2560; err = 0.58828125 * 2560; time = 0.0599s; samplesPerSecond = 42770.0
MPI Rank 0: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.26609744 * 2560; err = 0.58906250 * 2560; time = 0.0601s; samplesPerSecond = 42566.6
MPI Rank 0: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.13756757 * 2560; err = 0.57421875 * 2560; time = 0.0596s; samplesPerSecond = 42935.0
MPI Rank 0: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.18172331 * 2560; err = 0.58437500 * 2560; time = 0.0591s; samplesPerSecond = 43330.3
MPI Rank 0: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.14537263 * 2560; err = 0.57929688 * 2560; time = 0.0621s; samplesPerSecond = 41203.3
MPI Rank 0: 08/04/2016 13:53:23: Finished Epoch[ 5 of 5]: [Training] ce = 2.23337439 * 20480; err = 0.59252930 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.488449s
MPI Rank 0: 08/04/2016 13:53:23: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/04/2016 13:53:23: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:23: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:23: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/04/2016 13:53:17: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:53:17: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:17: 		Built time: Aug  4 2016 13:05:36
MPI Rank 1: 08/04/2016 13:53:17: 		Last modified date: Thu Aug  4 12:33:33 2016
MPI Rank 1: 08/04/2016 13:53:17: 		Build type: release
MPI Rank 1: 08/04/2016 13:53:17: 		Build target: GPU
MPI Rank 1: 08/04/2016 13:53:17: 		With 1bit-SGD: no
MPI Rank 1: 08/04/2016 13:53:17: 		Math lib: mkl
MPI Rank 1: 08/04/2016 13:53:17: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 08/04/2016 13:53:17: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 08/04/2016 13:53:17: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 08/04/2016 13:53:17: 		Build Branch: HEAD
MPI Rank 1: 08/04/2016 13:53:17: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 1: 08/04/2016 13:53:17: 		Built by philly on 643085f7f8c2
MPI Rank 1: 08/04/2016 13:53:17: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 08/04/2016 13:53:17: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:53:19: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:53:19: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:19: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:19: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:19: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:19: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: Running on localhost at 2016/08/04 13:53:19
MPI Rank 1: 08/04/2016 13:53:19: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 13:53:19: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 13:53:19: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/04/2016 13:53:19: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/04/2016 13:53:19: Commands: speechTrain
MPI Rank 1: 08/04/2016 13:53:19: Precision = "float"
MPI Rank 1: 08/04/2016 13:53:19: Using 12 CPU threads.
MPI Rank 1: 08/04/2016 13:53:19: CNTKModelPath: /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 08/04/2016 13:53:19: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/04/2016 13:53:19: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: ##############################################################################
MPI Rank 1: 08/04/2016 13:53:19: #                                                                            #
MPI Rank 1: 08/04/2016 13:53:19: # Action "train"                                                             #
MPI Rank 1: 08/04/2016 13:53:19: #                                                                            #
MPI Rank 1: 08/04/2016 13:53:19: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: Creating virgin network.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: Created model with 36 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: Training criterion node(s):
MPI Rank 1: 08/04/2016 13:53:19: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f5f83f98938: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0x7f5f83f9bee8: {[err Value[1]] }
MPI Rank 1: 0x7f5f83f9c768: {[link Value[1 x 1]] }
MPI Rank 1: 0x7f5f83f9c8c8: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x7f5f86a87238: {[ce Value[1]] }
MPI Rank 1: 0x7f5f86a88908: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x7f5f86a8a578: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0x7f5f86a8b9a8: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f5f86a8c168: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x7f5f86a8d538: {[logPrior._ Value[132]] }
MPI Rank 1: 0x7f5f86a8d5d8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f5f86a8e1f8: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0x7f5f86a8e778: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0x7f5f86a8f4d8: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0x7f5f86a8f6b8: {[logPrior Value[132]] }
MPI Rank 1: 0x7f5f86a8fe28: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0x7f5f86a90488: {[features Value[363 x *]] }
MPI Rank 1: 0x7f5f86a91da8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f5f86a95538: {[featNorm Value[363 x *]] }
MPI Rank 1: 0x7f5f86a956f8: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0x7f5f86a95c68: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a95e28: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0x7f5f86a95fe8: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a961a8: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a96368: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a96528: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a966e8: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a968a8: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a96a68: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a96c28: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a96de8: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a96fa8: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a97168: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a97328: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a974e8: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0x7f5f86a976a8: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0x7f5f86a97868: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0x7f5f86a97a28: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0x7f5f86a98538: {[ce Gradient[1]] }
MPI Rank 1: 0x7f5f86a986f8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f5f86a988b8: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f5f86a98a78: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0x7f5f9cf8ec48: {[labels Value[132 x *]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:19: 	featNorm.meanVector = Mean()
MPI Rank 1: 08/04/2016 13:53:19: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 08/04/2016 13:53:19: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:20: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:20: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:20: Starting minibatch loop.
MPI Rank 1: (GPU): creating curand object with seed 0
MPI Rank 1: (GPU): creating curand object with seed 1
MPI Rank 1: (GPU): creating curand object with seed 2
MPI Rank 1: (GPU): creating curand object with seed 3
MPI Rank 1: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 6.13292961 * 2560; err = 0.93710938 * 2560; time = 0.0628s; samplesPerSecond = 40771.5
MPI Rank 1: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 5.91662025 * 2560; err = 0.89648438 * 2560; time = 0.0439s; samplesPerSecond = 58262.6
MPI Rank 1: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 5.20531769 * 2560; err = 0.91445312 * 2560; time = 0.0439s; samplesPerSecond = 58254.6
MPI Rank 1: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 4.37569427 * 2560; err = 0.89179688 * 2560; time = 0.0441s; samplesPerSecond = 58023.6
MPI Rank 1: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.08423920 * 2560; err = 0.88515625 * 2560; time = 0.0414s; samplesPerSecond = 61819.3
MPI Rank 1: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.02230530 * 2560; err = 0.88398438 * 2560; time = 0.0404s; samplesPerSecond = 63333.4
MPI Rank 1: 08/04/2016 13:53:20:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.97137451 * 2560; err = 0.86953125 * 2560; time = 0.0404s; samplesPerSecond = 63389.9
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.92463074 * 2560; err = 0.85429687 * 2560; time = 0.0404s; samplesPerSecond = 63367.9
MPI Rank 1: 08/04/2016 13:53:21: Finished Epoch[ 1 of 5]: [Training] ce = 4.70413895 * 20480; err = 0.89160156 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=0.359872s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:21: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:21: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 24
MPI Rank 1: (GPU): creating curand object with seed 25
MPI Rank 1: (GPU): creating curand object with seed 26
MPI Rank 1: (GPU): creating curand object with seed 27
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.83498361 * 2560; err = 0.87109375 * 2560; time = 0.0781s; samplesPerSecond = 32781.0
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.77564236 * 2560; err = 0.84296875 * 2560; time = 0.0630s; samplesPerSecond = 40642.7
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.54234607 * 2560; err = 0.81914062 * 2560; time = 0.0653s; samplesPerSecond = 39213.3
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.48943866 * 2560; err = 0.81914062 * 2560; time = 0.0638s; samplesPerSecond = 40138.6
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.34760180 * 2560; err = 0.78203125 * 2560; time = 0.0628s; samplesPerSecond = 40794.2
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.29908204 * 2560; err = 0.80078125 * 2560; time = 0.0623s; samplesPerSecond = 41064.5
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.20116391 * 2560; err = 0.78281250 * 2560; time = 0.0628s; samplesPerSecond = 40778.6
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.27573045 * 2560; err = 0.77421875 * 2560; time = 0.0625s; samplesPerSecond = 40954.8
MPI Rank 1: 08/04/2016 13:53:21: Finished Epoch[ 2 of 5]: [Training] ce = 3.47074861 * 20480; err = 0.81152344 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=0.526063s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:21: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:21: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 28
MPI Rank 1: (GPU): creating curand object with seed 29
MPI Rank 1: (GPU): creating curand object with seed 30
MPI Rank 1: (GPU): creating curand object with seed 31
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.19629574 * 2560; err = 0.77812500 * 2560; time = 0.0680s; samplesPerSecond = 37656.5
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.13536084 * 2560; err = 0.76015625 * 2560; time = 0.0629s; samplesPerSecond = 40729.3
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.06409756 * 2560; err = 0.74531250 * 2560; time = 0.0624s; samplesPerSecond = 41049.3
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.03717151 * 2560; err = 0.73437500 * 2560; time = 0.0624s; samplesPerSecond = 41046.0
MPI Rank 1: 08/04/2016 13:53:21:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.03136703 * 2560; err = 0.73632812 * 2560; time = 0.0634s; samplesPerSecond = 40383.0
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.96022550 * 2560; err = 0.72695312 * 2560; time = 0.0624s; samplesPerSecond = 41000.7
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.86776599 * 2560; err = 0.71445313 * 2560; time = 0.0630s; samplesPerSecond = 40661.4
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.82975508 * 2560; err = 0.70312500 * 2560; time = 0.0627s; samplesPerSecond = 40806.6
MPI Rank 1: 08/04/2016 13:53:22: Finished Epoch[ 3 of 5]: [Training] ce = 3.01525491 * 20480; err = 0.73735352 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=0.512661s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:22: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:22: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 32
MPI Rank 1: (GPU): creating curand object with seed 33
MPI Rank 1: (GPU): creating curand object with seed 34
MPI Rank 1: (GPU): creating curand object with seed 35
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.76041389 * 2560; err = 0.67695313 * 2560; time = 0.0748s; samplesPerSecond = 34225.1
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.75799566 * 2560; err = 0.68593750 * 2560; time = 0.0666s; samplesPerSecond = 38456.3
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.60445123 * 2560; err = 0.65429688 * 2560; time = 0.0626s; samplesPerSecond = 40915.5
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.60625460 * 2560; err = 0.66484375 * 2560; time = 0.0631s; samplesPerSecond = 40585.3
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.53408292 * 2560; err = 0.63437500 * 2560; time = 0.0622s; samplesPerSecond = 41163.5
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.55838602 * 2560; err = 0.64414063 * 2560; time = 0.0641s; samplesPerSecond = 39963.2
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.56397916 * 2560; err = 0.65078125 * 2560; time = 0.0655s; samplesPerSecond = 39056.5
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.50889103 * 2560; err = 0.64609375 * 2560; time = 0.0633s; samplesPerSecond = 40432.8
MPI Rank 1: 08/04/2016 13:53:22: Finished Epoch[ 4 of 5]: [Training] ce = 2.61180681 * 20480; err = 0.65717773 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.527954s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:22: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:22: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.37738425 * 2560; err = 0.63125000 * 2560; time = 0.0624s; samplesPerSecond = 41009.2
MPI Rank 1: 08/04/2016 13:53:22:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.25116727 * 2560; err = 0.60312500 * 2560; time = 0.0601s; samplesPerSecond = 42614.8
MPI Rank 1: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.27802641 * 2560; err = 0.59062500 * 2560; time = 0.0596s; samplesPerSecond = 42945.8
MPI Rank 1: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.22965624 * 2560; err = 0.58828125 * 2560; time = 0.0596s; samplesPerSecond = 42933.6
MPI Rank 1: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.26609744 * 2560; err = 0.58906250 * 2560; time = 0.0601s; samplesPerSecond = 42589.3
MPI Rank 1: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.13756757 * 2560; err = 0.57421875 * 2560; time = 0.0596s; samplesPerSecond = 42953.0
MPI Rank 1: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.18172331 * 2560; err = 0.58437500 * 2560; time = 0.0592s; samplesPerSecond = 43239.6
MPI Rank 1: 08/04/2016 13:53:23:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.14537263 * 2560; err = 0.57929688 * 2560; time = 0.0621s; samplesPerSecond = 41219.8
MPI Rank 1: 08/04/2016 13:53:23: Finished Epoch[ 5 of 5]: [Training] ce = 2.23337439 * 20480; err = 0.59252930 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.48824s
MPI Rank 1: 08/04/2016 13:53:23: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:23: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:23: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu DeviceId=0 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
08/04/2016 13:53:25: Redirecting stderr to file /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank0
08/04/2016 13:53:26: Redirecting stderr to file /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr_speechTrain.logrank1
MPI Rank 0: 08/04/2016 13:53:25: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:53:25: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:25: 		Built time: Aug  4 2016 13:05:36
MPI Rank 0: 08/04/2016 13:53:25: 		Last modified date: Thu Aug  4 12:33:33 2016
MPI Rank 0: 08/04/2016 13:53:25: 		Build type: release
MPI Rank 0: 08/04/2016 13:53:25: 		Build target: GPU
MPI Rank 0: 08/04/2016 13:53:25: 		With 1bit-SGD: no
MPI Rank 0: 08/04/2016 13:53:25: 		Math lib: mkl
MPI Rank 0: 08/04/2016 13:53:25: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 08/04/2016 13:53:25: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 08/04/2016 13:53:25: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 08/04/2016 13:53:25: 		Build Branch: HEAD
MPI Rank 0: 08/04/2016 13:53:25: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 0: 08/04/2016 13:53:25: 		Built by philly on 643085f7f8c2
MPI Rank 0: 08/04/2016 13:53:25: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 08/04/2016 13:53:25: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:53:27: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:53:27: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:27: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:27: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:27: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:27: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: Running on localhost at 2016/08/04 13:53:27
MPI Rank 0: 08/04/2016 13:53:27: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 13:53:27: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 13:53:27: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/04/2016 13:53:27: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/04/2016 13:53:27: Commands: speechTrain
MPI Rank 0: 08/04/2016 13:53:27: Precision = "float"
MPI Rank 0: 08/04/2016 13:53:27: Using 12 CPU threads.
MPI Rank 0: 08/04/2016 13:53:27: CNTKModelPath: /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 08/04/2016 13:53:27: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/04/2016 13:53:27: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: ##############################################################################
MPI Rank 0: 08/04/2016 13:53:27: #                                                                            #
MPI Rank 0: 08/04/2016 13:53:27: # Action "train"                                                             #
MPI Rank 0: 08/04/2016 13:53:27: #                                                                            #
MPI Rank 0: 08/04/2016 13:53:27: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: Loaded model with 36 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: Training criterion node(s):
MPI Rank 0: 08/04/2016 13:53:27: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0x7fd80dc749f8: {[featNorm Value[363 x *]] }
MPI Rank 0: 0x7fd80dc74fb8: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 0x7fd80dc75b88: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc75ce8: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 0x7fd80dc75ea8: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc76068: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc76228: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc763e8: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc765a8: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc76768: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc76928: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc76ae8: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc76ca8: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc76e68: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc77028: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc771e8: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc773a8: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 0x7fd80dc77568: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 0x7fd80dc77728: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 0x7fd80dc778e8: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 0x7fd80dc783c8: {[ce Gradient[1]] }
MPI Rank 0: 0x7fd80dc78588: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 0x7fd80dc78748: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 0x7fd80dc78908: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 0x7fd8109dc878: {[labels Value[132 x *]] }
MPI Rank 0: 0x7fd8109de568: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x7fd8109df818: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 0x7fd8109e0c78: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x7fd8109e0e38: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x7fd8109e2ca8: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x7fd8109e2d58: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x7fd8109e4978: {[logPrior._ Value[132]] }
MPI Rank 0: 0x7fd8109e4c98: {[link Value[1 x 1]] }
MPI Rank 0: 0x7fd8109e5c68: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 0x7fd8109e70a8: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 0x7fd8109ecd78: {[err Value[1]] }
MPI Rank 0: 0x7fd8109ed018: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x7fd8109ed1d8: {[ce Value[1]] }
MPI Rank 0: 0x7fd8109ed398: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 0x7fd8109edb38: {[logPrior Value[132]] }
MPI Rank 0: 0x7fd8270bb528: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 0x7fd8270c0568: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 0x7fd8270c0728: {[features Value[363 x *]] }
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:27: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:28: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:28: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: (GPU): creating curand object with seed 12
MPI Rank 0: (GPU): creating curand object with seed 13
MPI Rank 0: (GPU): creating curand object with seed 14
MPI Rank 0: (GPU): creating curand object with seed 15
MPI Rank 0: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.76041389 * 2560; err = 0.67695313 * 2560; time = 0.1985s; samplesPerSecond = 12894.8
MPI Rank 0: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.75799566 * 2560; err = 0.68593750 * 2560; time = 0.0638s; samplesPerSecond = 40102.1
MPI Rank 0: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.60445123 * 2560; err = 0.65429688 * 2560; time = 0.0651s; samplesPerSecond = 39336.2
MPI Rank 0: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.60625460 * 2560; err = 0.66484375 * 2560; time = 0.0637s; samplesPerSecond = 40176.4
MPI Rank 0: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.53408292 * 2560; err = 0.63437500 * 2560; time = 0.0648s; samplesPerSecond = 39526.3
MPI Rank 0: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.55838602 * 2560; err = 0.64414063 * 2560; time = 0.0631s; samplesPerSecond = 40544.8
MPI Rank 0: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.56397916 * 2560; err = 0.65078125 * 2560; time = 0.0631s; samplesPerSecond = 40566.7
MPI Rank 0: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.50889103 * 2560; err = 0.64609375 * 2560; time = 0.0625s; samplesPerSecond = 40940.3
MPI Rank 0: 08/04/2016 13:53:28: Finished Epoch[ 4 of 5]: [Training] ce = 2.61180681 * 20480; err = 0.65717773 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.79967s
MPI Rank 0: 08/04/2016 13:53:29: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:29: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:29: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.37738425 * 2560; err = 0.63125000 * 2560; time = 0.0616s; samplesPerSecond = 41580.7
MPI Rank 0: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.25116727 * 2560; err = 0.60312500 * 2560; time = 0.0588s; samplesPerSecond = 43545.6
MPI Rank 0: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.27802641 * 2560; err = 0.59062500 * 2560; time = 0.0589s; samplesPerSecond = 43492.3
MPI Rank 0: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.22965624 * 2560; err = 0.58828125 * 2560; time = 0.0608s; samplesPerSecond = 42126.7
MPI Rank 0: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.26609744 * 2560; err = 0.58906250 * 2560; time = 0.0595s; samplesPerSecond = 43026.7
MPI Rank 0: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.13756757 * 2560; err = 0.57421875 * 2560; time = 0.0596s; samplesPerSecond = 42927.8
MPI Rank 0: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.18172331 * 2560; err = 0.58437500 * 2560; time = 0.0594s; samplesPerSecond = 43078.1
MPI Rank 0: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.14537263 * 2560; err = 0.57929688 * 2560; time = 0.0607s; samplesPerSecond = 42146.2
MPI Rank 0: 08/04/2016 13:53:29: Finished Epoch[ 5 of 5]: [Training] ce = 2.23337439 * 20480; err = 0.59252930 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.484968s
MPI Rank 0: 08/04/2016 13:53:29: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/04/2016 13:53:29: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:29: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:29: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/04/2016 13:53:26: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:53:26: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:26: 		Built time: Aug  4 2016 13:05:36
MPI Rank 1: 08/04/2016 13:53:26: 		Last modified date: Thu Aug  4 12:33:33 2016
MPI Rank 1: 08/04/2016 13:53:26: 		Build type: release
MPI Rank 1: 08/04/2016 13:53:26: 		Build target: GPU
MPI Rank 1: 08/04/2016 13:53:26: 		With 1bit-SGD: no
MPI Rank 1: 08/04/2016 13:53:26: 		Math lib: mkl
MPI Rank 1: 08/04/2016 13:53:26: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 08/04/2016 13:53:26: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 08/04/2016 13:53:26: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 08/04/2016 13:53:26: 		Build Branch: HEAD
MPI Rank 1: 08/04/2016 13:53:26: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 1: 08/04/2016 13:53:26: 		Built by philly on 643085f7f8c2
MPI Rank 1: 08/04/2016 13:53:26: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 08/04/2016 13:53:26: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:53:27: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:53:27: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:27: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:27: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:27: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:27: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: Running on localhost at 2016/08/04 13:53:27
MPI Rank 1: 08/04/2016 13:53:27: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 13:53:27: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 13:53:27: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/04/2016 13:53:27: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/04/2016 13:53:27: Commands: speechTrain
MPI Rank 1: 08/04/2016 13:53:27: Precision = "float"
MPI Rank 1: 08/04/2016 13:53:27: Using 12 CPU threads.
MPI Rank 1: 08/04/2016 13:53:27: CNTKModelPath: /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 08/04/2016 13:53:27: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/04/2016 13:53:27: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: ##############################################################################
MPI Rank 1: 08/04/2016 13:53:27: #                                                                            #
MPI Rank 1: 08/04/2016 13:53:27: # Action "train"                                                             #
MPI Rank 1: 08/04/2016 13:53:27: #                                                                            #
MPI Rank 1: 08/04/2016 13:53:27: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:27: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_gpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:28: Loaded model with 36 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:28: Training criterion node(s):
MPI Rank 1: 08/04/2016 13:53:28: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:28: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:28: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f045e88dcd8: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0x7f045e88e0a8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f045e890408: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x7f045e8907d8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f045e890978: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7f045e8928b8: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x7f045e894858: {[link Value[1 x 1]] }
MPI Rank 1: 0x7f045e8954e8: {[logPrior._ Value[132]] }
MPI Rank 1: 0x7f045e895768: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0x7f045e896248: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0x7f045e89cb28: {[err Value[1]] }
MPI Rank 1: 0x7f045e89cce8: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x7f045e89cea8: {[ce Value[1]] }
MPI Rank 1: 0x7f045e89d128: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0x7f045e89d8c8: {[logPrior Value[132]] }
MPI Rank 1: 0x7f045e89f628: {[featNorm Value[363 x *]] }
MPI Rank 1: 0x7f045e89fbe8: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0x7f045e8a07b8: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a0918: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0x7f045e8a0ad8: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a0c98: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a0e58: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a1018: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a11d8: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a1398: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a1558: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a1718: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a18d8: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a1a98: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a1c58: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a1e18: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a1fd8: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0x7f045e8a2198: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0x7f045e8a2358: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0x7f045e8a2518: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0x7f045e8a2ff8: {[ce Gradient[1]] }
MPI Rank 1: 0x7f045e8a31b8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f045e8a3378: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f045e8a3538: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0x7f046209bf58: {[features Value[363 x *]] }
MPI Rank 1: 0x7f046209ce68: {[labels Value[132 x *]] }
MPI Rank 1: 0x7f0477eb62b8: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0x7f0477ee0ad8: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:28: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:28: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:28: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: (GPU): creating curand object with seed 32
MPI Rank 1: (GPU): creating curand object with seed 33
MPI Rank 1: (GPU): creating curand object with seed 34
MPI Rank 1: (GPU): creating curand object with seed 35
MPI Rank 1: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.76041389 * 2560; err = 0.67695313 * 2560; time = 0.2559s; samplesPerSecond = 10004.6
MPI Rank 1: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.75799566 * 2560; err = 0.68593750 * 2560; time = 0.0638s; samplesPerSecond = 40119.7
MPI Rank 1: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.60445123 * 2560; err = 0.65429688 * 2560; time = 0.0650s; samplesPerSecond = 39356.8
MPI Rank 1: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.60625460 * 2560; err = 0.66484375 * 2560; time = 0.0636s; samplesPerSecond = 40261.7
MPI Rank 1: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.53408292 * 2560; err = 0.63437500 * 2560; time = 0.0648s; samplesPerSecond = 39484.8
MPI Rank 1: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.55838602 * 2560; err = 0.64414063 * 2560; time = 0.0631s; samplesPerSecond = 40572.5
MPI Rank 1: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.56397916 * 2560; err = 0.65078125 * 2560; time = 0.0630s; samplesPerSecond = 40644.0
MPI Rank 1: 08/04/2016 13:53:28:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.50889103 * 2560; err = 0.64609375 * 2560; time = 0.0625s; samplesPerSecond = 40962.0
MPI Rank 1: 08/04/2016 13:53:28: Finished Epoch[ 4 of 5]: [Training] ce = 2.61180681 * 20480; err = 0.65717773 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=0.799382s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:29: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:29: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.37738425 * 2560; err = 0.63125000 * 2560; time = 0.0612s; samplesPerSecond = 41798.6
MPI Rank 1: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.25116727 * 2560; err = 0.60312500 * 2560; time = 0.0588s; samplesPerSecond = 43573.7
MPI Rank 1: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.27802641 * 2560; err = 0.59062500 * 2560; time = 0.0589s; samplesPerSecond = 43470.1
MPI Rank 1: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.22965624 * 2560; err = 0.58828125 * 2560; time = 0.0606s; samplesPerSecond = 42236.6
MPI Rank 1: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.26609744 * 2560; err = 0.58906250 * 2560; time = 0.0597s; samplesPerSecond = 42871.0
MPI Rank 1: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.13756757 * 2560; err = 0.57421875 * 2560; time = 0.0596s; samplesPerSecond = 42951.6
MPI Rank 1: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.18172331 * 2560; err = 0.58437500 * 2560; time = 0.0592s; samplesPerSecond = 43235.9
MPI Rank 1: 08/04/2016 13:53:29:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.14537263 * 2560; err = 0.57929688 * 2560; time = 0.0607s; samplesPerSecond = 42156.6
MPI Rank 1: 08/04/2016 13:53:29: Finished Epoch[ 5 of 5]: [Training] ce = 2.23337439 * 20480; err = 0.59252930 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=0.484747s
MPI Rank 1: 08/04/2016 13:53:29: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:29: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:29: __COMPLETED__
MPI Rank 1: ~MPIWrapper