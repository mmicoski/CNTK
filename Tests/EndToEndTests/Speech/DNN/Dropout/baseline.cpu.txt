CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu DeviceId=-1 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
08/04/2016 13:52:18: Redirecting stderr to file /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr_speechTrain.logrank0
08/04/2016 13:52:18: Redirecting stderr to file /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr_speechTrain.logrank1
MPI Rank 0: 08/04/2016 13:52:18: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:52:18: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:18: 		Built time: Aug  4 2016 13:05:36
MPI Rank 0: 08/04/2016 13:52:18: 		Last modified date: Thu Aug  4 12:33:33 2016
MPI Rank 0: 08/04/2016 13:52:18: 		Build type: release
MPI Rank 0: 08/04/2016 13:52:18: 		Build target: GPU
MPI Rank 0: 08/04/2016 13:52:18: 		With 1bit-SGD: no
MPI Rank 0: 08/04/2016 13:52:18: 		Math lib: mkl
MPI Rank 0: 08/04/2016 13:52:18: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 08/04/2016 13:52:18: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 08/04/2016 13:52:18: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 08/04/2016 13:52:18: 		Build Branch: HEAD
MPI Rank 0: 08/04/2016 13:52:18: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 0: 08/04/2016 13:52:18: 		Built by philly on 643085f7f8c2
MPI Rank 0: 08/04/2016 13:52:18: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 08/04/2016 13:52:18: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:52:20: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:52:20: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:52:20: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:52:20: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:52:20: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:52:20: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: Running on localhost at 2016/08/04 13:52:20
MPI Rank 0: 08/04/2016 13:52:20: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 13:52:20: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 13:52:20: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/04/2016 13:52:20: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/04/2016 13:52:20: Commands: speechTrain
MPI Rank 0: 08/04/2016 13:52:20: Precision = "float"
MPI Rank 0: 08/04/2016 13:52:20: Using 12 CPU threads.
MPI Rank 0: 08/04/2016 13:52:20: CNTKModelPath: /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 08/04/2016 13:52:20: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/04/2016 13:52:20: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: ##############################################################################
MPI Rank 0: 08/04/2016 13:52:20: #                                                                            #
MPI Rank 0: 08/04/2016 13:52:20: # Action "train"                                                             #
MPI Rank 0: 08/04/2016 13:52:20: #                                                                            #
MPI Rank 0: 08/04/2016 13:52:20: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: Creating virgin network.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: Created model with 36 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: Training criterion node(s):
MPI Rank 0: 08/04/2016 13:52:20: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0x19517f8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x19f88a8: {[logPrior._ Value[132]] }
MPI Rank 0: 0x1a00c28: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 0x1a00de8: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 0x1a018f8: {[ce Gradient[1]] }
MPI Rank 0: 0x1a01ab8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 0x1a01c78: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 0x1a18ae8: {[ce Value[1]] }
MPI Rank 0: 0x1a1fef8: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x1a200b8: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x1a20278: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x1a20438: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x1a205f8: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x1a207b8: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x1a20978: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x1a20b38: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x1a20cf8: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 0x1a20eb8: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 0x1a25fe8: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 0x1a2d5c8: {[featNorm Value[363 x *]] }
MPI Rank 0: 0x1a382b8: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 0x1a388d8: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x1a38a98: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 0x1a38c58: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x1a38e18: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x1a38fd8: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x1a39198: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x1a4f348: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x1a4fc08: {[labels Value[132 x *]] }
MPI Rank 0: 0x1a600f8: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x1a60a98: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x1a6c808: {[link Value[1 x 1]] }
MPI Rank 0: 0x1a6d0f8: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 0x1a6d9f8: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 0x1a7a838: {[features Value[363 x *]] }
MPI Rank 0: 0x1a7b238: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 0x1a7b838: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x1a88ab8: {[err Value[1]] }
MPI Rank 0: 0x1a8eb88: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x1a9b6c8: {[logPrior Value[132]] }
MPI Rank 0: 0x1a9b848: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 0x1aa9c48: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 0x1aae908: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:20: 	featNorm.meanVector = Mean()
MPI Rank 0: 08/04/2016 13:52:20: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 08/04/2016 13:52:20: 	logPrior._ = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:21: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: Setting dropout rate to 0.1.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:21: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:21: Starting minibatch loop.
MPI Rank 0: 08/04/2016 13:52:23:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 6.39970589 * 2560; err = 0.93593750 * 2560; time = 1.2645s; samplesPerSecond = 2024.5
MPI Rank 0: 08/04/2016 13:52:24:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 8.55917931 * 2560; err = 0.93828125 * 2560; time = 1.2682s; samplesPerSecond = 2018.6
MPI Rank 0: 08/04/2016 13:52:25:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 9.14935455 * 2560; err = 0.93750000 * 2560; time = 1.2611s; samplesPerSecond = 2030.0
MPI Rank 0: 08/04/2016 13:52:26:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 6.51506042 * 2560; err = 0.90429688 * 2560; time = 1.2568s; samplesPerSecond = 2036.9
MPI Rank 0: 08/04/2016 13:52:28:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.98717346 * 2560; err = 0.93750000 * 2560; time = 1.2618s; samplesPerSecond = 2028.8
MPI Rank 0: 08/04/2016 13:52:29:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.36408997 * 2560; err = 0.91054687 * 2560; time = 1.2838s; samplesPerSecond = 1994.1
MPI Rank 0: 08/04/2016 13:52:30:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 4.10459900 * 2560; err = 0.89531250 * 2560; time = 1.2462s; samplesPerSecond = 2054.3
MPI Rank 0: 08/04/2016 13:52:32:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.96215515 * 2560; err = 0.88945312 * 2560; time = 1.2591s; samplesPerSecond = 2033.2
MPI Rank 0: 08/04/2016 13:52:32: Finished Epoch[ 1 of 5]: [Training] ce = 6.00516472 * 20480; err = 0.91860352 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=10.1038s
MPI Rank 0: 08/04/2016 13:52:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:32: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:32: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/04/2016 13:52:32:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.90689797 * 2560; err = 0.88828125 * 2560; time = 0.8845s; samplesPerSecond = 2894.3
MPI Rank 0: 08/04/2016 13:52:33:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.89027848 * 2560; err = 0.88437500 * 2560; time = 0.8401s; samplesPerSecond = 3047.3
MPI Rank 0: 08/04/2016 13:52:34:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.73800763 * 2560; err = 0.86484375 * 2560; time = 0.8743s; samplesPerSecond = 2928.0
MPI Rank 0: 08/04/2016 13:52:35:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.72285602 * 2560; err = 0.84726563 * 2560; time = 0.8581s; samplesPerSecond = 2983.3
MPI Rank 0: 08/04/2016 13:52:36:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.58471682 * 2560; err = 0.81015625 * 2560; time = 0.8554s; samplesPerSecond = 2992.9
MPI Rank 0: 08/04/2016 13:52:37:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.49380803 * 2560; err = 0.81406250 * 2560; time = 0.8549s; samplesPerSecond = 2994.4
MPI Rank 0: 08/04/2016 13:52:38:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.36474342 * 2560; err = 0.80039063 * 2560; time = 0.8527s; samplesPerSecond = 3002.1
MPI Rank 0: 08/04/2016 13:52:38:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.40952389 * 2560; err = 0.79375000 * 2560; time = 0.8554s; samplesPerSecond = 2992.7
MPI Rank 0: 08/04/2016 13:52:38: Finished Epoch[ 2 of 5]: [Training] ce = 3.63885403 * 20480; err = 0.83789062 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=6.88067s
MPI Rank 0: 08/04/2016 13:52:38: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.2'
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:39: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:39: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/04/2016 13:52:39:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.33405107 * 2560; err = 0.79843750 * 2560; time = 0.8623s; samplesPerSecond = 2968.7
MPI Rank 0: 08/04/2016 13:52:40:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.27013127 * 2560; err = 0.79101562 * 2560; time = 0.8341s; samplesPerSecond = 3069.1
MPI Rank 0: 08/04/2016 13:52:41:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.22529424 * 2560; err = 0.78476563 * 2560; time = 0.8315s; samplesPerSecond = 3078.9
MPI Rank 0: 08/04/2016 13:52:42:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.19513803 * 2560; err = 0.77890625 * 2560; time = 0.8340s; samplesPerSecond = 3069.6
MPI Rank 0: 08/04/2016 13:52:43:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.19870611 * 2560; err = 0.77031250 * 2560; time = 0.8524s; samplesPerSecond = 3003.4
MPI Rank 0: 08/04/2016 13:52:44:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.15129619 * 2560; err = 0.77343750 * 2560; time = 0.8382s; samplesPerSecond = 3054.0
MPI Rank 0: 08/04/2016 13:52:44:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.06537458 * 2560; err = 0.75117188 * 2560; time = 0.8396s; samplesPerSecond = 3049.1
MPI Rank 0: 08/04/2016 13:52:45:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.04122640 * 2560; err = 0.74257812 * 2560; time = 0.8479s; samplesPerSecond = 3019.1
MPI Rank 0: 08/04/2016 13:52:45: Finished Epoch[ 3 of 5]: [Training] ce = 3.18515223 * 20480; err = 0.77382812 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=6.74499s
MPI Rank 0: 08/04/2016 13:52:45: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:45: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:45: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/04/2016 13:52:46:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.96605061 * 2560; err = 0.72382813 * 2560; time = 0.8304s; samplesPerSecond = 3082.9
MPI Rank 0: 08/04/2016 13:52:47:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.95911704 * 2560; err = 0.72578125 * 2560; time = 0.8430s; samplesPerSecond = 3037.0
MPI Rank 0: 08/04/2016 13:52:48:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.81447097 * 2560; err = 0.69101563 * 2560; time = 0.8576s; samplesPerSecond = 2985.2
MPI Rank 0: 08/04/2016 13:52:49:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.79944496 * 2560; err = 0.69257813 * 2560; time = 0.8133s; samplesPerSecond = 3147.6
MPI Rank 0: 08/04/2016 13:52:50:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.73823457 * 2560; err = 0.69062500 * 2560; time = 0.8522s; samplesPerSecond = 3003.9
MPI Rank 0: 08/04/2016 13:52:50:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.75152878 * 2560; err = 0.66875000 * 2560; time = 0.8533s; samplesPerSecond = 3000.1
MPI Rank 0: 08/04/2016 13:52:51:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.78798214 * 2560; err = 0.69414062 * 2560; time = 0.8277s; samplesPerSecond = 3092.9
MPI Rank 0: 08/04/2016 13:52:52:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.72462199 * 2560; err = 0.68007812 * 2560; time = 0.8277s; samplesPerSecond = 3092.9
MPI Rank 0: 08/04/2016 13:52:52: Finished Epoch[ 4 of 5]: [Training] ce = 2.81768138 * 20480; err = 0.69584961 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=6.71036s
MPI Rank 0: 08/04/2016 13:52:52: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:52: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:52: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/04/2016 13:52:53:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.61093721 * 2560; err = 0.66992188 * 2560; time = 0.8069s; samplesPerSecond = 3172.7
MPI Rank 0: 08/04/2016 13:52:54:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.49068911 * 2560; err = 0.65039062 * 2560; time = 0.8131s; samplesPerSecond = 3148.5
MPI Rank 0: 08/04/2016 13:52:54:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.52167732 * 2560; err = 0.64335937 * 2560; time = 0.7919s; samplesPerSecond = 3232.9
MPI Rank 0: 08/04/2016 13:52:55:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.45926138 * 2560; err = 0.62109375 * 2560; time = 0.8006s; samplesPerSecond = 3197.7
MPI Rank 0: 08/04/2016 13:52:56:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.48419160 * 2560; err = 0.63320312 * 2560; time = 0.8107s; samplesPerSecond = 3157.7
MPI Rank 0: 08/04/2016 13:52:57:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.34894193 * 2560; err = 0.61093750 * 2560; time = 0.8206s; samplesPerSecond = 3119.5
MPI Rank 0: 08/04/2016 13:52:58:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.36140375 * 2560; err = 0.60625000 * 2560; time = 0.8060s; samplesPerSecond = 3176.2
MPI Rank 0: 08/04/2016 13:52:59:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.33304353 * 2560; err = 0.62070313 * 2560; time = 0.8030s; samplesPerSecond = 3188.2
MPI Rank 0: 08/04/2016 13:52:59: Finished Epoch[ 5 of 5]: [Training] ce = 2.45126823 * 20480; err = 0.63198242 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.45751s
MPI Rank 0: 08/04/2016 13:52:59: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/04/2016 13:52:59: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:59: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:59: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/04/2016 13:52:18: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:52:18: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:18: 		Built time: Aug  4 2016 13:05:36
MPI Rank 1: 08/04/2016 13:52:18: 		Last modified date: Thu Aug  4 12:33:33 2016
MPI Rank 1: 08/04/2016 13:52:18: 		Build type: release
MPI Rank 1: 08/04/2016 13:52:18: 		Build target: GPU
MPI Rank 1: 08/04/2016 13:52:18: 		With 1bit-SGD: no
MPI Rank 1: 08/04/2016 13:52:18: 		Math lib: mkl
MPI Rank 1: 08/04/2016 13:52:18: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 08/04/2016 13:52:18: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 08/04/2016 13:52:18: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 08/04/2016 13:52:18: 		Build Branch: HEAD
MPI Rank 1: 08/04/2016 13:52:18: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 1: 08/04/2016 13:52:18: 		Built by philly on 643085f7f8c2
MPI Rank 1: 08/04/2016 13:52:18: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 08/04/2016 13:52:18: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:52:20: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:52:20: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:52:20: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:52:20: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:52:20: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:52:20: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: Running on localhost at 2016/08/04 13:52:20
MPI Rank 1: 08/04/2016 13:52:20: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 13:52:20: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 13:52:20: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/04/2016 13:52:20: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/04/2016 13:52:20: Commands: speechTrain
MPI Rank 1: 08/04/2016 13:52:20: Precision = "float"
MPI Rank 1: 08/04/2016 13:52:20: Using 12 CPU threads.
MPI Rank 1: 08/04/2016 13:52:20: CNTKModelPath: /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 08/04/2016 13:52:20: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/04/2016 13:52:20: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: ##############################################################################
MPI Rank 1: 08/04/2016 13:52:20: #                                                                            #
MPI Rank 1: 08/04/2016 13:52:20: # Action "train"                                                             #
MPI Rank 1: 08/04/2016 13:52:20: #                                                                            #
MPI Rank 1: 08/04/2016 13:52:20: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: Creating virgin network.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: Created model with 36 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: Training criterion node(s):
MPI Rank 1: 08/04/2016 13:52:20: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0x1a3b3c8: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0x1b36338: {[logPrior Value[132]] }
MPI Rank 1: 0x1bb5f88: {[featNorm Value[363 x *]] }
MPI Rank 1: 0x1bb6148: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0x1bb66b8: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x1bb6878: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0x1bb6a38: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x1bb6bf8: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x1bc9248: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0x1bc92e8: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x1bd12c8: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x1be0aa8: {[logPrior._ Value[132]] }
MPI Rank 1: 0x1be1ad8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x1bf45f8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x1c025c8: {[ce Value[1]] }
MPI Rank 1: 0x1c12e38: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0x1c12ff8: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0x1c13b08: {[ce Gradient[1]] }
MPI Rank 1: 0x1c13cc8: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0x1c13e88: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0x1c14048: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0x1c21d58: {[link Value[1 x 1]] }
MPI Rank 1: 0x1c35188: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x1c35348: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x1c35508: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x1c356c8: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x1c35888: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x1c35a48: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x1c35c08: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x1c35dc8: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x1c35f88: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x1c36148: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x1c36308: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0x1c364c8: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0x1c37bd8: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0x1c38098: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0x1c38228: {[features Value[363 x *]] }
MPI Rank 1: 0x1c3ac08: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0x1c3f308: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0x1c44028: {[labels Value[132 x *]] }
MPI Rank 1: 0x1c46598: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x1c47fd8: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x1c89608: {[err Value[1]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:20: 	featNorm.meanVector = Mean()
MPI Rank 1: 08/04/2016 13:52:20: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 08/04/2016 13:52:20: 	logPrior._ = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:21: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: Setting dropout rate to 0.1.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:21: Starting Epoch 1: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:21: Starting minibatch loop.
MPI Rank 1: 08/04/2016 13:52:23:  Epoch[ 1 of 5]-Minibatch[   1-  10, 12.50%]: ce = 6.39970589 * 2560; err = 0.93593750 * 2560; time = 1.2339s; samplesPerSecond = 2074.7
MPI Rank 1: 08/04/2016 13:52:24:  Epoch[ 1 of 5]-Minibatch[  11-  20, 25.00%]: ce = 8.55917931 * 2560; err = 0.93828125 * 2560; time = 1.2511s; samplesPerSecond = 2046.2
MPI Rank 1: 08/04/2016 13:52:25:  Epoch[ 1 of 5]-Minibatch[  21-  30, 37.50%]: ce = 9.14935455 * 2560; err = 0.93750000 * 2560; time = 1.2284s; samplesPerSecond = 2084.1
MPI Rank 1: 08/04/2016 13:52:26:  Epoch[ 1 of 5]-Minibatch[  31-  40, 50.00%]: ce = 6.51506042 * 2560; err = 0.90429688 * 2560; time = 1.2532s; samplesPerSecond = 2042.7
MPI Rank 1: 08/04/2016 13:52:28:  Epoch[ 1 of 5]-Minibatch[  41-  50, 62.50%]: ce = 4.98717346 * 2560; err = 0.93750000 * 2560; time = 1.2160s; samplesPerSecond = 2105.3
MPI Rank 1: 08/04/2016 13:52:29:  Epoch[ 1 of 5]-Minibatch[  51-  60, 75.00%]: ce = 4.36408997 * 2560; err = 0.91054687 * 2560; time = 1.2544s; samplesPerSecond = 2040.8
MPI Rank 1: 08/04/2016 13:52:30:  Epoch[ 1 of 5]-Minibatch[  61-  70, 87.50%]: ce = 4.10459900 * 2560; err = 0.89531250 * 2560; time = 1.2143s; samplesPerSecond = 2108.2
MPI Rank 1: 08/04/2016 13:52:31:  Epoch[ 1 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.96215515 * 2560; err = 0.88945312 * 2560; time = 1.2324s; samplesPerSecond = 2077.2
MPI Rank 1: 08/04/2016 13:52:31: Finished Epoch[ 1 of 5]: [Training] ce = 6.00516472 * 20480; err = 0.91860352 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.001953125; epochTime=9.88562s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:32: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:32: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/04/2016 13:52:32:  Epoch[ 2 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.90689797 * 2560; err = 0.88828125 * 2560; time = 0.8848s; samplesPerSecond = 2893.2
MPI Rank 1: 08/04/2016 13:52:33:  Epoch[ 2 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.89027848 * 2560; err = 0.88437500 * 2560; time = 0.8397s; samplesPerSecond = 3048.7
MPI Rank 1: 08/04/2016 13:52:34:  Epoch[ 2 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.73800763 * 2560; err = 0.86484375 * 2560; time = 0.8745s; samplesPerSecond = 2927.2
MPI Rank 1: 08/04/2016 13:52:35:  Epoch[ 2 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.72285602 * 2560; err = 0.84726563 * 2560; time = 0.8581s; samplesPerSecond = 2983.2
MPI Rank 1: 08/04/2016 13:52:36:  Epoch[ 2 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.58471682 * 2560; err = 0.81015625 * 2560; time = 0.8553s; samplesPerSecond = 2993.2
MPI Rank 1: 08/04/2016 13:52:37:  Epoch[ 2 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.49380803 * 2560; err = 0.81406250 * 2560; time = 0.8551s; samplesPerSecond = 2993.9
MPI Rank 1: 08/04/2016 13:52:38:  Epoch[ 2 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.36474342 * 2560; err = 0.80039063 * 2560; time = 0.8525s; samplesPerSecond = 3002.9
MPI Rank 1: 08/04/2016 13:52:38:  Epoch[ 2 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.40952389 * 2560; err = 0.79375000 * 2560; time = 0.8554s; samplesPerSecond = 2992.6
MPI Rank 1: 08/04/2016 13:52:38: Finished Epoch[ 2 of 5]: [Training] ce = 3.63885403 * 20480; err = 0.83789062 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=6.8806s
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:39: Starting Epoch 3: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:39: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/04/2016 13:52:39:  Epoch[ 3 of 5]-Minibatch[   1-  10, 12.50%]: ce = 3.33405107 * 2560; err = 0.79843750 * 2560; time = 0.8625s; samplesPerSecond = 2968.0
MPI Rank 1: 08/04/2016 13:52:40:  Epoch[ 3 of 5]-Minibatch[  11-  20, 25.00%]: ce = 3.27013127 * 2560; err = 0.79101562 * 2560; time = 0.8342s; samplesPerSecond = 3068.9
MPI Rank 1: 08/04/2016 13:52:41:  Epoch[ 3 of 5]-Minibatch[  21-  30, 37.50%]: ce = 3.22529424 * 2560; err = 0.78476563 * 2560; time = 0.8314s; samplesPerSecond = 3079.2
MPI Rank 1: 08/04/2016 13:52:42:  Epoch[ 3 of 5]-Minibatch[  31-  40, 50.00%]: ce = 3.19513803 * 2560; err = 0.77890625 * 2560; time = 0.8338s; samplesPerSecond = 3070.2
MPI Rank 1: 08/04/2016 13:52:43:  Epoch[ 3 of 5]-Minibatch[  41-  50, 62.50%]: ce = 3.19870611 * 2560; err = 0.77031250 * 2560; time = 0.8524s; samplesPerSecond = 3003.1
MPI Rank 1: 08/04/2016 13:52:44:  Epoch[ 3 of 5]-Minibatch[  51-  60, 75.00%]: ce = 3.15129619 * 2560; err = 0.77343750 * 2560; time = 0.8383s; samplesPerSecond = 3053.8
MPI Rank 1: 08/04/2016 13:52:44:  Epoch[ 3 of 5]-Minibatch[  61-  70, 87.50%]: ce = 3.06537458 * 2560; err = 0.75117188 * 2560; time = 0.8397s; samplesPerSecond = 3048.8
MPI Rank 1: 08/04/2016 13:52:45:  Epoch[ 3 of 5]-Minibatch[  71-  80, 100.00%]: ce = 3.04122640 * 2560; err = 0.74257812 * 2560; time = 0.8479s; samplesPerSecond = 3019.3
MPI Rank 1: 08/04/2016 13:52:45: Finished Epoch[ 3 of 5]: [Training] ce = 3.18515223 * 20480; err = 0.77382812 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 0.001953125; epochTime=6.74497s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:45: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:45: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/04/2016 13:52:46:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.96605061 * 2560; err = 0.72382813 * 2560; time = 0.8306s; samplesPerSecond = 3082.2
MPI Rank 1: 08/04/2016 13:52:47:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.95911704 * 2560; err = 0.72578125 * 2560; time = 0.8430s; samplesPerSecond = 3036.9
MPI Rank 1: 08/04/2016 13:52:48:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.81447097 * 2560; err = 0.69101563 * 2560; time = 0.8577s; samplesPerSecond = 2984.7
MPI Rank 1: 08/04/2016 13:52:49:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.79944496 * 2560; err = 0.69257813 * 2560; time = 0.8133s; samplesPerSecond = 3147.8
MPI Rank 1: 08/04/2016 13:52:50:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.73823457 * 2560; err = 0.69062500 * 2560; time = 0.8522s; samplesPerSecond = 3003.8
MPI Rank 1: 08/04/2016 13:52:50:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.75152878 * 2560; err = 0.66875000 * 2560; time = 0.8536s; samplesPerSecond = 2998.9
MPI Rank 1: 08/04/2016 13:52:51:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.78798214 * 2560; err = 0.69414062 * 2560; time = 0.8273s; samplesPerSecond = 3094.4
MPI Rank 1: 08/04/2016 13:52:52:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.72462199 * 2560; err = 0.68007812 * 2560; time = 0.8277s; samplesPerSecond = 3093.0
MPI Rank 1: 08/04/2016 13:52:52: Finished Epoch[ 4 of 5]: [Training] ce = 2.81768138 * 20480; err = 0.69584961 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=6.71034s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:52: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:52: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/04/2016 13:52:53:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.61093721 * 2560; err = 0.66992188 * 2560; time = 0.8072s; samplesPerSecond = 3171.5
MPI Rank 1: 08/04/2016 13:52:54:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.49068911 * 2560; err = 0.65039062 * 2560; time = 0.8131s; samplesPerSecond = 3148.4
MPI Rank 1: 08/04/2016 13:52:54:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.52167732 * 2560; err = 0.64335937 * 2560; time = 0.7917s; samplesPerSecond = 3233.4
MPI Rank 1: 08/04/2016 13:52:55:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.45926138 * 2560; err = 0.62109375 * 2560; time = 0.8005s; samplesPerSecond = 3198.0
MPI Rank 1: 08/04/2016 13:52:56:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.48419160 * 2560; err = 0.63320312 * 2560; time = 0.8108s; samplesPerSecond = 3157.5
MPI Rank 1: 08/04/2016 13:52:57:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.34894193 * 2560; err = 0.61093750 * 2560; time = 0.8206s; samplesPerSecond = 3119.8
MPI Rank 1: 08/04/2016 13:52:58:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.36140375 * 2560; err = 0.60625000 * 2560; time = 0.8059s; samplesPerSecond = 3176.5
MPI Rank 1: 08/04/2016 13:52:59:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.33304353 * 2560; err = 0.62070313 * 2560; time = 0.8030s; samplesPerSecond = 3188.0
MPI Rank 1: 08/04/2016 13:52:59: Finished Epoch[ 5 of 5]: [Training] ce = 2.45126823 * 20480; err = 0.63198242 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.45742s
MPI Rank 1: 08/04/2016 13:52:59: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:59: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:59: __COMPLETED__
MPI Rank 1: ~MPIWrapper
=== Deleting last 2 epochs and restart
==== Re-running from checkpoint
=== Running mpiexec -n 2 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu DeviceId=-1 timestamping=true numCPUThreads=12 stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (before change)]: all 2 nodes responded
requestnodes [MPIWrapper]: using 2 out of 2 MPI nodes (2 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 0 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [requestnodes (after change)]: all 2 nodes responded
mpihelper: we are cog 1 in a gearbox of 2
ping [mpihelper]: 2 nodes pinging each other
ping [mpihelper]: all 2 nodes responded
ping [mpihelper]: all 2 nodes responded
08/04/2016 13:52:59: Redirecting stderr to file /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr_speechTrain.logrank0
08/04/2016 13:52:59: Redirecting stderr to file /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr_speechTrain.logrank1
MPI Rank 0: 08/04/2016 13:52:59: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:52:59: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:52:59: 		Built time: Aug  4 2016 13:05:36
MPI Rank 0: 08/04/2016 13:52:59: 		Last modified date: Thu Aug  4 12:33:33 2016
MPI Rank 0: 08/04/2016 13:52:59: 		Build type: release
MPI Rank 0: 08/04/2016 13:52:59: 		Build target: GPU
MPI Rank 0: 08/04/2016 13:52:59: 		With 1bit-SGD: no
MPI Rank 0: 08/04/2016 13:52:59: 		Math lib: mkl
MPI Rank 0: 08/04/2016 13:52:59: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 08/04/2016 13:52:59: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 08/04/2016 13:52:59: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 08/04/2016 13:52:59: 		Build Branch: HEAD
MPI Rank 0: 08/04/2016 13:52:59: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 0: 08/04/2016 13:52:59: 		Built by philly on 643085f7f8c2
MPI Rank 0: 08/04/2016 13:52:59: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 08/04/2016 13:52:59: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:53:00: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 13:53:00: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:00: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:00: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:00: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 13:53:00: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: Running on localhost at 2016/08/04 13:53:00
MPI Rank 0: 08/04/2016 13:53:00: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 13:53:00: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 13:53:00: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=12
MPI Rank 0: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=float
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     BrainScriptNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:512:132
MPI Rank 0:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 0:         evalCriterion=ErrorPrediction
MPI Rank 0:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         initValueScale=1.0
MPI Rank 0:         uniformInit=true
MPI Rank 0:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 0:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 0:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 0:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 0:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.001953125
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9
MPI Rank 0:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 0:         maxEpochs = 5
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             parallelizationStartEpoch = 2
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/04/2016 13:53:00: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/04/2016 13:53:00: Commands: speechTrain
MPI Rank 0: 08/04/2016 13:53:00: Precision = "float"
MPI Rank 0: 08/04/2016 13:53:00: Using 12 CPU threads.
MPI Rank 0: 08/04/2016 13:53:00: CNTKModelPath: /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 08/04/2016 13:53:00: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 0: 08/04/2016 13:53:00: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: ##############################################################################
MPI Rank 0: 08/04/2016 13:53:00: #                                                                            #
MPI Rank 0: 08/04/2016 13:53:00: # Action "train"                                                             #
MPI Rank 0: 08/04/2016 13:53:00: #                                                                            #
MPI Rank 0: 08/04/2016 13:53:00: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:00: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:01: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 6 roots:
MPI Rank 0: 	ce = CrossEntropyWithSoftmax()
MPI Rank 0: 	err = ErrorPrediction()
MPI Rank 0: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 0: 	featNorm.meanVector = Mean()
MPI Rank 0: 	logPrior._ = Mean()
MPI Rank 0: 	scaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 36 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 0: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 0: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:01: Loaded model with 36 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:01: Training criterion node(s):
MPI Rank 0: 08/04/2016 13:53:01: 	ce = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:01: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:01: 	err = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 0: 0x135e688: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x13604b8: {[features Value[363 x *]] }
MPI Rank 0: 0x13e2478: {[outLayer.B Value[132 x 1]] }
MPI Rank 0: 0x13e26b8: {[outLayer.W Value[132 x 512]] }
MPI Rank 0: 0x13f9568: {[labels Value[132 x *]] }
MPI Rank 0: 0x1421128: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x1421798: {[err Value[1]] }
MPI Rank 0: 0x1426d08: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 0: 0x1427158: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x14272b8: {[logPrior._ Value[132]] }
MPI Rank 0: 0x1433208: {[featNorm Value[363 x *]] }
MPI Rank 0: 0x1444c48: {[ce Value[1]] }
MPI Rank 0: 0x1444e08: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 0: 0x1445088: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x1445248: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 0: 0x1445408: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x1448868: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 0: 0x1448a28: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 0: 0x1448be8: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 0: 0x1449b48: {[link Value[1 x 1]] }
MPI Rank 0: 0x144c538: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x144c6f8: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x144c8b8: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x144ca78: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x144cc38: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x144cdf8: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x144dbf8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x144fed8: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 0: 0x1450578: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 0: 0x14506b8: {[logPrior Value[132]] }
MPI Rank 0: 0x1451d68: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 0: 0x14530c8: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 0: 0x1453228: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 0: 0x14533e8: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 0: 0x14535a8: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 0: 0x1453768: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 0: 0x1453928: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 0: 0x15eb0a8: {[featNorm.meanVector Value[363]] }
MPI Rank 0: 0x173c648: {[ce Gradient[1]] }
MPI Rank 0: 0x173c808: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 0: 0x173c9c8: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 0: 0x173cb88: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 0: 0x1743c18: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:01: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 0: Setting dropout rate to 0.15.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:01: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 2, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:01: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/04/2016 13:53:02:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.96605061 * 2560; err = 0.72382813 * 2560; time = 0.8660s; samplesPerSecond = 2956.0
MPI Rank 0: 08/04/2016 13:53:03:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.95911704 * 2560; err = 0.72578125 * 2560; time = 0.8431s; samplesPerSecond = 3036.4
MPI Rank 0: 08/04/2016 13:53:04:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.81447097 * 2560; err = 0.69101563 * 2560; time = 0.8579s; samplesPerSecond = 2984.1
MPI Rank 0: 08/04/2016 13:53:05:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.79944496 * 2560; err = 0.69257813 * 2560; time = 0.8335s; samplesPerSecond = 3071.4
MPI Rank 0: 08/04/2016 13:53:05:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.73823457 * 2560; err = 0.69062500 * 2560; time = 0.8536s; samplesPerSecond = 2999.2
MPI Rank 0: 08/04/2016 13:53:06:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.75152878 * 2560; err = 0.66875000 * 2560; time = 0.8253s; samplesPerSecond = 3101.9
MPI Rank 0: 08/04/2016 13:53:07:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.78798214 * 2560; err = 0.69414062 * 2560; time = 0.8262s; samplesPerSecond = 3098.4
MPI Rank 0: 08/04/2016 13:53:08:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.72462199 * 2560; err = 0.68007812 * 2560; time = 0.8160s; samplesPerSecond = 3137.2
MPI Rank 0: 08/04/2016 13:53:08: Finished Epoch[ 4 of 5]: [Training] ce = 2.81768138 * 20480; err = 0.69584961 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=6.87209s
MPI Rank 0: 08/04/2016 13:53:08: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.4'
MPI Rank 0: Setting dropout rate to 0.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:08: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 0: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 0 of 2, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:08: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 0: 08/04/2016 13:53:09:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.61093721 * 2560; err = 0.66992188 * 2560; time = 0.8053s; samplesPerSecond = 3178.9
MPI Rank 0: 08/04/2016 13:53:10:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.49068911 * 2560; err = 0.65039062 * 2560; time = 0.8292s; samplesPerSecond = 3087.3
MPI Rank 0: 08/04/2016 13:53:10:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.52167732 * 2560; err = 0.64335937 * 2560; time = 0.8036s; samplesPerSecond = 3185.7
MPI Rank 0: 08/04/2016 13:53:11:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.45926138 * 2560; err = 0.62109375 * 2560; time = 0.7935s; samplesPerSecond = 3226.2
MPI Rank 0: 08/04/2016 13:53:12:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.48419160 * 2560; err = 0.63320312 * 2560; time = 0.8353s; samplesPerSecond = 3064.7
MPI Rank 0: 08/04/2016 13:53:13:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.34894193 * 2560; err = 0.61093750 * 2560; time = 0.7891s; samplesPerSecond = 3244.1
MPI Rank 0: 08/04/2016 13:53:14:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.36140375 * 2560; err = 0.60625000 * 2560; time = 0.8321s; samplesPerSecond = 3076.7
MPI Rank 0: 08/04/2016 13:53:14:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.33304353 * 2560; err = 0.62070313 * 2560; time = 0.7965s; samplesPerSecond = 3214.3
MPI Rank 0: 08/04/2016 13:53:14: Finished Epoch[ 5 of 5]: [Training] ce = 2.45126823 * 20480; err = 0.63198242 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.48941s
MPI Rank 0: 08/04/2016 13:53:14: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/04/2016 13:53:14: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:14: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 13:53:14: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/04/2016 13:52:59: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:52:59: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:52:59: 		Built time: Aug  4 2016 13:05:36
MPI Rank 1: 08/04/2016 13:52:59: 		Last modified date: Thu Aug  4 12:33:33 2016
MPI Rank 1: 08/04/2016 13:52:59: 		Build type: release
MPI Rank 1: 08/04/2016 13:52:59: 		Build target: GPU
MPI Rank 1: 08/04/2016 13:52:59: 		With 1bit-SGD: no
MPI Rank 1: 08/04/2016 13:52:59: 		Math lib: mkl
MPI Rank 1: 08/04/2016 13:52:59: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 08/04/2016 13:52:59: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 08/04/2016 13:52:59: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 08/04/2016 13:52:59: 		Build Branch: HEAD
MPI Rank 1: 08/04/2016 13:52:59: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 1: 08/04/2016 13:52:59: 		Built by philly on 643085f7f8c2
MPI Rank 1: 08/04/2016 13:52:59: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 08/04/2016 13:52:59: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:53:01: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 13:53:01: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:01: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:01: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:01: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 13:53:01: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: Running on localhost at 2016/08/04 13:53:01
MPI Rank 1: 08/04/2016 13:53:01: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout/cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout  OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=12  stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 13:53:01: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 13:53:01: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=12
MPI Rank 1: stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/Dropout
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=12
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=float
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     BrainScriptNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:512:132
MPI Rank 1:         trainingCriterion=CrossEntropyWithSoftmax
MPI Rank 1:         evalCriterion=ErrorPrediction
MPI Rank 1:         layerTypes[i:1..Length(layerSizes)-2]=Sigmoid
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         initValueScale=1.0
MPI Rank 1:         uniformInit=true
MPI Rank 1:         BFF(in, rows, cols) = [ B = Parameter(rows, 1, init = 'fixedValue', value = 0) ; W = Parameter(rows, cols, init = if uniformInit then 'uniform' else 'gaussian'/*, initValueScale from outer scope*/) ; z = W*in+B ]
MPI Rank 1:         GBFF(f, in, rows, cols) = [ Eh = Dropout(f(BFF(in, rows, cols).z)) ]
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], tag='feature') ; labels = Input(layerSizes[L], tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then GBFF(layerTypes[layer], layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else GBFF(layerTypes[layer], featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         link = Parameter(1, 1, init='fixedValue', value=1, learningRateMultiplier=0)
MPI Rank 1:         finalHiddenToPlus = Scale(Dropout(link), layers[L-1].Eh)
MPI Rank 1:         outLayer = BFF(Plus(finalHiddenToPlus, layers[L-2].Eh), layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         ce = trainingCriterion(labels, outZ, tag='criterion')
MPI Rank 1:         err = evalCriterion(labels, outZ, tag='evaluation')
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         scaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.001953125
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9
MPI Rank 1:         dropoutRate = 0.1*2:0.15*2:0
MPI Rank 1:         maxEpochs = 5
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             parallelizationStartEpoch = 2
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/04/2016 13:53:01: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/04/2016 13:53:01: Commands: speechTrain
MPI Rank 1: 08/04/2016 13:53:01: Precision = "float"
MPI Rank 1: 08/04/2016 13:53:01: Using 12 CPU threads.
MPI Rank 1: 08/04/2016 13:53:01: CNTKModelPath: /tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 08/04/2016 13:53:01: CNTKCommandTrainInfo: speechTrain : 5
MPI Rank 1: 08/04/2016 13:53:01: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: ##############################################################################
MPI Rank 1: 08/04/2016 13:53:01: #                                                                            #
MPI Rank 1: 08/04/2016 13:53:01: # Action "train"                                                             #
MPI Rank 1: 08/04/2016 13:53:01: #                                                                            #
MPI Rank 1: 08/04/2016 13:53:01: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: Starting from checkpoint. Loading network from '/tmp/cntk-test-20160804135211.433559/Speech/DNN_Dropout@release_cpu/models/cntkSpeech.dnn.3'.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 6 roots:
MPI Rank 1: 	ce = CrossEntropyWithSoftmax()
MPI Rank 1: 	err = ErrorPrediction()
MPI Rank 1: 	featNorm.invStdDevVector = InvStdDev()
MPI Rank 1: 	featNorm.meanVector = Mean()
MPI Rank 1: 	logPrior._ = Mean()
MPI Rank 1: 	scaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 36 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> outLayer.W = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> link = LearnableParameter() :  -> [1 x 1]
MPI Rank 1: Validating --> finalHiddenToPlus.scalarScalingFactor = Dropout (link) : [1 x 1] -> [1 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[2].Eh._._.W = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> layers[1].Eh._._.W = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> featNorm.meanVector = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm.invStdDevVector = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> featNorm = PerDimMeanVarNormalization (features, featNorm.meanVector, featNorm.invStdDevVector) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.z.PlusArgs[0] = Times (layers[1].Eh._._.W, featNorm) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> layers[1].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[1].Eh._._.z = Plus (layers[1].Eh._._.z.PlusArgs[0], layers[1].Eh._._.B) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh._ = Sigmoid (layers[1].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[1].Eh = Dropout (layers[1].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.z.PlusArgs[0] = Times (layers[2].Eh._._.W, layers[1].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[2].Eh._._.z = Plus (layers[2].Eh._._.z.PlusArgs[0], layers[2].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh._ = Sigmoid (layers[2].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[2].Eh = Dropout (layers[2].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.z.PlusArgs[0] = Times (layers[3].Eh._._.W, layers[2].Eh) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._._.B = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> layers[3].Eh._._.z = Plus (layers[3].Eh._._.z.PlusArgs[0], layers[3].Eh._._.B) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh._ = Sigmoid (layers[3].Eh._._.z) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> layers[3].Eh = Dropout (layers[3].Eh._) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> finalHiddenToPlus = ElementTimes (finalHiddenToPlus.scalarScalingFactor, layers[3].Eh) : [1 x 1], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.in = Plus (finalHiddenToPlus, layers[2].Eh) : [512 x 1 x *], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> outLayer.z.PlusArgs[0] = Times (outLayer.W, outLayer.in) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> outLayer.B = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> outLayer.z = Plus (outLayer.z.PlusArgs[0], outLayer.B) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> ce = CrossEntropyWithSoftmax (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> err = ErrorPrediction (labels, outLayer.z) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> logPrior = Log (logPrior._) : [132] -> [132]
MPI Rank 1: Validating --> scaledLogLikelihood = Minus (outLayer.z, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 16 out of 36 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: Loaded model with 36 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: Training criterion node(s):
MPI Rank 1: 08/04/2016 13:53:01: 	ce = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: 	err = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[err Gradient[1]] [featNorm Gradient[363 x *]] [featNorm.invStdDevVector Gradient[363]] [featNorm.meanVector Gradient[363]] [features Gradient[363 x *]] [finalHiddenToPlus.scalarScalingFactor Gradient[1 x 1]] [labels Gradient[132 x *]] [link Gradient[1 x 1]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [scaledLogLikelihood Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7fcac0301168: {[logPrior._ Value[132]] }
MPI Rank 1: 0x7fcac0301218: {[link Value[1 x 1]] }
MPI Rank 1: 0x7fcac0301388: {[featNorm.meanVector Value[363]] }
MPI Rank 1: 0x7fcac0301428: {[features Value[363 x *]] }
MPI Rank 1: 0x7fcac0330a58: {[layers[2].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7fcac0330c18: {[layers[1].Eh Gradient[512 x 1 x *]] [layers[2].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7fcac0330dd8: {[layers[2].Eh._ Gradient[512 x 1 x *]] [layers[2].Eh._._.B Gradient[512 x 1]] [layers[3].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x7fcac0330f98: {[layers[3].Eh._._.W Gradient[512 x 512]] [layers[3].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7fcac0331158: {[layers[3].Eh._ Value[512 x 1 x *]] [layers[3].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7fcac0331318: {[layers[3].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7fcac03314d8: {[layers[3].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7fcac0331698: {[finalHiddenToPlus Value[512 x 1 x *]] [layers[3].Eh._ Gradient[512 x 1 x *]] [layers[3].Eh._._.B Gradient[512 x 1]] }
MPI Rank 1: 0x7fcad2828fb8: {[layers[2].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7fcad282da28: {[layers[3].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7fcad28391d8: {[layers[3].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x7fcad283d508: {[outLayer.W Value[132 x 512]] }
MPI Rank 1: 0x7fcad2888e28: {[layers[2].Eh._._.W Value[512 x 512]] }
MPI Rank 1: 0x7fcad28a45a8: {[layers[1].Eh._._.B Value[512 x 1]] }
MPI Rank 1: 0x7fcad28dd718: {[logPrior Value[132]] }
MPI Rank 1: 0x7fcad28e5348: {[layers[1].Eh._ Value[512 x 1 x *]] [layers[1].Eh._._.z.PlusArgs[0] Gradient[512 x *]] }
MPI Rank 1: 0x7fcad28e5508: {[layers[1].Eh Value[512 x 1 x *]] }
MPI Rank 1: 0x7fcad28e56c8: {[layers[1].Eh._._.z Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7fcad28e5888: {[layers[1].Eh._ Gradient[512 x 1 x *]] [layers[1].Eh._._.B Gradient[512 x 1]] [layers[2].Eh._._.z.PlusArgs[0] Value[512 x 1 x *]] }
MPI Rank 1: 0x7fcad28e5a48: {[layers[2].Eh._._.W Gradient[512 x 512]] [layers[2].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 0x7fcad28e5c08: {[layers[2].Eh._ Value[512 x 1 x *]] [layers[2].Eh._._.z.PlusArgs[0] Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7fcad28f2458: {[layers[1].Eh._._.W Value[512 x 363]] }
MPI Rank 1: 0x7fcad28f7e38: {[outLayer.in Gradient[512 x 1 x *]] [outLayer.z Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7fcad28f7ff8: {[layers[2].Eh Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7fcad28f81b8: {[outLayer.B Gradient[132 x 1]] }
MPI Rank 1: 0x7fcad28f90c8: {[outLayer.B Value[132 x 1]] }
MPI Rank 1: 0x7fcad28faa98: {[err Value[1]] }
MPI Rank 1: 0x7fcad28fe168: {[layers[3].Eh Gradient[512 x 1 x *]] [outLayer.in Value[512 x 1 x *]] }
MPI Rank 1: 0x7fcad28fe328: {[finalHiddenToPlus Gradient[512 x 1 x *]] [outLayer.z.PlusArgs[0] Value[132 x 1 x *]] }
MPI Rank 1: 0x7fcad28fe4e8: {[outLayer.W Gradient[132 x 512]] [outLayer.z Value[132 x 1 x *]] }
MPI Rank 1: 0x7fcad28feff8: {[ce Gradient[1]] }
MPI Rank 1: 0x7fcad479e678: {[labels Value[132 x *]] }
MPI Rank 1: 0x7fcad47a19c8: {[featNorm.invStdDevVector Value[363]] }
MPI Rank 1: 0x7fcad47a4558: {[scaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x7fcad47a4718: {[ce Value[1]] }
MPI Rank 1: 0x7fcad47a48d8: {[finalHiddenToPlus.scalarScalingFactor Value[1 x 1]] }
MPI Rank 1: 0x7fcad47a4b58: {[featNorm Value[363 x *]] }
MPI Rank 1: 0x7fcad47a4d18: {[layers[1].Eh._._.z.PlusArgs[0] Value[512 x *]] }
MPI Rank 1: 0x7fcad47a4ed8: {[layers[1].Eh._._.W Gradient[512 x 363]] [layers[1].Eh._._.z Value[512 x 1 x *]] }
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: No PreCompute nodes found, skipping PreCompute step.
MPI Rank 1: Setting dropout rate to 0.15.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: Starting Epoch 4: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 2, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:01: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/04/2016 13:53:02:  Epoch[ 4 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.96605061 * 2560; err = 0.72382813 * 2560; time = 0.9120s; samplesPerSecond = 2806.9
MPI Rank 1: 08/04/2016 13:53:03:  Epoch[ 4 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.95911704 * 2560; err = 0.72578125 * 2560; time = 0.8429s; samplesPerSecond = 3037.3
MPI Rank 1: 08/04/2016 13:53:04:  Epoch[ 4 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.81447097 * 2560; err = 0.69101563 * 2560; time = 0.8579s; samplesPerSecond = 2984.2
MPI Rank 1: 08/04/2016 13:53:05:  Epoch[ 4 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.79944496 * 2560; err = 0.69257813 * 2560; time = 0.8330s; samplesPerSecond = 3073.3
MPI Rank 1: 08/04/2016 13:53:05:  Epoch[ 4 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.73823457 * 2560; err = 0.69062500 * 2560; time = 0.8543s; samplesPerSecond = 2996.7
MPI Rank 1: 08/04/2016 13:53:06:  Epoch[ 4 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.75152878 * 2560; err = 0.66875000 * 2560; time = 0.8252s; samplesPerSecond = 3102.1
MPI Rank 1: 08/04/2016 13:53:07:  Epoch[ 4 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.78798214 * 2560; err = 0.69414062 * 2560; time = 0.8262s; samplesPerSecond = 3098.6
MPI Rank 1: 08/04/2016 13:53:08:  Epoch[ 4 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.72462199 * 2560; err = 0.68007812 * 2560; time = 0.8160s; samplesPerSecond = 3137.3
MPI Rank 1: 08/04/2016 13:53:08: Finished Epoch[ 4 of 5]: [Training] ce = 2.81768138 * 20480; err = 0.69584961 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 0.001953125; epochTime=6.87202s
MPI Rank 1: Setting dropout rate to 0.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:08: Starting Epoch 5: learning rate per sample = 0.001953  effective momentum = 0.900000  momentum as time constant = 2429.8 samples
MPI Rank 1: minibatchiterator: epoch 4: frames [81920..102400] (first utterance at frame 81920), data subset 1 of 2, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:08: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 2, NumGradientBits = 32), distributed reading is ENABLED.
MPI Rank 1: 08/04/2016 13:53:09:  Epoch[ 5 of 5]-Minibatch[   1-  10, 12.50%]: ce = 2.61093721 * 2560; err = 0.66992188 * 2560; time = 0.8052s; samplesPerSecond = 3179.3
MPI Rank 1: 08/04/2016 13:53:10:  Epoch[ 5 of 5]-Minibatch[  11-  20, 25.00%]: ce = 2.49068911 * 2560; err = 0.65039062 * 2560; time = 0.8291s; samplesPerSecond = 3087.9
MPI Rank 1: 08/04/2016 13:53:10:  Epoch[ 5 of 5]-Minibatch[  21-  30, 37.50%]: ce = 2.52167732 * 2560; err = 0.64335937 * 2560; time = 0.8040s; samplesPerSecond = 3184.3
MPI Rank 1: 08/04/2016 13:53:11:  Epoch[ 5 of 5]-Minibatch[  31-  40, 50.00%]: ce = 2.45926138 * 2560; err = 0.62109375 * 2560; time = 0.7934s; samplesPerSecond = 3226.7
MPI Rank 1: 08/04/2016 13:53:12:  Epoch[ 5 of 5]-Minibatch[  41-  50, 62.50%]: ce = 2.48419160 * 2560; err = 0.63320312 * 2560; time = 0.8355s; samplesPerSecond = 3063.9
MPI Rank 1: 08/04/2016 13:53:13:  Epoch[ 5 of 5]-Minibatch[  51-  60, 75.00%]: ce = 2.34894193 * 2560; err = 0.61093750 * 2560; time = 0.7891s; samplesPerSecond = 3244.3
MPI Rank 1: 08/04/2016 13:53:14:  Epoch[ 5 of 5]-Minibatch[  61-  70, 87.50%]: ce = 2.36140375 * 2560; err = 0.60625000 * 2560; time = 0.8320s; samplesPerSecond = 3076.8
MPI Rank 1: 08/04/2016 13:53:14:  Epoch[ 5 of 5]-Minibatch[  71-  80, 100.00%]: ce = 2.33304353 * 2560; err = 0.62070313 * 2560; time = 0.7965s; samplesPerSecond = 3214.0
MPI Rank 1: 08/04/2016 13:53:14: Finished Epoch[ 5 of 5]: [Training] ce = 2.45126823 * 20480; err = 0.63198242 * 20480; totalSamplesSeen = 102400; learningRatePerSample = 0.001953125; epochTime=6.48931s
MPI Rank 1: 08/04/2016 13:53:14: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:14: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 13:53:14: __COMPLETED__
MPI Rank 1: ~MPIWrapper