CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running mpiexec -n 3 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu DeviceId=0 timestamping=true numCPUThreads=8 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
08/04/2016 14:00:55: Redirecting stderr to file /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr_speechTrain.logrank0
08/04/2016 14:00:55: Redirecting stderr to file /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr_speechTrain.logrank1
08/04/2016 14:00:56: Redirecting stderr to file /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr_speechTrain.logrank2
MPI Rank 0: 08/04/2016 14:00:55: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 14:00:55: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:55: 		Built time: Aug  4 2016 13:07:13
MPI Rank 0: 08/04/2016 14:00:55: 		Last modified date: Thu Aug  4 10:38:25 2016
MPI Rank 0: 08/04/2016 14:00:55: 		Build type: release
MPI Rank 0: 08/04/2016 14:00:55: 		Build target: GPU
MPI Rank 0: 08/04/2016 14:00:55: 		With 1bit-SGD: yes
MPI Rank 0: 08/04/2016 14:00:55: 		Math lib: mkl
MPI Rank 0: 08/04/2016 14:00:55: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 08/04/2016 14:00:55: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 08/04/2016 14:00:55: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 08/04/2016 14:00:55: 		Build Branch: HEAD
MPI Rank 0: 08/04/2016 14:00:55: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 0: 08/04/2016 14:00:55: 		Built by philly on ee6c20c358b8
MPI Rank 0: 08/04/2016 14:00:55: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 08/04/2016 14:00:55: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 14:00:56: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 14:00:56: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 14:00:56: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 14:00:56: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 14:00:56: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: Running on localhost at 2016/08/04 14:00:56
MPI Rank 0: 08/04/2016 14:00:56: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..  OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=8  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 14:00:56: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=8
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 14:00:56: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = 0
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 0: DeviceId=0
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=8
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=0
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=8
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=double
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = 0
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/04/2016 14:00:56: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/04/2016 14:00:56: Commands: speechTrain
MPI Rank 0: 08/04/2016 14:00:56: Precision = "double"
MPI Rank 0: 08/04/2016 14:00:56: Using 8 CPU threads.
MPI Rank 0: 08/04/2016 14:00:56: CNTKModelPath: /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn
MPI Rank 0: 08/04/2016 14:00:56: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 0: 08/04/2016 14:00:56: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: ##############################################################################
MPI Rank 0: 08/04/2016 14:00:56: #                                                                            #
MPI Rank 0: 08/04/2016 14:00:56: # Action "train"                                                             #
MPI Rank 0: 08/04/2016 14:00:56: #                                                                            #
MPI Rank 0: 08/04/2016 14:00:56: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using GPU 0
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: Creating virgin network.
MPI Rank 0: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 0: 	InvStdOfFeatures = InvStdDev()
MPI Rank 0: 	MeanOfFeatures = Mean()
MPI Rank 0: 	PosteriorProb = Softmax()
MPI Rank 0: 	Prior = Mean()
MPI Rank 0: 	ScaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 17 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: Created model with 25 nodes on GPU 0.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: Training criterion node(s):
MPI Rank 0: 08/04/2016 14:00:56: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 0: 0x1e29ba8: {[features Value[363 x *]] }
MPI Rank 0: 0x2985428: {[InvStdOfFeatures Value[363]] }
MPI Rank 0: 0x2989eb8: {[MeanOfFeatures Value[363]] }
MPI Rank 0: 0x2e37938: {[W0 Value[512 x 363]] }
MPI Rank 0: 0x2e44db8: {[B0 Value[512 x 1]] }
MPI Rank 0: 0x2e46ed8: {[W1 Value[512 x 512]] }
MPI Rank 0: 0x320c798: {[B1 Value[512 x 1]] }
MPI Rank 0: 0x320d938: {[W2 Value[132 x 512]] }
MPI Rank 0: 0x320e5f8: {[B2 Value[132 x 1]] }
MPI Rank 0: 0x320f438: {[labels Value[132 x *]] }
MPI Rank 0: 0x32106a8: {[Prior Value[132]] }
MPI Rank 0: 0x3215e18: {[EvalErrorPrediction Value[1]] }
MPI Rank 0: 0x3215f78: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x32160d8: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 0: 0x32166b8: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 0: 0x32168a8: {[LogOfPrior Value[132]] }
MPI Rank 0: 0x32183b8: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 0: 0x3218ab8: {[W0*features Value[512 x *]] }
MPI Rank 0: 0x3218cc8: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 0: 0x3218e28: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 0: 0x3218f88: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 0: 0x3219148: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 0: 0x3219308: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 0: 0x32194c8: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 0: 0x321a028: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 0: 0x321a1e8: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 0: 0x321a3a8: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 0: 0x321a568: {[B2 Gradient[132 x 1]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:56: 	MeanOfFeatures = Mean()
MPI Rank 0: 08/04/2016 14:00:56: 	InvStdOfFeatures = InvStdDev()
MPI Rank 0: 08/04/2016 14:00:56: 	Prior = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:00: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:00: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:00: Starting minibatch loop.
MPI Rank 0: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.56915067 * 640; EvalErrorPrediction = 0.94843750 * 640; time = 0.0955s; samplesPerSecond = 6704.4
MPI Rank 0: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.27590560 * 640; EvalErrorPrediction = 0.89531250 * 640; time = 0.0934s; samplesPerSecond = 6851.7
MPI Rank 0: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.01741546 * 640; EvalErrorPrediction = 0.86875000 * 640; time = 0.0930s; samplesPerSecond = 6879.0
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.90974565 * 640; EvalErrorPrediction = 0.87031250 * 640; time = 0.0930s; samplesPerSecond = 6885.4
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.74859527 * 640; EvalErrorPrediction = 0.84687500 * 640; time = 0.0931s; samplesPerSecond = 6871.5
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78665132 * 640; EvalErrorPrediction = 0.87500000 * 640; time = 0.0930s; samplesPerSecond = 6882.4
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.56511425 * 640; EvalErrorPrediction = 0.83125000 * 640; time = 0.0930s; samplesPerSecond = 6885.4
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.40681329 * 640; EvalErrorPrediction = 0.79531250 * 640; time = 0.0931s; samplesPerSecond = 6876.0
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.45397447 * 640; EvalErrorPrediction = 0.81718750 * 640; time = 0.0936s; samplesPerSecond = 6840.2
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.36616272 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.0937s; samplesPerSecond = 6831.7
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.41067982 * 640; EvalErrorPrediction = 0.82031250 * 640; time = 0.0936s; samplesPerSecond = 6834.2
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.09807986 * 640; EvalErrorPrediction = 0.77812500 * 640; time = 0.0936s; samplesPerSecond = 6836.6
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.13245345 * 640; EvalErrorPrediction = 0.73906250 * 640; time = 0.0936s; samplesPerSecond = 6837.2
MPI Rank 0: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.09395027 * 640; EvalErrorPrediction = 0.74843750 * 640; time = 0.0935s; samplesPerSecond = 6848.4
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.05917178 * 640; EvalErrorPrediction = 0.73906250 * 640; time = 0.0936s; samplesPerSecond = 6840.5
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.02059098 * 640; EvalErrorPrediction = 0.74687500 * 640; time = 0.0936s; samplesPerSecond = 6839.0
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 2.98224689 * 640; EvalErrorPrediction = 0.71406250 * 640; time = 0.0937s; samplesPerSecond = 6831.8
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.80555813 * 640; EvalErrorPrediction = 0.69843750 * 640; time = 0.0937s; samplesPerSecond = 6832.0
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.81227432 * 640; EvalErrorPrediction = 0.69375000 * 640; time = 0.0937s; samplesPerSecond = 6833.5
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.72424048 * 640; EvalErrorPrediction = 0.70312500 * 640; time = 0.0936s; samplesPerSecond = 6837.3
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.76852388 * 640; EvalErrorPrediction = 0.68125000 * 640; time = 0.0936s; samplesPerSecond = 6840.2
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.61766779 * 640; EvalErrorPrediction = 0.69062500 * 640; time = 0.0937s; samplesPerSecond = 6831.3
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.53886979 * 640; EvalErrorPrediction = 0.65781250 * 640; time = 0.0936s; samplesPerSecond = 6841.0
MPI Rank 0: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.43003385 * 640; EvalErrorPrediction = 0.65000000 * 640; time = 0.0935s; samplesPerSecond = 6841.7
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.46053106 * 640; EvalErrorPrediction = 0.63593750 * 640; time = 0.0935s; samplesPerSecond = 6845.4
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.40599046 * 640; EvalErrorPrediction = 0.63906250 * 640; time = 0.0936s; samplesPerSecond = 6840.2
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.31104473 * 640; EvalErrorPrediction = 0.62968750 * 640; time = 0.0936s; samplesPerSecond = 6835.9
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.42834298 * 640; EvalErrorPrediction = 0.62031250 * 640; time = 0.0936s; samplesPerSecond = 6836.5
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.38620635 * 640; EvalErrorPrediction = 0.59531250 * 640; time = 0.0935s; samplesPerSecond = 6843.9
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.19934531 * 640; EvalErrorPrediction = 0.58437500 * 640; time = 0.0935s; samplesPerSecond = 6841.6
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.30432143 * 640; EvalErrorPrediction = 0.59843750 * 640; time = 0.0936s; samplesPerSecond = 6838.6
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.17627292 * 640; EvalErrorPrediction = 0.56093750 * 640; time = 0.0931s; samplesPerSecond = 6876.2
MPI Rank 0: 08/04/2016 14:01:03: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.03956016 * 20480; EvalErrorPrediction = 0.73344727 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=2.99623s
MPI Rank 0: 08/04/2016 14:01:03: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:03: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:03: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Actual gradient aggregation time: 0.010999
MPI Rank 0: Async gradient aggregation wait time: 0.006521
MPI Rank 0: Actual gradient aggregation time: 0.012295
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.14203989 * 2304; EvalErrorPrediction = 0.58637153 * 2304; time = 0.1317s; samplesPerSecond = 17499.5
MPI Rank 0: Async gradient aggregation wait time: 0.001558
MPI Rank 0: Actual gradient aggregation time: 0.012686
MPI Rank 0: Async gradient aggregation wait time: 0.001539
MPI Rank 0: Actual gradient aggregation time: 0.012423
MPI Rank 0: 08/04/2016 14:01:03:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.13157858 * 2560; EvalErrorPrediction = 0.57929688 * 2560; time = 0.1268s; samplesPerSecond = 20183.7
MPI Rank 0: Async gradient aggregation wait time: 0.00149
MPI Rank 0: Actual gradient aggregation time: 0.012687
MPI Rank 0: Async gradient aggregation wait time: 0.000886
MPI Rank 0: Actual gradient aggregation time: 0.012548
MPI Rank 0: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.05902433 * 2560; EvalErrorPrediction = 0.56562500 * 2560; time = 0.1254s; samplesPerSecond = 20419.1
MPI Rank 0: Async gradient aggregation wait time: 0.007209
MPI Rank 0: Actual gradient aggregation time: 0.012508
MPI Rank 0: Async gradient aggregation wait time: 0.006673
MPI Rank 0: Actual gradient aggregation time: 0.012425
MPI Rank 0: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.13590240 * 2560; EvalErrorPrediction = 0.59843750 * 2560; time = 0.1299s; samplesPerSecond = 19708.7
MPI Rank 0: Async gradient aggregation wait time: 0.001596
MPI Rank 0: Actual gradient aggregation time: 0.011374
MPI Rank 0: Async gradient aggregation wait time: 0.001877
MPI Rank 0: Actual gradient aggregation time: 0.011129
MPI Rank 0: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.08570326 * 2560; EvalErrorPrediction = 0.57734375 * 2560; time = 0.1279s; samplesPerSecond = 20014.1
MPI Rank 0: Async gradient aggregation wait time: 0.001352
MPI Rank 0: Actual gradient aggregation time: 0.011197
MPI Rank 0: Async gradient aggregation wait time: 0.001546
MPI Rank 0: Actual gradient aggregation time: 0.012473
MPI Rank 0: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.08808565 * 2560; EvalErrorPrediction = 0.55664062 * 2560; time = 0.1262s; samplesPerSecond = 20283.5
MPI Rank 0: Async gradient aggregation wait time: 0.001542
MPI Rank 0: Actual gradient aggregation time: 0.013536
MPI Rank 0: Async gradient aggregation wait time: 0.001556
MPI Rank 0: Actual gradient aggregation time: 0.012607
MPI Rank 0: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.02897840 * 2560; EvalErrorPrediction = 0.57500000 * 2560; time = 0.1277s; samplesPerSecond = 20039.6
MPI Rank 0: Async gradient aggregation wait time: 0.001436
MPI Rank 0: Actual gradient aggregation time: 0.011138
MPI Rank 0: Async gradient aggregation wait time: 0.001881
MPI Rank 0: Actual gradient aggregation time: 0.011035
MPI Rank 0: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.11660760 * 2560; EvalErrorPrediction = 0.59687500 * 2560; time = 0.1262s; samplesPerSecond = 20288.6
MPI Rank 0: Async gradient aggregation wait time: 0.003322
MPI Rank 0: Actual gradient aggregation time: 0.002542
MPI Rank 0: 08/04/2016 14:01:04: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.09709898 * 20480; EvalErrorPrediction = 0.57900391 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=1.03115s
MPI Rank 0: 08/04/2016 14:01:04: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn.2'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:04: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:04: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 3e-06
MPI Rank 0: Actual gradient aggregation time: 0.016633
MPI Rank 0: Async gradient aggregation wait time: 0.003425
MPI Rank 0: Actual gradient aggregation time: 0.031882
MPI Rank 0: 08/04/2016 14:01:05:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.05439086 * 9216; EvalErrorPrediction = 0.56618924 * 9216; time = 0.2654s; samplesPerSecond = 34730.2
MPI Rank 0: Async gradient aggregation wait time: 0.001654
MPI Rank 0: Actual gradient aggregation time: 0.025828
MPI Rank 0: Async gradient aggregation wait time: 0.004126
MPI Rank 0: Actual gradient aggregation time: 0.029289
MPI Rank 0: 08/04/2016 14:01:05:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.03731571 * 10240; EvalErrorPrediction = 0.56552734 * 10240; time = 0.2617s; samplesPerSecond = 39134.9
MPI Rank 0: 08/04/2016 14:01:05: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.04098756 * 20480; EvalErrorPrediction = 0.56503906 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=0.537532s
MPI Rank 0: 08/04/2016 14:01:05: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:05: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:05: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 0.002641
MPI Rank 0: Actual gradient aggregation time: 0.020776
MPI Rank 0: Async gradient aggregation wait time: 0.003043
MPI Rank 0: Actual gradient aggregation time: 0.025309
MPI Rank 0: 08/04/2016 14:01:05:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.93476146 * 9216; EvalErrorPrediction = 0.53200955 * 9216; time = 0.2551s; samplesPerSecond = 36126.9
MPI Rank 0: Async gradient aggregation wait time: 0.00958
MPI Rank 0: Actual gradient aggregation time: 0.025905
MPI Rank 0: Async gradient aggregation wait time: 0.003233
MPI Rank 0: Actual gradient aggregation time: 0.026417
MPI Rank 0: 08/04/2016 14:01:05:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.95515738 * 10240; EvalErrorPrediction = 0.53417969 * 10240; time = 0.2669s; samplesPerSecond = 38364.6
MPI Rank 0: Async gradient aggregation wait time: 0.003364
MPI Rank 0: 08/04/2016 14:01:05: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 1.94553283 * 20480; EvalErrorPrediction = 0.53359375 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-05; epochTime=0.532461s
MPI Rank 0: 08/04/2016 14:01:05: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/04/2016 14:01:05: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:05: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:01:05: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/04/2016 14:00:55: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 14:00:55: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:55: 		Built time: Aug  4 2016 13:07:13
MPI Rank 1: 08/04/2016 14:00:55: 		Last modified date: Thu Aug  4 10:38:25 2016
MPI Rank 1: 08/04/2016 14:00:55: 		Build type: release
MPI Rank 1: 08/04/2016 14:00:55: 		Build target: GPU
MPI Rank 1: 08/04/2016 14:00:55: 		With 1bit-SGD: yes
MPI Rank 1: 08/04/2016 14:00:55: 		Math lib: mkl
MPI Rank 1: 08/04/2016 14:00:55: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 08/04/2016 14:00:55: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 08/04/2016 14:00:55: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 08/04/2016 14:00:55: 		Build Branch: HEAD
MPI Rank 1: 08/04/2016 14:00:55: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 1: 08/04/2016 14:00:55: 		Built by philly on ee6c20c358b8
MPI Rank 1: 08/04/2016 14:00:55: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 08/04/2016 14:00:55: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 14:00:56: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 14:00:56: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 14:00:56: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 14:00:56: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 14:00:56: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: Running on localhost at 2016/08/04 14:00:56
MPI Rank 1: 08/04/2016 14:00:56: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..  OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=8  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 14:00:56: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=8
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 14:00:56: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = 0
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 1: DeviceId=0
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=8
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=0
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=8
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=double
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = 0
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/04/2016 14:00:56: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/04/2016 14:00:56: Commands: speechTrain
MPI Rank 1: 08/04/2016 14:00:56: Precision = "double"
MPI Rank 1: 08/04/2016 14:00:56: Using 8 CPU threads.
MPI Rank 1: 08/04/2016 14:00:56: CNTKModelPath: /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn
MPI Rank 1: 08/04/2016 14:00:56: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 1: 08/04/2016 14:00:56: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: ##############################################################################
MPI Rank 1: 08/04/2016 14:00:56: #                                                                            #
MPI Rank 1: 08/04/2016 14:00:56: # Action "train"                                                             #
MPI Rank 1: 08/04/2016 14:00:56: #                                                                            #
MPI Rank 1: 08/04/2016 14:00:56: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using GPU 0
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: Creating virgin network.
MPI Rank 1: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 1: 	InvStdOfFeatures = InvStdDev()
MPI Rank 1: 	MeanOfFeatures = Mean()
MPI Rank 1: 	PosteriorProb = Softmax()
MPI Rank 1: 	Prior = Mean()
MPI Rank 1: 	ScaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 17 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: Created model with 25 nodes on GPU 0.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: Training criterion node(s):
MPI Rank 1: 08/04/2016 14:00:56: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 1: 0x7f7ff956e508: {[MeanOfFeatures Value[363]] }
MPI Rank 1: 0x7f7ff956e608: {[InvStdOfFeatures Value[363]] }
MPI Rank 1: 0x7f7ff957cf08: {[W0 Value[512 x 363]] }
MPI Rank 1: 0x7f7ffb830f68: {[B1 Value[512 x 1]] }
MPI Rank 1: 0x7f7ffb832108: {[W2 Value[132 x 512]] }
MPI Rank 1: 0x7f7ffb832dc8: {[B2 Value[132 x 1]] }
MPI Rank 1: 0x7f7ffb833c08: {[labels Value[132 x *]] }
MPI Rank 1: 0x7f7ffb834e78: {[Prior Value[132]] }
MPI Rank 1: 0x7f7ffb83a998: {[EvalErrorPrediction Value[1]] }
MPI Rank 1: 0x7f7ffb83aaf8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x7f7ffb83acb8: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 1: 0x7f7ffb83b238: {[LogOfPrior Value[132]] }
MPI Rank 1: 0x7f7ffb83cb88: {[W0*features Value[512 x *]] }
MPI Rank 1: 0x7f7ffb83ccd8: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 1: 0x7f7ffb83d0b8: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 1: 0x7f7ffb83d218: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 1: 0x7f7ffb83d378: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 1: 0x7f7ffb83d4d8: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 1: 0x7f7ffb83d698: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f7ffb83d858: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 1: 0x7f7ffb83da18: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 1: 0x7f7ffb83e5a8: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 1: 0x7f7ffb83e768: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f7ffb83e928: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f7ffb83eae8: {[B2 Gradient[132 x 1]] }
MPI Rank 1: 0x7f7ffc064558: {[B0 Value[512 x 1]] }
MPI Rank 1: 0x7f7ffc066678: {[W1 Value[512 x 512]] }
MPI Rank 1: 0x7f80166e9f18: {[features Value[363 x *]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:56: 	MeanOfFeatures = Mean()
MPI Rank 1: 08/04/2016 14:00:56: 	InvStdOfFeatures = InvStdDev()
MPI Rank 1: 08/04/2016 14:00:56: 	Prior = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:00: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:00: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:00: Starting minibatch loop.
MPI Rank 1: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.56915067 * 640; EvalErrorPrediction = 0.94843750 * 640; time = 0.0953s; samplesPerSecond = 6715.6
MPI Rank 1: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.27590560 * 640; EvalErrorPrediction = 0.89531250 * 640; time = 0.0928s; samplesPerSecond = 6898.3
MPI Rank 1: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.01741546 * 640; EvalErrorPrediction = 0.86875000 * 640; time = 0.0917s; samplesPerSecond = 6980.7
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.90974565 * 640; EvalErrorPrediction = 0.87031250 * 640; time = 0.0929s; samplesPerSecond = 6885.5
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.74859527 * 640; EvalErrorPrediction = 0.84687500 * 640; time = 0.0931s; samplesPerSecond = 6872.0
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78665132 * 640; EvalErrorPrediction = 0.87500000 * 640; time = 0.0930s; samplesPerSecond = 6883.1
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.56511425 * 640; EvalErrorPrediction = 0.83125000 * 640; time = 0.0929s; samplesPerSecond = 6885.6
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.40681329 * 640; EvalErrorPrediction = 0.79531250 * 640; time = 0.0931s; samplesPerSecond = 6877.9
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.45397447 * 640; EvalErrorPrediction = 0.81718750 * 640; time = 0.0938s; samplesPerSecond = 6820.0
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.36616272 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.0937s; samplesPerSecond = 6831.7
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.41067982 * 640; EvalErrorPrediction = 0.82031250 * 640; time = 0.0937s; samplesPerSecond = 6833.3
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.09807986 * 640; EvalErrorPrediction = 0.77812500 * 640; time = 0.0936s; samplesPerSecond = 6836.1
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.13245345 * 640; EvalErrorPrediction = 0.73906250 * 640; time = 0.0936s; samplesPerSecond = 6838.3
MPI Rank 1: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.09395027 * 640; EvalErrorPrediction = 0.74843750 * 640; time = 0.0935s; samplesPerSecond = 6847.2
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.05917178 * 640; EvalErrorPrediction = 0.73906250 * 640; time = 0.0936s; samplesPerSecond = 6840.7
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.02059098 * 640; EvalErrorPrediction = 0.74687500 * 640; time = 0.0936s; samplesPerSecond = 6838.8
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 2.98224689 * 640; EvalErrorPrediction = 0.71406250 * 640; time = 0.0937s; samplesPerSecond = 6830.2
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.80555813 * 640; EvalErrorPrediction = 0.69843750 * 640; time = 0.0937s; samplesPerSecond = 6831.7
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.81227432 * 640; EvalErrorPrediction = 0.69375000 * 640; time = 0.0937s; samplesPerSecond = 6832.8
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.72424048 * 640; EvalErrorPrediction = 0.70312500 * 640; time = 0.0936s; samplesPerSecond = 6836.2
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.76852388 * 640; EvalErrorPrediction = 0.68125000 * 640; time = 0.0936s; samplesPerSecond = 6839.9
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.61766779 * 640; EvalErrorPrediction = 0.69062500 * 640; time = 0.0937s; samplesPerSecond = 6831.5
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.53886979 * 640; EvalErrorPrediction = 0.65781250 * 640; time = 0.0935s; samplesPerSecond = 6841.4
MPI Rank 1: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.43003385 * 640; EvalErrorPrediction = 0.65000000 * 640; time = 0.0936s; samplesPerSecond = 6841.2
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.46053106 * 640; EvalErrorPrediction = 0.63593750 * 640; time = 0.0935s; samplesPerSecond = 6845.1
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.40599046 * 640; EvalErrorPrediction = 0.63906250 * 640; time = 0.0936s; samplesPerSecond = 6839.5
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.31104473 * 640; EvalErrorPrediction = 0.62968750 * 640; time = 0.0936s; samplesPerSecond = 6835.8
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.42834298 * 640; EvalErrorPrediction = 0.62031250 * 640; time = 0.0936s; samplesPerSecond = 6836.8
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.38620635 * 640; EvalErrorPrediction = 0.59531250 * 640; time = 0.0935s; samplesPerSecond = 6842.1
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.19934531 * 640; EvalErrorPrediction = 0.58437500 * 640; time = 0.0936s; samplesPerSecond = 6839.7
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.30432143 * 640; EvalErrorPrediction = 0.59843750 * 640; time = 0.0936s; samplesPerSecond = 6839.2
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.17627292 * 640; EvalErrorPrediction = 0.56093750 * 640; time = 0.0928s; samplesPerSecond = 6893.1
MPI Rank 1: 08/04/2016 14:01:03: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.03956016 * 20480; EvalErrorPrediction = 0.73344727 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=2.99422s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:03: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:03: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Actual gradient aggregation time: 0.014862
MPI Rank 1: Async gradient aggregation wait time: 0.005456
MPI Rank 1: Actual gradient aggregation time: 0.010819
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.14203989 * 2304; EvalErrorPrediction = 0.58637153 * 2304; time = 0.1317s; samplesPerSecond = 17491.9
MPI Rank 1: Async gradient aggregation wait time: 0.001817
MPI Rank 1: Actual gradient aggregation time: 0.011069
MPI Rank 1: Async gradient aggregation wait time: 0.002169
MPI Rank 1: Actual gradient aggregation time: 0.010799
MPI Rank 1: 08/04/2016 14:01:03:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.13157858 * 2560; EvalErrorPrediction = 0.57929688 * 2560; time = 0.1268s; samplesPerSecond = 20181.8
MPI Rank 1: Async gradient aggregation wait time: 0.001753
MPI Rank 1: Actual gradient aggregation time: 0.011601
MPI Rank 1: Async gradient aggregation wait time: 0.00144
MPI Rank 1: Actual gradient aggregation time: 0.01094
MPI Rank 1: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.05902433 * 2560; EvalErrorPrediction = 0.56562500 * 2560; time = 0.1351s; samplesPerSecond = 18952.2
MPI Rank 1: Async gradient aggregation wait time: 0.000737
MPI Rank 1: Actual gradient aggregation time: 0.011121
MPI Rank 1: Async gradient aggregation wait time: 0.005702
MPI Rank 1: Actual gradient aggregation time: 0.011029
MPI Rank 1: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.13590240 * 2560; EvalErrorPrediction = 0.59843750 * 2560; time = 0.1205s; samplesPerSecond = 21238.1
MPI Rank 1: Async gradient aggregation wait time: 0.001178
MPI Rank 1: Actual gradient aggregation time: 0.012546
MPI Rank 1: Async gradient aggregation wait time: 0.001614
MPI Rank 1: Actual gradient aggregation time: 0.011253
MPI Rank 1: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.08570326 * 2560; EvalErrorPrediction = 0.57734375 * 2560; time = 0.1277s; samplesPerSecond = 20052.2
MPI Rank 1: Async gradient aggregation wait time: 0.001232
MPI Rank 1: Actual gradient aggregation time: 0.012298
MPI Rank 1: Async gradient aggregation wait time: 0.002011
MPI Rank 1: Actual gradient aggregation time: 0.010814
MPI Rank 1: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.08808565 * 2560; EvalErrorPrediction = 0.55664062 * 2560; time = 0.1261s; samplesPerSecond = 20306.3
MPI Rank 1: Async gradient aggregation wait time: 0.002206
MPI Rank 1: Actual gradient aggregation time: 0.012117
MPI Rank 1: Async gradient aggregation wait time: 0.002028
MPI Rank 1: Actual gradient aggregation time: 0.010932
MPI Rank 1: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.02897840 * 2560; EvalErrorPrediction = 0.57500000 * 2560; time = 0.1278s; samplesPerSecond = 20029.7
MPI Rank 1: Async gradient aggregation wait time: 0.000493
MPI Rank 1: Actual gradient aggregation time: 0.012639
MPI Rank 1: Async gradient aggregation wait time: 0.001601
MPI Rank 1: Actual gradient aggregation time: 0.011151
MPI Rank 1: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.11660760 * 2560; EvalErrorPrediction = 0.59687500 * 2560; time = 0.1262s; samplesPerSecond = 20288.5
MPI Rank 1: Async gradient aggregation wait time: 0.003376
MPI Rank 1: Actual gradient aggregation time: 0.003081
MPI Rank 1: 08/04/2016 14:01:04: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.09709898 * 20480; EvalErrorPrediction = 0.57900391 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=1.03103s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:04: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:04: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 0.006741
MPI Rank 1: Actual gradient aggregation time: 0.039437
MPI Rank 1: Async gradient aggregation wait time: 2e-06
MPI Rank 1: Actual gradient aggregation time: 0.009566
MPI Rank 1: 08/04/2016 14:01:05:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.05439086 * 9216; EvalErrorPrediction = 0.56618924 * 9216; time = 0.2659s; samplesPerSecond = 34661.0
MPI Rank 1: Async gradient aggregation wait time: 0.002885
MPI Rank 1: Actual gradient aggregation time: 0.026289
MPI Rank 1: Async gradient aggregation wait time: 0.004818
MPI Rank 1: Actual gradient aggregation time: 0.029426
MPI Rank 1: 08/04/2016 14:01:05:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.03731571 * 10240; EvalErrorPrediction = 0.56552734 * 10240; time = 0.2615s; samplesPerSecond = 39165.9
MPI Rank 1: 08/04/2016 14:01:05: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.04098756 * 20480; EvalErrorPrediction = 0.56503906 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=0.537454s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:05: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:05: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 0.001004
MPI Rank 1: Actual gradient aggregation time: 0.022781
MPI Rank 1: Async gradient aggregation wait time: 0.000916
MPI Rank 1: Actual gradient aggregation time: 0.025769
MPI Rank 1: 08/04/2016 14:01:05:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.93476146 * 9216; EvalErrorPrediction = 0.53200955 * 9216; time = 0.2715s; samplesPerSecond = 33940.4
MPI Rank 1: Async gradient aggregation wait time: 0.001186
MPI Rank 1: Actual gradient aggregation time: 0.023981
MPI Rank 1: Async gradient aggregation wait time: 0.000637
MPI Rank 1: Actual gradient aggregation time: 0.024462
MPI Rank 1: 08/04/2016 14:01:05:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.95515738 * 10240; EvalErrorPrediction = 0.53417969 * 10240; time = 0.2508s; samplesPerSecond = 40826.1
MPI Rank 1: Async gradient aggregation wait time: 0.003259
MPI Rank 1: 08/04/2016 14:01:05: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 1.94553283 * 20480; EvalErrorPrediction = 0.53359375 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-05; epochTime=0.532343s
MPI Rank 1: 08/04/2016 14:01:05: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:05: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:01:05: __COMPLETED__
MPI Rank 1: ~MPIWrapper
MPI Rank 2: 08/04/2016 14:00:56: -------------------------------------------------------------------
MPI Rank 2: 08/04/2016 14:00:56: Build info: 
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:56: 		Built time: Aug  4 2016 13:07:13
MPI Rank 2: 08/04/2016 14:00:56: 		Last modified date: Thu Aug  4 10:38:25 2016
MPI Rank 2: 08/04/2016 14:00:56: 		Build type: release
MPI Rank 2: 08/04/2016 14:00:56: 		Build target: GPU
MPI Rank 2: 08/04/2016 14:00:56: 		With 1bit-SGD: yes
MPI Rank 2: 08/04/2016 14:00:56: 		Math lib: mkl
MPI Rank 2: 08/04/2016 14:00:56: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 2: 08/04/2016 14:00:56: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 08/04/2016 14:00:56: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 2: 08/04/2016 14:00:56: 		Build Branch: HEAD
MPI Rank 2: 08/04/2016 14:00:56: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 2: 08/04/2016 14:00:56: 		Built by philly on ee6c20c358b8
MPI Rank 2: 08/04/2016 14:00:56: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 2: 08/04/2016 14:00:56: -------------------------------------------------------------------
MPI Rank 2: 08/04/2016 14:00:57: -------------------------------------------------------------------
MPI Rank 2: 08/04/2016 14:00:57: GPU info:
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 2: 08/04/2016 14:00:57: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 2: 08/04/2016 14:00:57: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 2: 08/04/2016 14:00:57: -------------------------------------------------------------------
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: Running on localhost at 2016/08/04 14:00:57
MPI Rank 2: 08/04/2016 14:00:57: Command line: 
MPI Rank 2: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..  OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu  DeviceId=0  timestamping=true  numCPUThreads=8  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: 08/04/2016 14:00:57: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 2: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 2: DeviceId=0
MPI Rank 2: timestamping=true
MPI Rank 2: numCPUThreads=8
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: 08/04/2016 14:00:57: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = 0
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 2: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 2: DeviceId=0
MPI Rank 2: timestamping=true
MPI Rank 2: numCPUThreads=8
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.cntk:command=speechTrain
MPI Rank 2: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: configparameters: cntk.cntk:deviceId=0
MPI Rank 2: configparameters: cntk.cntk:numCPUThreads=8
MPI Rank 2: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 2: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 2: configparameters: cntk.cntk:precision=double
MPI Rank 2: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu
MPI Rank 2: configparameters: cntk.cntk:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = 0
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/stderr
MPI Rank 2: configparameters: cntk.cntk:timestamping=true
MPI Rank 2: 08/04/2016 14:00:57: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 08/04/2016 14:00:57: Commands: speechTrain
MPI Rank 2: 08/04/2016 14:00:57: Precision = "double"
MPI Rank 2: 08/04/2016 14:00:57: Using 8 CPU threads.
MPI Rank 2: 08/04/2016 14:00:57: CNTKModelPath: /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_gpu/models/cntkSpeech.dnn
MPI Rank 2: 08/04/2016 14:00:57: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 2: 08/04/2016 14:00:57: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: ##############################################################################
MPI Rank 2: 08/04/2016 14:00:57: #                                                                            #
MPI Rank 2: 08/04/2016 14:00:57: # Action "train"                                                             #
MPI Rank 2: 08/04/2016 14:00:57: #                                                                            #
MPI Rank 2: 08/04/2016 14:00:57: ##############################################################################
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using GPU 0
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: Creating virgin network.
MPI Rank 2: SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==8
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 2: 	InvStdOfFeatures = InvStdDev()
MPI Rank 2: 	MeanOfFeatures = Mean()
MPI Rank 2: 	PosteriorProb = Softmax()
MPI Rank 2: 	Prior = Mean()
MPI Rank 2: 	ScaledLogLikelihood = Minus()
MPI Rank 2: 
MPI Rank 2: Validating network. 25 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 2: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 2: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 2: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 2: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 2: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 2: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 2: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 2: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 2: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 2: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 2: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 2: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 2: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 2: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 2: 
MPI Rank 2: Validating network. 17 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating network, final pass.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: Created model with 25 nodes on GPU 0.
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: Training criterion node(s):
MPI Rank 2: 08/04/2016 14:00:57: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: Evaluation criterion node(s):
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Memory Sharing Structure:
MPI Rank 2: 
MPI Rank 2: (nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 2: 0x7f8341531268: {[MeanOfFeatures Value[363]] }
MPI Rank 2: 0x7f8341531788: {[InvStdOfFeatures Value[363]] }
MPI Rank 2: 0x7f83415324c8: {[W0 Value[512 x 363]] }
MPI Rank 2: 0x7f8341584468: {[B0 Value[512 x 1]] }
MPI Rank 2: 0x7f8341586618: {[W1 Value[512 x 512]] }
MPI Rank 2: 0x7f834393c998: {[B1 Value[512 x 1]] }
MPI Rank 2: 0x7f834393db38: {[W2 Value[132 x 512]] }
MPI Rank 2: 0x7f834393e7f8: {[B2 Value[132 x 1]] }
MPI Rank 2: 0x7f834393f638: {[labels Value[132 x *]] }
MPI Rank 2: 0x7f83439408a8: {[Prior Value[132]] }
MPI Rank 2: 0x7f8343946468: {[EvalErrorPrediction Value[1]] }
MPI Rank 2: 0x7f83439465c8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 2: 0x7f8343946788: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 2: 0x7f8343946c08: {[LogOfPrior Value[132]] }
MPI Rank 2: 0x7f8343947ec8: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 2: 0x7f83439485c8: {[W0*features Value[512 x *]] }
MPI Rank 2: 0x7f8343948af8: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 2: 0x7f8343948c58: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 2: 0x7f8343948e18: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 2: 0x7f8343948fd8: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 2: 0x7f8343949198: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 2: 0x7f8343949358: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 2: 0x7f8343949518: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 2: 0x7f834394a078: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 2: 0x7f834394a238: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 2: 0x7f834394a3f8: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 2: 0x7f834394a5b8: {[B2 Gradient[132 x 1]] }
MPI Rank 2: 0x7f835b488d88: {[features Value[363 x *]] }
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:57: 	MeanOfFeatures = Mean()
MPI Rank 2: 08/04/2016 14:00:57: 	InvStdOfFeatures = InvStdDev()
MPI Rank 2: 08/04/2016 14:00:57: 	Prior = Mean()
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:00: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:00: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:00: Starting minibatch loop.
MPI Rank 2: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.56915067 * 640; EvalErrorPrediction = 0.94843750 * 640; time = 0.0954s; samplesPerSecond = 6707.5
MPI Rank 2: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.27590560 * 640; EvalErrorPrediction = 0.89531250 * 640; time = 0.0928s; samplesPerSecond = 6898.8
MPI Rank 2: 08/04/2016 14:01:00:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.01741546 * 640; EvalErrorPrediction = 0.86875000 * 640; time = 0.0917s; samplesPerSecond = 6980.7
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.90974565 * 640; EvalErrorPrediction = 0.87031250 * 640; time = 0.0929s; samplesPerSecond = 6886.2
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.74859527 * 640; EvalErrorPrediction = 0.84687500 * 640; time = 0.0931s; samplesPerSecond = 6872.2
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78665132 * 640; EvalErrorPrediction = 0.87500000 * 640; time = 0.0930s; samplesPerSecond = 6883.2
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.56511425 * 640; EvalErrorPrediction = 0.83125000 * 640; time = 0.0929s; samplesPerSecond = 6885.9
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.40681329 * 640; EvalErrorPrediction = 0.79531250 * 640; time = 0.0931s; samplesPerSecond = 6877.4
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.45397447 * 640; EvalErrorPrediction = 0.81718750 * 640; time = 0.0949s; samplesPerSecond = 6742.1
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.36616272 * 640; EvalErrorPrediction = 0.79687500 * 640; time = 0.0937s; samplesPerSecond = 6833.8
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.41067982 * 640; EvalErrorPrediction = 0.82031250 * 640; time = 0.0937s; samplesPerSecond = 6833.5
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.09807986 * 640; EvalErrorPrediction = 0.77812500 * 640; time = 0.0936s; samplesPerSecond = 6836.2
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.13245345 * 640; EvalErrorPrediction = 0.73906250 * 640; time = 0.0936s; samplesPerSecond = 6838.5
MPI Rank 2: 08/04/2016 14:01:01:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.09395027 * 640; EvalErrorPrediction = 0.74843750 * 640; time = 0.0935s; samplesPerSecond = 6847.6
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.05917178 * 640; EvalErrorPrediction = 0.73906250 * 640; time = 0.0936s; samplesPerSecond = 6841.0
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.02059098 * 640; EvalErrorPrediction = 0.74687500 * 640; time = 0.0936s; samplesPerSecond = 6839.1
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 2.98224689 * 640; EvalErrorPrediction = 0.71406250 * 640; time = 0.0937s; samplesPerSecond = 6830.9
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.80555813 * 640; EvalErrorPrediction = 0.69843750 * 640; time = 0.0937s; samplesPerSecond = 6830.9
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.81227432 * 640; EvalErrorPrediction = 0.69375000 * 640; time = 0.0937s; samplesPerSecond = 6833.0
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.72424048 * 640; EvalErrorPrediction = 0.70312500 * 640; time = 0.0936s; samplesPerSecond = 6836.3
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.76852388 * 640; EvalErrorPrediction = 0.68125000 * 640; time = 0.0936s; samplesPerSecond = 6840.1
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.61766779 * 640; EvalErrorPrediction = 0.69062500 * 640; time = 0.0937s; samplesPerSecond = 6831.6
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.53886979 * 640; EvalErrorPrediction = 0.65781250 * 640; time = 0.0935s; samplesPerSecond = 6841.5
MPI Rank 2: 08/04/2016 14:01:02:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.43003385 * 640; EvalErrorPrediction = 0.65000000 * 640; time = 0.0935s; samplesPerSecond = 6841.3
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.46053106 * 640; EvalErrorPrediction = 0.63593750 * 640; time = 0.0935s; samplesPerSecond = 6845.2
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.40599046 * 640; EvalErrorPrediction = 0.63906250 * 640; time = 0.0936s; samplesPerSecond = 6840.4
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.31104473 * 640; EvalErrorPrediction = 0.62968750 * 640; time = 0.0936s; samplesPerSecond = 6834.6
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.42834298 * 640; EvalErrorPrediction = 0.62031250 * 640; time = 0.0936s; samplesPerSecond = 6836.9
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.38620635 * 640; EvalErrorPrediction = 0.59531250 * 640; time = 0.0935s; samplesPerSecond = 6842.2
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.19934531 * 640; EvalErrorPrediction = 0.58437500 * 640; time = 0.0936s; samplesPerSecond = 6839.8
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.30432143 * 640; EvalErrorPrediction = 0.59843750 * 640; time = 0.0936s; samplesPerSecond = 6840.7
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.17627292 * 640; EvalErrorPrediction = 0.56093750 * 640; time = 0.0918s; samplesPerSecond = 6975.0
MPI Rank 2: 08/04/2016 14:01:03: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.03956016 * 20480; EvalErrorPrediction = 0.73344727 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=2.99425s
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:03: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:03: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Actual gradient aggregation time: 0.011245
MPI Rank 2: Async gradient aggregation wait time: 0.000668
MPI Rank 2: Actual gradient aggregation time: 0.011098
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.14203989 * 2304; EvalErrorPrediction = 0.58637153 * 2304; time = 0.1318s; samplesPerSecond = 17474.5
MPI Rank 2: Async gradient aggregation wait time: 0.002133
MPI Rank 2: Actual gradient aggregation time: 0.011459
MPI Rank 2: Async gradient aggregation wait time: 0.002125
MPI Rank 2: Actual gradient aggregation time: 0.011239
MPI Rank 2: 08/04/2016 14:01:03:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.13157858 * 2560; EvalErrorPrediction = 0.57929688 * 2560; time = 0.1268s; samplesPerSecond = 20186.7
MPI Rank 2: Async gradient aggregation wait time: 0.002043
MPI Rank 2: Actual gradient aggregation time: 0.011716
MPI Rank 2: Async gradient aggregation wait time: 0.00414
MPI Rank 2: Actual gradient aggregation time: 0.011334
MPI Rank 2: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.05902433 * 2560; EvalErrorPrediction = 0.56562500 * 2560; time = 0.1253s; samplesPerSecond = 20424.8
MPI Rank 2: Async gradient aggregation wait time: 0.007883
MPI Rank 2: Actual gradient aggregation time: 0.011255
MPI Rank 2: Async gradient aggregation wait time: 0.000719
MPI Rank 2: Actual gradient aggregation time: 0.01117
MPI Rank 2: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.13590240 * 2560; EvalErrorPrediction = 0.59843750 * 2560; time = 0.1299s; samplesPerSecond = 19708.2
MPI Rank 2: Async gradient aggregation wait time: 0.003358
MPI Rank 2: Actual gradient aggregation time: 0.010993
MPI Rank 2: Async gradient aggregation wait time: 0.003246
MPI Rank 2: Actual gradient aggregation time: 0.01233
MPI Rank 2: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.08570326 * 2560; EvalErrorPrediction = 0.57734375 * 2560; time = 0.1277s; samplesPerSecond = 20052.3
MPI Rank 2: Async gradient aggregation wait time: 0.001513
MPI Rank 2: Actual gradient aggregation time: 0.011081
MPI Rank 2: Async gradient aggregation wait time: 0.001962
MPI Rank 2: Actual gradient aggregation time: 0.011242
MPI Rank 2: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.08808565 * 2560; EvalErrorPrediction = 0.55664062 * 2560; time = 0.1264s; samplesPerSecond = 20251.1
MPI Rank 2: Async gradient aggregation wait time: 0.00245
MPI Rank 2: Actual gradient aggregation time: 0.012184
MPI Rank 2: Async gradient aggregation wait time: 0.001991
MPI Rank 2: Actual gradient aggregation time: 0.011368
MPI Rank 2: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.02897840 * 2560; EvalErrorPrediction = 0.57500000 * 2560; time = 0.1274s; samplesPerSecond = 20086.5
MPI Rank 2: Async gradient aggregation wait time: 0.002669
MPI Rank 2: Actual gradient aggregation time: 0.01107
MPI Rank 2: Async gradient aggregation wait time: 0.003233
MPI Rank 2: Actual gradient aggregation time: 0.012563
MPI Rank 2: 08/04/2016 14:01:04:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.11660760 * 2560; EvalErrorPrediction = 0.59687500 * 2560; time = 0.1265s; samplesPerSecond = 20236.7
MPI Rank 2: Async gradient aggregation wait time: 0.003003
MPI Rank 2: Actual gradient aggregation time: 0.00396
MPI Rank 2: 08/04/2016 14:01:04: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.09709898 * 20480; EvalErrorPrediction = 0.57900391 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=1.03117s
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:04: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:04: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 3e-06
MPI Rank 2: Actual gradient aggregation time: 0.030592
MPI Rank 2: Async gradient aggregation wait time: 0.005728
MPI Rank 2: Actual gradient aggregation time: 0.031371
MPI Rank 2: 08/04/2016 14:01:05:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.05439086 * 9216; EvalErrorPrediction = 0.56618924 * 9216; time = 0.2666s; samplesPerSecond = 34574.3
MPI Rank 2: Async gradient aggregation wait time: 0.006789
MPI Rank 2: Actual gradient aggregation time: 0.024968
MPI Rank 2: Async gradient aggregation wait time: 2e-06
MPI Rank 2: Actual gradient aggregation time: 0.014173
MPI Rank 2: 08/04/2016 14:01:05:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.03731571 * 10240; EvalErrorPrediction = 0.56552734 * 10240; time = 0.2613s; samplesPerSecond = 39185.1
MPI Rank 2: 08/04/2016 14:01:05: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.04098756 * 20480; EvalErrorPrediction = 0.56503906 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=0.537292s
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:05: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:05: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 0.008158
MPI Rank 2: Actual gradient aggregation time: 0.020254
MPI Rank 2: Async gradient aggregation wait time: 0.005349
MPI Rank 2: Actual gradient aggregation time: 0.024781
MPI Rank 2: 08/04/2016 14:01:05:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.93476146 * 9216; EvalErrorPrediction = 0.53200955 * 9216; time = 0.2557s; samplesPerSecond = 36039.8
MPI Rank 2: Async gradient aggregation wait time: 0.002866
MPI Rank 2: Actual gradient aggregation time: 0.025077
MPI Rank 2: Async gradient aggregation wait time: 0.002725
MPI Rank 2: Actual gradient aggregation time: 0.025557
MPI Rank 2: 08/04/2016 14:01:05:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.95515738 * 10240; EvalErrorPrediction = 0.53417969 * 10240; time = 0.2670s; samplesPerSecond = 38354.9
MPI Rank 2: Async gradient aggregation wait time: 0.00362
MPI Rank 2: 08/04/2016 14:01:05: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 1.94553283 * 20480; EvalErrorPrediction = 0.53359375 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-05; epochTime=0.532537s
MPI Rank 2: 08/04/2016 14:01:05: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:05: Action "train" complete.
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:01:05: __COMPLETED__
MPI Rank 2: ~MPIWrapper