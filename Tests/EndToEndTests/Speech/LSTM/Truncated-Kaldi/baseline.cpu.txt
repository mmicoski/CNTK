CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/.. OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu DeviceId=-1 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
08/04/2016 13:52:13: -------------------------------------------------------------------
08/04/2016 13:52:13: Build info: 

08/04/2016 13:52:13: 		Built time: Aug  4 2016 13:05:36
08/04/2016 13:52:13: 		Last modified date: Thu Aug  4 12:33:33 2016
08/04/2016 13:52:13: 		Build type: release
08/04/2016 13:52:13: 		Build target: GPU
08/04/2016 13:52:13: 		With 1bit-SGD: no
08/04/2016 13:52:13: 		Math lib: mkl
08/04/2016 13:52:13: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 13:52:13: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 13:52:13: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 13:52:13: 		Build Branch: HEAD
08/04/2016 13:52:13: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 13:52:13: 		Built by philly on 643085f7f8c2
08/04/2016 13:52:13: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 13:52:13: -------------------------------------------------------------------
08/04/2016 13:52:13: -------------------------------------------------------------------
08/04/2016 13:52:13: GPU info:

08/04/2016 13:52:13: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:52:13: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:52:13: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:52:13: -------------------------------------------------------------------

08/04/2016 13:52:13: Running on localhost at 2016/08/04 13:52:13
08/04/2016 13:52:13: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..  OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu  DeviceId=-1  timestamping=true



08/04/2016 13:52:13: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:52:13: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.counts"
            rx= "$DataDir$/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.labels"
            labelMappingFile = "$DataDir$/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu
DeviceId=-1
timestamping=true

08/04/2016 13:52:13: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:52:13: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:52:13: precision = "float"
command = speechTrain
deviceId = -1
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu
DeviceId=-1
timestamping=true

08/04/2016 13:52:13: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:52:13: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.kaldi.cntk:command=speechTrain
configparameters: cntk.kaldi.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
configparameters: cntk.kaldi.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:deviceId=-1
configparameters: cntk.kaldi.cntk:frameMode=false
configparameters: cntk.kaldi.cntk:OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu
configparameters: cntk.kaldi.cntk:parallelTrain=false
configparameters: cntk.kaldi.cntk:precision=float
configparameters: cntk.kaldi.cntk:RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu
configparameters: cntk.kaldi.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]

configparameters: cntk.kaldi.cntk:timestamping=true
configparameters: cntk.kaldi.cntk:truncated=true
08/04/2016 13:52:13: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 13:52:13: Commands: speechTrain
08/04/2016 13:52:13: Precision = "float"
08/04/2016 13:52:13: CNTKModelPath: /tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn
08/04/2016 13:52:13: CNTKCommandTrainInfo: speechTrain : 4
08/04/2016 13:52:13: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4

08/04/2016 13:52:13: ##############################################################################
08/04/2016 13:52:13: #                                                                            #
08/04/2016 13:52:13: # Action "train"                                                             #
08/04/2016 13:52:13: #                                                                            #
08/04/2016 13:52:13: ##############################################################################

08/04/2016 13:52:13: CNTKCommandTrainBegin: speechTrain
reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/04/2016 13:52:14: Creating virgin network.

Post-processing network...

6 roots:
	Err = ErrorPrediction()
	ScaledLogLikelihood = Minus()
	cr = CrossEntropyWithSoftmax()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior._ = Mean()

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ot._.PlusArgs[0]	LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ft._.PlusArgs[0]	LSTMoutput[1].dc	LSTMoutput[1].ft._.PlusArgs[1].matrix
	LSTMoutput[1].ft._.PlusArgs[1]	LSTMoutput[1].ft._	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].it._.PlusArgs[0]	LSTMoutput[1].it._.PlusArgs[1].matrix	LSTMoutput[1].it._.PlusArgs[1]
	LSTMoutput[1].it._	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].bit.ElementTimesArgs[1].z
	LSTMoutput[1].bit.ElementTimesArgs[1]	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot._.PlusArgs[1].matrix	LSTMoutput[1].ot._.PlusArgs[1]	LSTMoutput[1].ot._
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimesArgs[1]	LSTMoutput[1].mt
	LSTMoutput[1].output.TimesArgs[1]	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ot._.PlusArgs[0]	LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ft._.PlusArgs[0]	LSTMoutput[2].dc	LSTMoutput[2].ft._.PlusArgs[1].matrix
	LSTMoutput[2].ft._.PlusArgs[1]	LSTMoutput[2].ft._	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].it._.PlusArgs[0]	LSTMoutput[2].it._.PlusArgs[1].matrix	LSTMoutput[2].it._.PlusArgs[1]
	LSTMoutput[2].it._	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].bit.ElementTimesArgs[1].z
	LSTMoutput[2].bit.ElementTimesArgs[1]	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot._.PlusArgs[1].matrix	LSTMoutput[2].ot._.PlusArgs[1]	LSTMoutput[2].ot._
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimesArgs[1]	LSTMoutput[2].mt
	LSTMoutput[2].output.TimesArgs[1]	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ot._.PlusArgs[0]	LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ft._.PlusArgs[0]	LSTMoutput[3].dc	LSTMoutput[3].ft._.PlusArgs[1].matrix
	LSTMoutput[3].ft._.PlusArgs[1]	LSTMoutput[3].ft._	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].it._.PlusArgs[0]	LSTMoutput[3].it._.PlusArgs[1].matrix	LSTMoutput[3].it._.PlusArgs[1]
	LSTMoutput[3].it._	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].bit.ElementTimesArgs[1].z
	LSTMoutput[3].bit.ElementTimesArgs[1]	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot._.PlusArgs[1].matrix	LSTMoutput[3].ot._.PlusArgs[1]	LSTMoutput[3].ot._
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimesArgs[1]	LSTMoutput[3].mt
	LSTMoutput[3].output.TimesArgs[1]	LSTMoutput[3].output

Validating network. 277 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [132 x 256]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0] = Plus (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0] = Plus (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._ = Plus (LSTMoutput[1].ft._.PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid (LSTMoutput[1].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes (LSTMoutput[1].ft, LSTMoutput[1].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0] = Plus (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1] = DiagTimes (LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it._ = Plus (LSTMoutput[1].it._.PlusArgs[0], LSTMoutput[1].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid (LSTMoutput[1].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes (LSTMoutput[1].it, LSTMoutput[1].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus (LSTMoutput[1].bft, LSTMoutput[1].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._ = Plus (LSTMoutput[1].ot._.PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid (LSTMoutput[1].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes (LSTMoutput[1].ot, LSTMoutput[1].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.TimesArgs[1] = ElementTimes (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[1].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times (LSTMoutput[1].Wmr, LSTMoutput[1].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0] = Plus (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0] = Plus (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._ = Plus (LSTMoutput[2].ft._.PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid (LSTMoutput[2].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes (LSTMoutput[2].ft, LSTMoutput[2].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0] = Plus (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1] = DiagTimes (LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it._ = Plus (LSTMoutput[2].it._.PlusArgs[0], LSTMoutput[2].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid (LSTMoutput[2].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes (LSTMoutput[2].it, LSTMoutput[2].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus (LSTMoutput[2].bft, LSTMoutput[2].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._ = Plus (LSTMoutput[2].ot._.PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid (LSTMoutput[2].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes (LSTMoutput[2].ot, LSTMoutput[2].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.TimesArgs[1] = ElementTimes (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[2].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times (LSTMoutput[2].Wmr, LSTMoutput[2].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0] = Plus (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0] = Plus (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._ = Plus (LSTMoutput[3].ft._.PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid (LSTMoutput[3].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes (LSTMoutput[3].ft, LSTMoutput[3].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0] = Plus (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1] = DiagTimes (LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it._ = Plus (LSTMoutput[3].it._.PlusArgs[0], LSTMoutput[3].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid (LSTMoutput[3].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes (LSTMoutput[3].it, LSTMoutput[3].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus (LSTMoutput[3].bft, LSTMoutput[3].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._ = Plus (LSTMoutput[3].ot._.PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid (LSTMoutput[3].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes (LSTMoutput[3].ot, LSTMoutput[3].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.TimesArgs[1] = ElementTimes (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[3].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times (LSTMoutput[3].Wmr, LSTMoutput[3].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0] = Times (LSTMoutputW.PlusArgs[0].TimesArgs[0], LSTMoutputW.PlusArgs[0].TimesArgs[1]) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> LSTMoutputW = Plus (LSTMoutputW.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> Err = ErrorPrediction (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior._) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (LSTMoutputW, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]

Validating network. 188 nodes to process in pass 2.

Validating --> LSTMoutput[1].dh = PastValue (LSTMoutput[1].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].dc = PastValue (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1] = DiagTimes (LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dh = PastValue (LSTMoutput[2].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dc = PastValue (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1] = DiagTimes (LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dh = PastValue (LSTMoutput[3].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dc = PastValue (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1] = DiagTimes (LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



130 out of 277 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 13:52:14: Created model with 277 nodes on CPU.

08/04/2016 13:52:14: Training criterion node(s):
08/04/2016 13:52:14: 	cr = CrossEntropyWithSoftmax

08/04/2016 13:52:14: Evaluation criterion node(s):

08/04/2016 13:52:14: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0x1b06958: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1b15448: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1b15bf8: {[features Value[1 x 363 x *]] }
0x1b27198: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1b28168: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1b2da98: {[LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1b318a8: {[LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1b31ae8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b31de8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b32be8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b32e28: {[LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1b33068: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b333a8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b335e8: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1b33828: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b33b68: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b33da8: {[LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1b33fe8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b342e8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1b35838: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1b35a98: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1b38c78: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1b47c48: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1b8ca38: {[Err Value[1]] }
0x1b9a398: {[LSTMoutputW.PlusArgs[0].TimesArgs[0] Value[132 x 256]] }
0x1bd8ef8: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1bda308: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1bdb408: {[LSTMoutput[3].Wmr Value[256 x 1024]] }
0x1bdb6c8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1c0a108: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1c0c008: {[LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1c0c948: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1c0cd38: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1c0f318: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1c26168: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1c28318: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1c29528: {[LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1c29b08: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x1c2b278: {[B Value[132]] }
0x1c2dc38: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1c2dd98: {[LSTMoutput[1].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1c2def8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1c2e058: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1c2e1b8: {[LSTMoutput[1].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1c2e318: {[LSTMoutput[1].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1c2e478: {[LSTMoutput[1].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1c2e5d8: {[LSTMoutput[1].ft._ Value[1024 x 1 x *]] }
0x1c2e738: {[LSTMoutput[1].ft Value[1024 x 1 x *]] }
0x1c2e898: {[LSTMoutput[1].bft Value[1024 x 1 x *]] }
0x1c2e9f8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1c2eb58: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1c2ecb8: {[LSTMoutput[1].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1c2ee18: {[LSTMoutput[1].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1c2ef78: {[LSTMoutput[1].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1c2f0d8: {[LSTMoutput[1].it._ Value[1024 x 1 x *]] }
0x1c2f238: {[LSTMoutput[1].it Value[1024 x 1 x *]] }
0x1c2f398: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x1c2f4f8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x1c2f658: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x1c30338: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x1c30498: {[cr Value[1]] }
0x1c552d8: {[LSTMoutput[1].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1c55498: {[LSTMoutput[1].bft Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1c55658: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1c55818: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1c559d8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ft._ Value[1024 x 1 x *]] }
0x1c55b98: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].dh Gradient[256 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft Value[1024 x 1 x *]] }
0x1c55d58: {[LSTMoutput[1].it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Value[1024 x 1 x *]] }
0x1c55f18: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1c560d8: {[LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1c56298: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1c56458: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1c56618: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1c567d8: {[LSTMoutput[1].ft._ Gradient[1024 x 1 x *]] [LSTMoutput[2].it._ Value[1024 x 1 x *]] }
0x1c56998: {[LSTMoutput[1].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it Value[1024 x 1 x *]] }
0x1c56b58: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x1c56d18: {[LSTMoutput[1].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x1c56ed8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x1c57098: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x1c57258: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x1c57418: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit Value[1024 x 1 x *]] }
0x1c575d8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ct Value[1024 x 1 x *]] }
0x1c57798: {[LSTMoutput[2].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1c57958: {[LSTMoutput[2].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1c57b18: {[LSTMoutput[2].ot._ Value[1024 x 1 x *]] }
0x1c57cd8: {[LSTMoutput[2].ot Value[1024 x 1 x *]] }
0x1c57e98: {[LSTMoutput[2].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x1c58058: {[LSTMoutput[2].mt Value[1024 x 1 x *]] }
0x1c58218: {[LSTMoutput[2].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x1c583d8: {[LSTMoutput[2].output Value[256 x 1 x *]] }
0x1c58598: {[LSTMoutput[2].Wmr Gradient[256 x 1024]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x1c58758: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1c58918: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x1c58ad8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1c58c98: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x1c58e58: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x1c594b8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1c5ab58: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1c5b1a8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1c5bb38: {[logPrior._ Value[132]] }
0x1c5bbd8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1c5bf08: {[LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1c78508: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1c79008: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1c79cd8: {[LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1c9e2b8: {[LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1c9e4f8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1c9e838: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1c9ea78: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1c9ecb8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1c9eff8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1c9f238: {[LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1c9f478: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1c9f778: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1ca0578: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1ca07b8: {[LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1ca09f8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1ca0d38: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1ca0f78: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x1ca11b8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1ca14f8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cb9888: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1cbd048: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cbd208: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cbd3c8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cbd588: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cbd748: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cbd948: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cbdb88: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cbe078: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x1cd5268: {[LSTMoutput[1].Wmr Value[256 x 1024]] }
0x1cd5658: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1cd5cc8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1cd5d68: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1ce4b68: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x1ce4d28: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0x1ce4ee8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x1ce50a8: {[LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x1ce5268: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1ce5428: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].dh Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x1ce55e8: {[LSTMoutput[1].bit Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._ Gradient[1024 x 1 x *]] }
0x1ce57a8: {[LSTMoutput[1].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x1ce5968: {[LSTMoutput[1].it._ Gradient[1024 x 1 x *]] [LSTMoutput[2].ft Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x1ce5b28: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x1ce5ce8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x1ce5ea8: {[LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x1ce6068: {[LSTMoutput[1].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x1ce6228: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x1ce63e8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Gradient[1024 x 1 x *]] }
0x1ce65a8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x1ce6768: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x1ce6928: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x1ce6ae8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x1ce6ca8: {[LSTMoutput[2].ot Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1ce6e68: {[LSTMoutput[1].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._ Gradient[1024 x 1 x *]] [LSTMoutput[3].ft Gradient[1024 x 1 x *]] }
0x1ce7028: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft._ Gradient[1024 x 1 x *]] }
0x1ce71e8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x1ce73a8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x1ce7568: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x1ce7728: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x1ce78e8: {[LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x1ce7aa8: {[LSTMoutput[1].output Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x1ce7c68: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x1ce7e28: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x1ce7fe8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x1ce81a8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x1ce8368: {[LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x1ce8528: {[LSTMoutput[2].mt Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1ce86e8: {[LSTMoutput[2].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x1ce88a8: {[LSTMoutput[2].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x1ce8a68: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x1cf12f8: {[logPrior Value[132]] }
0x1cfee48: {[labels Value[132 x *]] }
0x1d05c98: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1d07038: {[LSTMoutput[1].dc Value[1024 x 1 x *]] }
0x1d07608: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1d076a8: {[LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1d24268: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x1d243c8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1d24528: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x1d24688: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x1d247e8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1d24948: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1d24aa8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x1d24c08: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1d24d68: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x1d24ec8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1d25128: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1d27a28: {[realFeatures Value[363 x 1 x *]] }
0x1d28198: {[featNorm Value[33 x 1 x *]] }
0x1d28498: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1d287d8: {[feashift Value[33 x 1 x *]] }
0x1d29d68: {[featNorm.invStdDevVector Value[33 x 1]] }
0x1d34298: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1d3e718: {[LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1d3ecb8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x1d4f9d8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x1d4ffd8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1d50728: {[featNorm.meanVector Value[33 x 1]] }
0x1d58fa8: {[LSTMoutput[1].it Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Value[1024 x 1 x *]] }
0x1d590a8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].dh Value[256 x 1 x *]] }
0x1d59bb8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1d5ac98: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1dba808: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ct Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x1dba9c8: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1dc8f08: {[LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1dca308: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1dcb0f8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1de1888: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1de9608: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1ded318: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1ded658: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1deddf8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x1dedf08: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1dee9d8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1def288: {[LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1df1008: {[LSTMoutput[2].Wmr Value[256 x 1024]] }
0x1df1158: {[LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1df12a8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1df25f8: {[LSTMoutput[3].mt Value[1024 x 1 x *]] }
0x1df27b8: {[LSTMoutput[3].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x1df2978: {[LSTMoutput[3].output Value[256 x 1 x *]] }
0x1df2b38: {[LSTMoutputW.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].Wmr Gradient[256 x 1024]] }
0x1df2cf8: {[LSTMoutputW.PlusArgs[0] Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1df2eb8: {[LSTMoutputW Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[0] Gradient[132 x 256]] }
0x1df3968: {[cr Gradient[1]] }
0x1df3b28: {[LSTMoutputW Gradient[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].output.TimesArgs[1] Gradient[1024 x 1 x *]] }
0x1df3ce8: {[LSTMoutputW.PlusArgs[0] Gradient[132 x 1 x *]] [LSTMoutput[3].output Gradient[256 x 1 x *]] }
0x1df3ea8: {[B Gradient[132]] }
0x1df4098: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1df4258: {[LSTMoutput[3].mt Gradient[1024 x 1 x *]] }
0x1df4418: {[LSTMoutput[3].ot Gradient[1024 x 1 x *]] }
0x1df45d8: {[LSTMoutput[3].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x1df4798: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ct Gradient[1024 x 1 x *]] }
0x1df4958: {[LSTMoutput[3].ot._ Gradient[1024 x 1 x *]] }
0x1df4b18: {[LSTMoutput[3].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x1df4cd8: {[LSTMoutput[3].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x1df5218: {[LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x1df53d8: {[LSTMoutput[3].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x1df5598: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x1df5758: {[LSTMoutput[1].ft Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Gradient[1024 x 1 x *]] }
0x1df5918: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit Gradient[1024 x 1 x *]] }
0x1df5ad8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Gradient[1024 x 1 x *]] }
0x1df5c98: {[LSTMoutput[1].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x1df5e58: {[LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0x1df6018: {[LSTMoutput[2].output Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x1df61d8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x1e09318: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1e093d8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1e09488: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1e0a688: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1e0e438: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x1e0ec68: {[LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1e0fb58: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1e1bb68: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x1e1cb38: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1e1d0b8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].dh Value[256 x 1 x *]] }
0x1e234b8: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1e23b78: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].dh Value[256 x 1 x *]] }
0x1e2a078: {[LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x1e2b078: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1e2d1c8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1e3e898: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1e3f0c8: {[LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1e3f728: {[LSTMoutput[2].it Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Value[1024 x 1 x *]] }
0x1e4a398: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1e4a6f8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1e4a7f8: {[LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1e4adc8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x1e4c6d8: {[LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x1e4c968: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x1e4d9b8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x1e4db18: {[LSTMoutput[1].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x1e4dc78: {[LSTMoutput[1].bit Value[1024 x 1 x *]] }
0x1e4ddd8: {[LSTMoutput[1].ct Value[1024 x 1 x *]] }
0x1e4df38: {[LSTMoutput[1].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1e4e098: {[LSTMoutput[1].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1e4e1f8: {[LSTMoutput[1].ot._ Value[1024 x 1 x *]] }
0x1e4e358: {[LSTMoutput[1].ot Value[1024 x 1 x *]] }
0x1e4e518: {[LSTMoutput[1].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x1e4e6d8: {[LSTMoutput[1].mt Value[1024 x 1 x *]] }
0x1e4e898: {[LSTMoutput[1].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x1e4ea58: {[LSTMoutput[1].output Value[256 x 1 x *]] }
0x1e4ec18: {[LSTMoutput[1].Wmr Gradient[256 x 1024]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x1e4edd8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1e4ef98: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x1e4f158: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1e4f318: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x1e4f4d8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x1e4f698: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1e4f858: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1e4fa18: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x1e4fbd8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1e4fd98: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x1e4ff58: {[LSTMoutput[1].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1e50118: {[LSTMoutput[1].ot._ Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1e502d8: {[LSTMoutput[1].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1e50498: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1e51908: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1e51ac8: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x1e51c88: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x1e51e48: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x1e52008: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x1e521c8: {[LSTMoutput[2].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1e52388: {[LSTMoutput[2].ot._ Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1e52548: {[LSTMoutput[2].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1e52708: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1e528c8: {[LSTMoutput[2].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1e52a88: {[LSTMoutput[1].it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1e52c48: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1e52e08: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1e52fc8: {[LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ft._ Value[1024 x 1 x *]] }
0x1e53188: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].dh Gradient[256 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft Value[1024 x 1 x *]] }
0x1e53348: {[LSTMoutput[1].dc Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Value[1024 x 1 x *]] }
0x1e53508: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x1e536c8: {[LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x1e53888: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x1e53a48: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1e53c08: {[LSTMoutput[1].ot Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1e53dc8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft._ Gradient[1024 x 1 x *]] [LSTMoutput[3].it._ Value[1024 x 1 x *]] }
0x1e53f88: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Value[1024 x 1 x *]] }
0x1e54148: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x1e54308: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x1e544c8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x1e54688: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x1e54848: {[LSTMoutput[1].mt Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x1e54a08: {[LSTMoutput[1].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit Value[1024 x 1 x *]] }
0x1e54bc8: {[LSTMoutput[1].ct Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ct Value[1024 x 1 x *]] }
0x1e54d88: {[LSTMoutput[3].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x1e54f48: {[LSTMoutput[3].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x1e55108: {[LSTMoutput[3].ot._ Value[1024 x 1 x *]] }
0x1e552c8: {[LSTMoutput[3].ot Value[1024 x 1 x *]] }
0x1e55488: {[LSTMoutput[3].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x1e64a18: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1e883c8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x1e889f8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x1e89538: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x1e9f928: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }


08/04/2016 13:52:14: Precomputing --> 3 PreCompute nodes found.

08/04/2016 13:52:14: 	featNorm.meanVector = Mean()
08/04/2016 13:52:14: 	featNorm.invStdDevVector = InvStdDev()
08/04/2016 13:52:14: 	logPrior._ = Mean()
lazyrandomization: re-randomizing for sweep 0 in utterance mode
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0) with 1 datapasses
feature set 0: requirerandomizedchunk: paging in randomized chunk 1 (frame range [90234..180391]), 1 resident in RAM
requiredata: determined feature kind as 33-dimensional
requiredata: 341 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 0 (frame range [0..90233]), 2 resident in RAM
requiredata: 328 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 2 (frame range [180392..252733]), 3 resident in RAM
requiredata: 279 utterances read

08/04/2016 13:52:18: Precomputing --> Completed.


08/04/2016 13:52:18: Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0) with 1 datapasses

08/04/2016 13:52:18: Starting minibatch loop.
08/04/2016 13:52:25:  Epoch[ 1 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.80280823 * 6400; Err = 0.89984375 * 6400; time = 6.4827s; samplesPerSecond = 987.2
08/04/2016 13:52:30:  Epoch[ 1 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.60525208 * 6400; Err = 0.86890625 * 6400; time = 5.9663s; samplesPerSecond = 1072.7
08/04/2016 13:52:37:  Epoch[ 1 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.63169894 * 5332; Err = 0.86121530 * 5332; time = 6.4785s; samplesPerSecond = 823.0
08/04/2016 13:52:43:  Epoch[ 1 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.55729026 * 1846; Err = 0.94637053 * 1846; time = 6.1957s; samplesPerSecond = 297.9
08/04/2016 13:52:49:  Epoch[ 1 of 4]-Minibatch[  41-  50, 4.88%]: cr = 4.55495690 * 464; Err = 0.95258621 * 464; time = 6.2223s; samplesPerSecond = 74.6
08/04/2016 13:52:52: Finished Epoch[ 1 of 4]: [Training] cr = 4.66789431 * 20570; Err = 0.88556150 * 20570; totalSamplesSeen = 20570; learningRatePerSample = 0.00078125001; epochTime=33.7072s
08/04/2016 13:52:52: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.1'

08/04/2016 13:52:52: Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20570) with 1 datapasses

08/04/2016 13:52:52: Starting minibatch loop.
08/04/2016 13:52:59:  Epoch[ 2 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.36622009 * 6400; Err = 0.82578125 * 6400; time = 6.5514s; samplesPerSecond = 976.9
08/04/2016 13:53:05:  Epoch[ 2 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.38836670 * 6400; Err = 0.88203125 * 6400; time = 6.2563s; samplesPerSecond = 1023.0
08/04/2016 13:53:11:  Epoch[ 2 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.41521295 * 5470; Err = 0.90822669 * 5470; time = 6.1478s; samplesPerSecond = 889.7
08/04/2016 13:53:17:  Epoch[ 2 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.37051434 * 2036; Err = 0.90717092 * 2036; time = 6.0097s; samplesPerSecond = 338.8
08/04/2016 13:53:23: Finished Epoch[ 2 of 4]: [Training] cr = 4.38763434 * 20470; Err = 0.87454812 * 20470; totalSamplesSeen = 41040; learningRatePerSample = 0.00078125001; epochTime=30.9948s
08/04/2016 13:53:24: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.2'

08/04/2016 13:53:24: Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 41040) with 1 datapasses

08/04/2016 13:53:24: Starting minibatch loop.
08/04/2016 13:53:31:  Epoch[ 3 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.19500702 * 6400; Err = 0.85171875 * 6400; time = 7.0010s; samplesPerSecond = 914.2
08/04/2016 13:53:37:  Epoch[ 3 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.09230499 * 6400; Err = 0.85000000 * 6400; time = 5.8115s; samplesPerSecond = 1101.3
08/04/2016 13:53:43:  Epoch[ 3 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.22901068 * 5910; Err = 0.88443316 * 5910; time = 5.8750s; samplesPerSecond = 1006.0
08/04/2016 13:53:49:  Epoch[ 3 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.21967493 * 1740; Err = 0.90344828 * 1740; time = 6.1809s; samplesPerSecond = 281.5
08/04/2016 13:53:52: Finished Epoch[ 3 of 4]: [Training] cr = 4.17638224 * 20578; Err = 0.86548741 * 20578; totalSamplesSeen = 61618; learningRatePerSample = 0.00078125001; epochTime=28.548s
08/04/2016 13:53:53: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn.3'

08/04/2016 13:53:53: Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61618) with 1 datapasses

08/04/2016 13:53:53: Starting minibatch loop.
08/04/2016 13:53:59:  Epoch[ 4 of 4]-Minibatch[   1-  10, 0.98%]: cr = 3.99454529 * 6400; Err = 0.83812500 * 6400; time = 6.2586s; samplesPerSecond = 1022.6
08/04/2016 13:54:05:  Epoch[ 4 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.12654419 * 6400; Err = 0.87031250 * 6400; time = 5.7243s; samplesPerSecond = 1118.0
08/04/2016 13:54:11:  Epoch[ 4 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.30654189 * 5420; Err = 0.90258303 * 5420; time = 5.8229s; samplesPerSecond = 930.8
08/04/2016 13:54:17:  Epoch[ 4 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.22490448 * 1734; Err = 0.89158016 * 1734; time = 6.5116s; samplesPerSecond = 266.3
08/04/2016 13:54:25:  Epoch[ 4 of 4]-Minibatch[  41-  50, 4.88%]: cr = 3.84306066 * 612; Err = 0.79575163 * 612; time = 7.1612s; samplesPerSecond = 85.5
08/04/2016 13:54:26: Finished Epoch[ 4 of 4]: [Training] cr = 4.13165314 * 20600; Err = 0.86854369 * 20600; totalSamplesSeen = 82218; learningRatePerSample = 0.00078125001; epochTime=32.6118s
08/04/2016 13:54:26: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_cpu/models/cntkSpeech.dnn'
08/04/2016 13:54:26: CNTKCommandTrainEnd: speechTrain

08/04/2016 13:54:26: Action "train" complete.

08/04/2016 13:54:26: __COMPLETED__