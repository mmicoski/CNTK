CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/.. OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu DeviceId=0 timestamping=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
08/04/2016 13:54:27: -------------------------------------------------------------------
08/04/2016 13:54:27: Build info: 

08/04/2016 13:54:27: 		Built time: Aug  4 2016 13:05:36
08/04/2016 13:54:27: 		Last modified date: Thu Aug  4 12:33:33 2016
08/04/2016 13:54:27: 		Build type: release
08/04/2016 13:54:27: 		Build target: GPU
08/04/2016 13:54:27: 		With 1bit-SGD: no
08/04/2016 13:54:27: 		Math lib: mkl
08/04/2016 13:54:27: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 13:54:27: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 13:54:27: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 13:54:27: 		Build Branch: HEAD
08/04/2016 13:54:27: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 13:54:27: 		Built by philly on 643085f7f8c2
08/04/2016 13:54:27: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 13:54:27: -------------------------------------------------------------------
08/04/2016 13:54:28: -------------------------------------------------------------------
08/04/2016 13:54:28: GPU info:

08/04/2016 13:54:28: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:54:28: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:54:28: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:54:28: -------------------------------------------------------------------

08/04/2016 13:54:28: Running on localhost at 2016/08/04 13:54:28
08/04/2016 13:54:28: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/../cntk.kaldi.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..  OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu  DeviceId=0  timestamping=true



08/04/2016 13:54:28: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:54:28: precision = "float"
command = speechTrain
deviceId = $DeviceId$
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "$DataDir$/glob_0000.counts"
            rx= "$DataDir$/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.labels"
            labelMappingFile = "$DataDir$/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu
DeviceId=0
timestamping=true

08/04/2016 13:54:28: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:54:28: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:54:28: precision = "float"
command = speechTrain
deviceId = 0
parallelTrain = false
frameMode = false
truncated = true
speechTrain = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu
DeviceId=0
timestamping=true

08/04/2016 13:54:28: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:54:28: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.kaldi.cntk:command=speechTrain
configparameters: cntk.kaldi.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/LSTM/Truncated-Kaldi/..
configparameters: cntk.kaldi.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
configparameters: cntk.kaldi.cntk:deviceId=0
configparameters: cntk.kaldi.cntk:frameMode=false
configparameters: cntk.kaldi.cntk:OutputDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu
configparameters: cntk.kaldi.cntk:parallelTrain=false
configparameters: cntk.kaldi.cntk:precision=float
configparameters: cntk.kaldi.cntk:RunDir=/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu
configparameters: cntk.kaldi.cntk:speechTrain=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn"
    traceLevel = 1
    SGD = [
        epochSize = 20480
        minibatchSize = 20
        learningRatesPerMB = 0.5
        numMBsToShowResult = 10
        momentumPerMB = 0:0.9
        maxEpochs = 4
        keepCheckPointFiles = true       
    ]
    reader = [
        readerType = "Kaldi2Reader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        nbruttsineachrecurrentiter = 32
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts"
            rx= "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.feats"
            featureTransform=NO_FEATURE_TRANSFORM
        ]
        labels = [
            mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels"
            labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
    ExperimentalNetworkBuilder=[
        WeightParam(m,n) = Parameter(m, n, init='uniform', initValueScale=1, initOnCPUOnly=true, randomSeed=1)
        BiasParam(m) = ParameterTensor(m, init='fixedValue', value=0.0)
        ScalarParam() = Parameter(1, 1, init='fixedValue', value=0.0)
        NewBeta() = Exp(ScalarParam())
        Stabilize(in) = Scale(NewBeta(), in)
        LSTMPComponentWithSelfStab(inputDim, outputDim, cellDim, inputx) =
        [
            // parameter macros--these carry their own weight matrices
            B() = BiasParam(cellDim)
            Wmr = WeightParam(outputDim, cellDim);
            W(v) = WeightParam(cellDim, inputDim) * Stabilize(v)    // input-to-hidden
            H(h) = WeightParam(cellDim, outputDim) * Stabilize(h)   // hidden-to-hidden
            C(c) = DiagTimes(WeightParam(cellDim, 1), Stabilize(c)) // cell-to-hiddden
            // LSTM cell
            PastValueShift(dimDummy, input) = Shift(input, /*fromOffsets=*/-1, /*boundaryValue=*/Constant(0.1), dim=-1)
            PastValue1 = PastValue
            dh = PastValue1(outputDim, output);                     // hidden state(t-1)
            dc = PastValue1(cellDim, ct);                           // cell(t-1)
            // note: the W(inputx) here are all different, they all come with their own set of weights; same for H(dh), C(dc), and B()
            it = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // input gate(t)
            bit = it .* Tanh(W(inputx) + (H(dh) + B()))             // applied to tanh of input network
            ft = Sigmoid(W(inputx) + B() + H(dh) + C(dc))           // forget-me-not gate(t)
            bft = ft .* dc                                          // applied to cell(t-1)
            ct = bft + bit                                          // c(t) is sum of both
            ot = Sigmoid(W(inputx) + B() + H(dh) + C(ct))           // output gate(t)
            mt = ot .* Tanh(ct)                                     // applied to tanh(cell(t))
            output = Wmr * Stabilize(mt)                            // projection
        ]
        // define basic I/O
        baseFeatDim = 33
        featDim = 11 * baseFeatDim
        labelDim = 132
        // hidden dimensions
        cellDim = 1024
        hiddenDim = 256
        numLSTMs = 3        // number of hidden LSTM model layers
        // features
        features = Input((1 : featDim),  tag='feature') // TEST: Artificially reading data transposed
        realFeatures = Transpose (features)             //       and swapping them back to (featDim:1), for testing Transpose()
        labels   = Input(labelDim, tag='label')
        feashift = RowSlice(featDim - baseFeatDim, baseFeatDim, realFeatures);
        featNorm = MeanVarNorm(feashift)
        // define the stack of hidden LSTM layers
        LSTMoutput[k:1..numLSTMs] = if k == 1
                                    then LSTMPComponentWithSelfStab(baseFeatDim, hiddenDim, cellDim, featNorm)
                                    else LSTMPComponentWithSelfStab(hiddenDim,   hiddenDim, cellDim, LSTMoutput[k-1].output)
        // and add a softmax layer on top
        W(in) = WeightParam(labelDim, hiddenDim) * Stabilize(in)
        B = BiasParam(labelDim)
        LSTMoutputW = W(LSTMoutput[numLSTMs].output) + B;
        // training
        cr = CrossEntropyWithSoftmax(labels, LSTMoutputW, tag='criterion')  // this is the objective
        Err = ErrorPrediction(labels, LSTMoutputW, tag='eval')              // this also gets tracked
        // decoding
        logPrior = LogPrior(labels)	 
        ScaledLogLikelihood = Minus(LSTMoutputW, logPrior, tag='output')    // sadly we can't say x - y since we want to assign a tag
    ]
]

configparameters: cntk.kaldi.cntk:timestamping=true
configparameters: cntk.kaldi.cntk:truncated=true
08/04/2016 13:54:28: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 13:54:28: Commands: speechTrain
08/04/2016 13:54:28: Precision = "float"
08/04/2016 13:54:28: CNTKModelPath: /tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn
08/04/2016 13:54:28: CNTKCommandTrainInfo: speechTrain : 4
08/04/2016 13:54:28: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4

08/04/2016 13:54:28: ##############################################################################
08/04/2016 13:54:28: #                                                                            #
08/04/2016 13:54:28: # Action "train"                                                             #
08/04/2016 13:54:28: #                                                                            #
08/04/2016 13:54:28: ##############################################################################

08/04/2016 13:54:28: CNTKCommandTrainBegin: speechTrain
reading script file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.counts ... 948 entries
total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.kaldi.list
htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.labels ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/04/2016 13:54:28: Creating virgin network.

Post-processing network...

6 roots:
	Err = ErrorPrediction()
	ScaledLogLikelihood = Minus()
	cr = CrossEntropyWithSoftmax()
	featNorm.invStdDevVector = InvStdDev()
	featNorm.meanVector = Mean()
	logPrior._ = Mean()

Loop[0] --> Loop_LSTMoutput[1].output -> 35 nodes

	LSTMoutput[1].dh	LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ot._.PlusArgs[0]	LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].ft._.PlusArgs[0]	LSTMoutput[1].dc	LSTMoutput[1].ft._.PlusArgs[1].matrix
	LSTMoutput[1].ft._.PlusArgs[1]	LSTMoutput[1].ft._	LSTMoutput[1].ft
	LSTMoutput[1].bft	LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[1].it._.PlusArgs[0]	LSTMoutput[1].it._.PlusArgs[1].matrix	LSTMoutput[1].it._.PlusArgs[1]
	LSTMoutput[1].it._	LSTMoutput[1].it	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[1].bit.ElementTimesArgs[1].z
	LSTMoutput[1].bit.ElementTimesArgs[1]	LSTMoutput[1].bit	LSTMoutput[1].ct
	LSTMoutput[1].ot._.PlusArgs[1].matrix	LSTMoutput[1].ot._.PlusArgs[1]	LSTMoutput[1].ot._
	LSTMoutput[1].ot	LSTMoutput[1].mt.ElementTimesArgs[1]	LSTMoutput[1].mt
	LSTMoutput[1].output.TimesArgs[1]	LSTMoutput[1].output

Loop[1] --> Loop_LSTMoutput[2].output -> 35 nodes

	LSTMoutput[2].dh	LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ot._.PlusArgs[0]	LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].ft._.PlusArgs[0]	LSTMoutput[2].dc	LSTMoutput[2].ft._.PlusArgs[1].matrix
	LSTMoutput[2].ft._.PlusArgs[1]	LSTMoutput[2].ft._	LSTMoutput[2].ft
	LSTMoutput[2].bft	LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[2].it._.PlusArgs[0]	LSTMoutput[2].it._.PlusArgs[1].matrix	LSTMoutput[2].it._.PlusArgs[1]
	LSTMoutput[2].it._	LSTMoutput[2].it	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[2].bit.ElementTimesArgs[1].z
	LSTMoutput[2].bit.ElementTimesArgs[1]	LSTMoutput[2].bit	LSTMoutput[2].ct
	LSTMoutput[2].ot._.PlusArgs[1].matrix	LSTMoutput[2].ot._.PlusArgs[1]	LSTMoutput[2].ot._
	LSTMoutput[2].ot	LSTMoutput[2].mt.ElementTimesArgs[1]	LSTMoutput[2].mt
	LSTMoutput[2].output.TimesArgs[1]	LSTMoutput[2].output

Loop[2] --> Loop_LSTMoutput[3].output -> 35 nodes

	LSTMoutput[3].dh	LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ot._.PlusArgs[0]	LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].ft._.PlusArgs[0]	LSTMoutput[3].dc	LSTMoutput[3].ft._.PlusArgs[1].matrix
	LSTMoutput[3].ft._.PlusArgs[1]	LSTMoutput[3].ft._	LSTMoutput[3].ft
	LSTMoutput[3].bft	LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]	LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1]
	LSTMoutput[3].it._.PlusArgs[0]	LSTMoutput[3].it._.PlusArgs[1].matrix	LSTMoutput[3].it._.PlusArgs[1]
	LSTMoutput[3].it._	LSTMoutput[3].it	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]
	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0]	LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]	LSTMoutput[3].bit.ElementTimesArgs[1].z
	LSTMoutput[3].bit.ElementTimesArgs[1]	LSTMoutput[3].bit	LSTMoutput[3].ct
	LSTMoutput[3].ot._.PlusArgs[1].matrix	LSTMoutput[3].ot._.PlusArgs[1]	LSTMoutput[3].ot._
	LSTMoutput[3].ot	LSTMoutput[3].mt.ElementTimesArgs[1]	LSTMoutput[3].mt
	LSTMoutput[3].output.TimesArgs[1]	LSTMoutput[3].output

Validating network. 277 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [132 x 256]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].Wmr = LearnableParameter() :  -> [256 x 1024]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> features = InputValue() :  -> [1 x 363 x *]
Validating --> realFeatures = TransposeDimensions (features) : [1 x 363 x *] -> [363 x 1 x *]
Validating --> feashift = Slice (realFeatures) : [363 x 1 x *] -> [33 x 1 x *]
Validating --> featNorm.meanVector = Mean (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm.invStdDevVector = InvStdDev (feashift) : [33 x 1 x *] -> [33 x 1]
Validating --> featNorm = PerDimMeanVarNormalization (feashift, featNorm.meanVector, featNorm.invStdDevVector) : [33 x 1 x *], [33 x 1], [33 x 1] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 33]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, featNorm) : [1 x 1], [33 x 1 x *] -> [33 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 33], [33 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ot._.PlusArgs[0] = Plus (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[0] = Plus (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].ft._ = Plus (LSTMoutput[1].ft._.PlusArgs[0], LSTMoutput[1].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft = Sigmoid (LSTMoutput[1].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bft = ElementTimes (LSTMoutput[1].ft, LSTMoutput[1].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[0] = Plus (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].it._.PlusArgs[1] = DiagTimes (LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].it._ = Plus (LSTMoutput[1].it._.PlusArgs[0], LSTMoutput[1].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it = Sigmoid (LSTMoutput[1].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[1].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit = ElementTimes (LSTMoutput[1].it, LSTMoutput[1].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ct = Plus (LSTMoutput[1].bft, LSTMoutput[1].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot._ = Plus (LSTMoutput[1].ot._.PlusArgs[0], LSTMoutput[1].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ot = Sigmoid (LSTMoutput[1].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].mt = ElementTimes (LSTMoutput[1].ot, LSTMoutput[1].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output.TimesArgs[1] = ElementTimes (LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[1].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].output = Times (LSTMoutput[1].Wmr, LSTMoutput[1].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ot._.PlusArgs[0] = Plus (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[0] = Plus (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].ft._ = Plus (LSTMoutput[2].ft._.PlusArgs[0], LSTMoutput[2].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft = Sigmoid (LSTMoutput[2].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bft = ElementTimes (LSTMoutput[2].ft, LSTMoutput[2].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[0] = Plus (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].it._.PlusArgs[1] = DiagTimes (LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].it._ = Plus (LSTMoutput[2].it._.PlusArgs[0], LSTMoutput[2].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it = Sigmoid (LSTMoutput[2].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[2].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit = ElementTimes (LSTMoutput[2].it, LSTMoutput[2].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ct = Plus (LSTMoutput[2].bft, LSTMoutput[2].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot._ = Plus (LSTMoutput[2].ot._.PlusArgs[0], LSTMoutput[2].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ot = Sigmoid (LSTMoutput[2].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].mt = ElementTimes (LSTMoutput[2].ot, LSTMoutput[2].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output.TimesArgs[1] = ElementTimes (LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[2].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].output = Times (LSTMoutput[2].Wmr, LSTMoutput[2].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] = Plus (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector = LearnableParameter() :  -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor = Exp (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] = LearnableParameter() :  -> [1024 x 256]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ = LearnableParameter() :  -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor = Exp (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._) : [1 x 1] -> [1 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] = LearnableParameter() :  -> [1024]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ot._.PlusArgs[0] = Plus (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[0] = Plus (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].ft._ = Plus (LSTMoutput[3].ft._.PlusArgs[0], LSTMoutput[3].ft._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft = Sigmoid (LSTMoutput[3].ft._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bft = ElementTimes (LSTMoutput[3].ft, LSTMoutput[3].dc) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[0] = Plus (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].it._.PlusArgs[1] = DiagTimes (LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].it._ = Plus (LSTMoutput[3].it._.PlusArgs[0], LSTMoutput[3].it._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it = Sigmoid (LSTMoutput[3].it._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256] -> [256 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1], [1024] -> [1024 x 1]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1] = Tanh (LSTMoutput[3].bit.ElementTimesArgs[1].z) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit = ElementTimes (LSTMoutput[3].it, LSTMoutput[3].bit.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ct = Plus (LSTMoutput[3].bft, LSTMoutput[3].bit) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].ct) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ot._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot._ = Plus (LSTMoutput[3].ot._.PlusArgs[0], LSTMoutput[3].ot._.PlusArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ot = Sigmoid (LSTMoutput[3].ot._) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt.ElementTimesArgs[1] = Tanh (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].mt = ElementTimes (LSTMoutput[3].ot, LSTMoutput[3].mt.ElementTimesArgs[1]) : [1024 x 1 x *], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output.TimesArgs[1] = ElementTimes (LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor, LSTMoutput[3].mt) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].output = Times (LSTMoutput[3].Wmr, LSTMoutput[3].output.TimesArgs[1]) : [256 x 1024], [1024 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].output) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutputW.PlusArgs[0] = Times (LSTMoutputW.PlusArgs[0].TimesArgs[0], LSTMoutputW.PlusArgs[0].TimesArgs[1]) : [132 x 256], [256 x 1 x *] -> [132 x 1 x *]
Validating --> B = LearnableParameter() :  -> [132]
Validating --> LSTMoutputW = Plus (LSTMoutputW.PlusArgs[0], B) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> Err = ErrorPrediction (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]
Validating --> logPrior._ = Mean (labels) : [132 x *] -> [132]
Validating --> logPrior = Log (logPrior._) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (LSTMoutputW, logPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
Validating --> cr = CrossEntropyWithSoftmax (labels, LSTMoutputW) : [132 x *], [132 x 1 x *] -> [1]

Validating network. 188 nodes to process in pass 2.

Validating --> LSTMoutput[1].dh = PastValue (LSTMoutput[1].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].dc = PastValue (LSTMoutput[1].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[1].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].it._.PlusArgs[1] = DiagTimes (LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[1].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[1].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dh = PastValue (LSTMoutput[2].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].dc = PastValue (LSTMoutput[2].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[2].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].it._.PlusArgs[1] = DiagTimes (LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[2].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[2].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dh = PastValue (LSTMoutput[3].output) : [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].dc = PastValue (LSTMoutput[3].ct) : [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].ft._.PlusArgs[1] = DiagTimes (LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].ft._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] = ElementTimes (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] = Times (LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0], LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1].matrix = ElementTimes (LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor, LSTMoutput[3].dc) : [1 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].it._.PlusArgs[1] = DiagTimes (LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector, LSTMoutput[3].it._.PlusArgs[1].matrix) : [1024 x 1], [1024 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] = ElementTimes (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor, LSTMoutput[3].dh) : [1 x 1], [256 x 1 x *] -> [256 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] = Times (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1]) : [1024 x 256], [256 x 1 x *] -> [1024 x 1 x *]
Validating --> LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] = Plus (LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0], LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1]) : [1024 x 1 x *], [1024] -> [1024 x 1 x *]

Validating network. 45 nodes to process in pass 3.


Validating network, final pass.



130 out of 277 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 13:54:29: Created model with 277 nodes on GPU 0.

08/04/2016 13:54:29: Training criterion node(s):
08/04/2016 13:54:29: 	cr = CrossEntropyWithSoftmax

08/04/2016 13:54:29: Evaluation criterion node(s):

08/04/2016 13:54:29: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [feashift Gradient[33 x 1 x *]] [featNorm Gradient[33 x 1 x *]] [featNorm.invStdDevVector Gradient[33 x 1]] [featNorm.meanVector Gradient[33 x 1]] [features Gradient[1 x 363 x *]] [labels Gradient[132 x *]] [logPrior Gradient[132]] [logPrior._ Gradient[132]] [realFeatures Gradient[363 x 1 x *]] }
0x7ff6ca90ff48: {[realFeatures Value[363 x 1 x *]] }
0x7ff6ca9106b8: {[featNorm Value[33 x 1 x *]] }
0x7ff6ca910cf8: {[feashift Value[33 x 1 x *]] }
0x7ff6ca911328: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca913548: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca913ec8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca914028: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca914188: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x7ff6ca9142e8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca914448: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca9145a8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x7ff6ca914708: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[33 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca914868: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca9149c8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca914cc8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] }
0x7ff6ca9162d8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca916438: {[LSTMoutput[1].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca916598: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca9166f8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca916858: {[LSTMoutput[1].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca9169b8: {[LSTMoutput[1].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca916b18: {[LSTMoutput[1].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca916c78: {[LSTMoutput[1].ft._ Value[1024 x 1 x *]] }
0x7ff6ca916dd8: {[LSTMoutput[1].ft Value[1024 x 1 x *]] }
0x7ff6ca916f38: {[LSTMoutput[1].bft Value[1024 x 1 x *]] }
0x7ff6ca917098: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca9171f8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca917358: {[LSTMoutput[1].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca9174b8: {[LSTMoutput[1].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca917618: {[LSTMoutput[1].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca917778: {[LSTMoutput[1].it._ Value[1024 x 1 x *]] }
0x7ff6ca9178d8: {[LSTMoutput[1].it Value[1024 x 1 x *]] }
0x7ff6ca917a38: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca919bc8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca919d28: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca919e88: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7ff6ca919fe8: {[LSTMoutput[1].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91a148: {[LSTMoutput[1].bit Value[1024 x 1 x *]] }
0x7ff6ca91a2a8: {[LSTMoutput[1].ct Value[1024 x 1 x *]] }
0x7ff6ca91a408: {[LSTMoutput[1].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca91a568: {[LSTMoutput[1].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91a6c8: {[LSTMoutput[1].ot._ Value[1024 x 1 x *]] }
0x7ff6ca91a828: {[LSTMoutput[1].ot Value[1024 x 1 x *]] }
0x7ff6ca91a988: {[LSTMoutput[1].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91aae8: {[LSTMoutput[1].mt Value[1024 x 1 x *]] }
0x7ff6ca91aca8: {[LSTMoutput[1].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91ae68: {[LSTMoutput[1].output Value[256 x 1 x *]] }
0x7ff6ca91b028: {[LSTMoutput[1].Wmr Gradient[256 x 1024]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca91b1e8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca91b3a8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca91b568: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca91b728: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca91b8e8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca91baa8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca91bc68: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca91be28: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca91bfe8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca91c1a8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca91c368: {[LSTMoutput[1].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca91c528: {[LSTMoutput[1].ot._ Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91c6e8: {[LSTMoutput[1].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca91c8a8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca91ca68: {[LSTMoutput[1].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91cc28: {[LSTMoutput[1].bft Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca91cde8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca91cfa8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91d168: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ft._ Value[1024 x 1 x *]] }
0x7ff6ca91d328: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].dh Gradient[256 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].ft Value[1024 x 1 x *]] }
0x7ff6ca91d4e8: {[LSTMoutput[1].it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Value[1024 x 1 x *]] }
0x7ff6ca91d6a8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca91d868: {[LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91da28: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca91dbe8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca91dda8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91df68: {[LSTMoutput[1].ft._ Gradient[1024 x 1 x *]] [LSTMoutput[2].it._ Value[1024 x 1 x *]] }
0x7ff6ca91e128: {[LSTMoutput[1].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it Value[1024 x 1 x *]] }
0x7ff6ca91e2e8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca91e4a8: {[LSTMoutput[1].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca91e668: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91e828: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7ff6ca91e9e8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91eba8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit Value[1024 x 1 x *]] }
0x7ff6ca91ed68: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ct Value[1024 x 1 x *]] }
0x7ff6ca91ef28: {[LSTMoutput[2].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca91f0e8: {[LSTMoutput[2].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91f2a8: {[LSTMoutput[2].ot._ Value[1024 x 1 x *]] }
0x7ff6ca91f468: {[LSTMoutput[2].ot Value[1024 x 1 x *]] }
0x7ff6ca91f628: {[LSTMoutput[2].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91f7e8: {[LSTMoutput[2].mt Value[1024 x 1 x *]] }
0x7ff6ca91f9a8: {[LSTMoutput[2].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca91fb68: {[LSTMoutput[2].output Value[256 x 1 x *]] }
0x7ff6ca91fd28: {[LSTMoutput[2].Wmr Gradient[256 x 1024]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca91fee8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca9200a8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca920268: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca920428: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca9205e8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca9207a8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca920968: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca920b28: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca920ce8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca920ea8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Value[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ Gradient[1 x 1]] }
0x7ff6ca921068: {[LSTMoutput[2].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca921228: {[LSTMoutput[2].ot._ Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca9213e8: {[LSTMoutput[2].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca9215a8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca921768: {[LSTMoutput[2].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca921928: {[LSTMoutput[1].it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bft Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca921ae8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca921ca8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca921e68: {[LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ft._ Value[1024 x 1 x *]] }
0x7ff6ca922028: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].dh Gradient[256 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].ft Value[1024 x 1 x *]] }
0x7ff6ca9221e8: {[LSTMoutput[1].dc Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Value[1024 x 1 x *]] }
0x7ff6ca9223a8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca922568: {[LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca922728: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca9228e8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca922aa8: {[LSTMoutput[1].ot Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca922c68: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 33]] [LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft._ Gradient[1024 x 1 x *]] [LSTMoutput[3].it._ Value[1024 x 1 x *]] }
0x7ff6ca922e28: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Value[1024 x 1 x *]] }
0x7ff6ca922fe8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] }
0x7ff6ca9231a8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Value[1024 x 1 x *]] }
0x7ff6ca923368: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca923528: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Value[1024 x 1 x *]] }
0x7ff6ca9236e8: {[LSTMoutput[1].mt Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca9238a8: {[LSTMoutput[1].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit Value[1024 x 1 x *]] }
0x7ff6ca923a68: {[LSTMoutput[1].ct Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ct Value[1024 x 1 x *]] }
0x7ff6ca923c28: {[LSTMoutput[3].ot._.PlusArgs[1].matrix Value[1024 x 1 x *]] }
0x7ff6ca923de8: {[LSTMoutput[3].ot._.PlusArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca923fa8: {[LSTMoutput[3].ot._ Value[1024 x 1 x *]] }
0x7ff6ca924168: {[LSTMoutput[3].ot Value[1024 x 1 x *]] }
0x7ff6ca924328: {[LSTMoutput[3].mt.ElementTimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca9244e8: {[LSTMoutput[3].mt Value[1024 x 1 x *]] }
0x7ff6ca9246a8: {[LSTMoutput[3].output.TimesArgs[1] Value[1024 x 1 x *]] }
0x7ff6ca924868: {[LSTMoutput[3].output Value[256 x 1 x *]] }
0x7ff6ca924a28: {[LSTMoutputW.PlusArgs[0].TimesArgs[1] Value[256 x 1 x *]] [LSTMoutput[3].Wmr Gradient[256 x 1024]] }
0x7ff6ca924be8: {[LSTMoutputW.PlusArgs[0] Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca924da8: {[LSTMoutputW Value[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[0] Gradient[132 x 256]] }
0x7ff6ca925828: {[cr Gradient[1]] }
0x7ff6ca9259e8: {[LSTMoutputW Gradient[132 x 1 x *]] [LSTMoutputW.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].output.TimesArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca925ba8: {[LSTMoutputW.PlusArgs[0] Gradient[132 x 1 x *]] [LSTMoutput[3].output Gradient[256 x 1 x *]] }
0x7ff6ca925d68: {[B Gradient[132]] }
0x7ff6ca925f28: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca9260e8: {[LSTMoutput[3].mt Gradient[1024 x 1 x *]] }
0x7ff6ca9262a8: {[LSTMoutput[3].ot Gradient[1024 x 1 x *]] }
0x7ff6ca926468: {[LSTMoutput[3].mt.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca926628: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ct Gradient[1024 x 1 x *]] }
0x7ff6ca9267e8: {[LSTMoutput[3].ot._ Gradient[1024 x 1 x *]] }
0x7ff6ca9269a8: {[LSTMoutput[3].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7ff6ca926b68: {[LSTMoutput[3].ot._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca9270a8: {[LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x7ff6ca927268: {[LSTMoutput[3].ot._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x7ff6ca927428: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca9275e8: {[LSTMoutput[1].ft Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bft Gradient[1024 x 1 x *]] }
0x7ff6ca9277a8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit Gradient[1024 x 1 x *]] }
0x7ff6ca927968: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it Gradient[1024 x 1 x *]] }
0x7ff6ca927b28: {[LSTMoutput[1].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca927ce8: {[LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z Gradient[1024 x 1 x *]] }
0x7ff6ca927ea8: {[LSTMoutput[2].output Gradient[256 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7ff6ca928068: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca928228: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7ff6ca9283e8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Gradient[1024]] }
0x7ff6ca9285a8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca928768: {[LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7ff6ca928928: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca928ae8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].dh Gradient[256 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x7ff6ca928ca8: {[LSTMoutput[1].bit Gradient[1024 x 1 x *]] [LSTMoutput[2].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._ Gradient[1024 x 1 x *]] }
0x7ff6ca928e68: {[LSTMoutput[1].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7ff6ca929028: {[LSTMoutput[1].it._ Gradient[1024 x 1 x *]] [LSTMoutput[2].ft Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca9291e8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7ff6ca9293a8: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca929568: {[LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x7ff6ca929728: {[LSTMoutput[1].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x7ff6ca9298e8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca929aa8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[33 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Gradient[1024 x 1 x *]] }
0x7ff6ca929c68: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7ff6ca929e28: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca929fe8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca92a1a8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7ff6ca92a368: {[LSTMoutput[2].ot Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca92a528: {[LSTMoutput[1].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[2].it._ Gradient[1024 x 1 x *]] [LSTMoutput[3].ft Gradient[1024 x 1 x *]] }
0x7ff6ca92a6e8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft._ Gradient[1024 x 1 x *]] }
0x7ff6ca92a8a8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[2].bit Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7ff6ca92aa68: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Gradient[1024 x 256]] [LSTMoutput[3].ft._.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca92ac28: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0] Gradient[1024 x 1 x *]] }
0x7ff6ca92ade8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca92afa8: {[LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] }
0x7ff6ca92b168: {[LSTMoutput[1].output Gradient[256 x 1 x *]] [LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[1].matrix Gradient[1024 x 1 x *]] }
0x7ff6ca92b328: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca92b4e8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Gradient[1024]] }
0x7ff6ca92b6a8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca92b868: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca92ba28: {[LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Gradient[1024 x 1]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7ff6ca92bbe8: {[LSTMoutput[2].mt Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6ca92bda8: {[LSTMoutput[2].output.TimesArgs[1] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7ff6ca92bf68: {[LSTMoutput[2].ot._.PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1] Gradient[1024 x 1 x *]] }
0x7ff6ca92c128: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Gradient[1024 x 256]] }
0x7ff6ca92c2e8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[2].ct Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1] Gradient[256 x 1 x *]] }
0x7ff6ca92c4a8: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0] Gradient[1024 x 1 x *]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Gradient[1 x 1]] }
0x7ff6cad658f8: {[labels Value[132 x *]] }
0x7ff6cad684d8: {[LSTMoutputW.PlusArgs[0].TimesArgs[0] Value[132 x 256]] }
0x7ff6cad6b698: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad6b7d8: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad6e658: {[LSTMoutput[3].Wmr Value[256 x 1024]] }
0x7ff6cad6f798: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6cad70e28: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad71478: {[logPrior._ Value[132]] }
0x7ff6cad72bb8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cad73198: {[LSTMoutput[3].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6cad73d48: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cad756b8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad78158: {[LSTMoutput[2].Wmr Value[256 x 1024]] }
0x7ff6cad79978: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cad7a6f8: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad7ba68: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7ff6cad7cb38: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[3].dh Value[256 x 1 x *]] }
0x7ff6cad7e458: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cad7ef58: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad7f868: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad81bb8: {[LSTMoutput[1].Wmr Value[256 x 1024]] }
0x7ff6cad82e78: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6cad83f78: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad859d8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7ff6cad85d28: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[1].dh Value[256 x 1 x *]] }
0x7ff6cad882d8: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad88c68: {[featNorm.meanVector Value[33 x 1]] }
0x7ff6cad8c2d8: {[features Value[1 x 363 x *]] }
0x7ff6cad8e378: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad8e4e8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Gradient[1 x 1]] [LSTMoutput[2].dh Value[256 x 1 x *]] }
0x7ff6cad8f2c8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6cad8f728: {[LSTMoutput[2].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6cad903b8: {[LSTMoutput[1].ot._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6cad91a38: {[LSTMoutput[1].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6cad92948: {[LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad92f68: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7ff6cad95088: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad96358: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cad963f8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cad9a168: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad9b268: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6cad9bc98: {[LSTMoutput[1].dc Value[1024 x 1 x *]] }
0x7ff6cad9c448: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7ff6cad9d208: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cad9d368: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cad9f9b8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cad9fcc8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cada02a8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6cada2078: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 33]] }
0x7ff6cada3128: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cada31c8: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7ff6cada3dc8: {[LSTMoutput[1].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6cada5f38: {[LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cada7098: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cada7d38: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadadcc8: {[LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadaf158: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6cadaf8f8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadb25e8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadb32c8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadb4818: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6cadb4e78: {[LSTMoutput[2].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6cadb5768: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadb70d8: {[LSTMoutput[1].it Gradient[1024 x 1 x *]] [LSTMoutput[2].dc Value[1024 x 1 x *]] }
0x7ff6cadb8508: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadb9418: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadbb338: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadbba88: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadbe998: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadbf888: {[LSTMoutput[2].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6cadc1718: {[LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadc1908: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadc3ce8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadc3e18: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadc65c8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadca478: {[LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadca5c8: {[Err Value[1]] }
0x7ff6cadcb218: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6cadcbc08: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadcd188: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadce7c8: {[LSTMoutput[2].it Gradient[1024 x 1 x *]] [LSTMoutput[3].dc Value[1024 x 1 x *]] }
0x7ff6cadcef08: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadd1a58: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadd2428: {[LSTMoutput[3].ft._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6cadd3438: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadd4408: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadd6f58: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadd7028: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[0] Value[1024 x 256]] }
0x7ff6cadd7698: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadd7c98: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[1] Value[1024]] }
0x7ff6caddaef8: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6caddb978: {[LSTMoutput[3].it._.PlusArgs[1].diagonalMatrixAsColumnVector Value[1024 x 1]] }
0x7ff6caddbb78: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[0] Value[1024 x 256]] }
0x7ff6caddd578: {[LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor._ Value[1 x 1]] }
0x7ff6caddfd88: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cade0798: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[1] Value[1024]] }
0x7ff6cade2368: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor._ Value[1 x 1]] }
0x7ff6cadef8e8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0x7ff6cadef9e8: {[cr Value[1]] }
0x7ff6cadf63c8: {[LSTMoutputW.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf6588: {[LSTMoutput[3].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf6748: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf6988: {[LSTMoutput[2].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf6bc8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf6e08: {[LSTMoutput[1].output.TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf8848: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf8d38: {[LSTMoutput[1].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf8f78: {[LSTMoutput[1].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf91b8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf94f8: {[LSTMoutput[1].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf9738: {[LSTMoutput[1].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf9978: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf9cb8: {[LSTMoutput[1].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadf9ef8: {[LSTMoutput[1].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfa138: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfa438: {[LSTMoutput[1].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfb1f8: {[LSTMoutput[2].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfb438: {[LSTMoutput[2].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfb678: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfb9b8: {[LSTMoutput[2].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfbbf8: {[LSTMoutput[2].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfbe38: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfc178: {[LSTMoutput[2].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfc3b8: {[LSTMoutput[2].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfc5f8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfc8f8: {[LSTMoutput[2].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfd6f8: {[LSTMoutput[3].ot._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfd938: {[LSTMoutput[3].ot._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfdb78: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfdeb8: {[LSTMoutput[3].ft._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfe0f8: {[LSTMoutput[3].ft._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfe338: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[0].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfe678: {[LSTMoutput[3].it._.PlusArgs[0].PlusArgs[1].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfe8b8: {[LSTMoutput[3].it._.PlusArgs[1].matrix.scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfeaf8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadfedf8: {[LSTMoutput[3].bit.ElementTimesArgs[1].z.PlusArgs[1].PlusArgs[0].TimesArgs[1].scalarScalingFactor Value[1 x 1]] }
0x7ff6cadffc78: {[logPrior Value[132]] }
0x7ff6cf67fa38: {[featNorm.invStdDevVector Value[33 x 1]] }
0x7ff6cf80b5f8: {[B Value[132]] }


08/04/2016 13:54:29: Precomputing --> 3 PreCompute nodes found.

08/04/2016 13:54:29: 	featNorm.meanVector = Mean()
08/04/2016 13:54:29: 	featNorm.invStdDevVector = InvStdDev()
08/04/2016 13:54:29: 	logPrior._ = Mean()
lazyrandomization: re-randomizing for sweep 0 in utterance mode
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0) with 1 datapasses
feature set 0: requirerandomizedchunk: paging in randomized chunk 1 (frame range [90234..180391]), 1 resident in RAM
requiredata: determined feature kind as 33-dimensional
requiredata: 341 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 0 (frame range [0..90233]), 2 resident in RAM
requiredata: 328 utterances read
feature set 0: requirerandomizedchunk: paging in randomized chunk 2 (frame range [180392..252733]), 3 resident in RAM
requiredata: 279 utterances read

08/04/2016 13:54:30: Precomputing --> Completed.


08/04/2016 13:54:30: Starting Epoch 1: learning rate per sample = 0.000781  effective momentum = 0.000000  momentum as time constant = 0.0 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0) with 1 datapasses

08/04/2016 13:54:30: Starting minibatch loop.
08/04/2016 13:54:31:  Epoch[ 1 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.80280762 * 6400; Err = 0.89984375 * 6400; time = 0.8363s; samplesPerSecond = 7652.9
08/04/2016 13:54:32:  Epoch[ 1 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.60525146 * 6400; Err = 0.86890625 * 6400; time = 0.8138s; samplesPerSecond = 7864.3
08/04/2016 13:54:33:  Epoch[ 1 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.63169894 * 5332; Err = 0.86121530 * 5332; time = 0.8729s; samplesPerSecond = 6108.1
08/04/2016 13:54:34:  Epoch[ 1 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.55729026 * 1846; Err = 0.94637053 * 1846; time = 0.8597s; samplesPerSecond = 2147.3
08/04/2016 13:54:34:  Epoch[ 1 of 4]-Minibatch[  41-  50, 4.88%]: cr = 4.55495690 * 464; Err = 0.95258621 * 464; time = 0.8298s; samplesPerSecond = 559.2
08/04/2016 13:54:35: Finished Epoch[ 1 of 4]: [Training] cr = 4.66789393 * 20570; Err = 0.88556150 * 20570; totalSamplesSeen = 20570; learningRatePerSample = 0.00078125001; epochTime=4.55796s
08/04/2016 13:54:35: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.1'

08/04/2016 13:54:35: Starting Epoch 2: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20570) with 1 datapasses

08/04/2016 13:54:35: Starting minibatch loop.
08/04/2016 13:54:36:  Epoch[ 2 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.36622009 * 6400; Err = 0.82578125 * 6400; time = 0.7986s; samplesPerSecond = 8014.0
08/04/2016 13:54:37:  Epoch[ 2 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.38836670 * 6400; Err = 0.88203125 * 6400; time = 0.8032s; samplesPerSecond = 7968.5
08/04/2016 13:54:38:  Epoch[ 2 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.41521295 * 5470; Err = 0.90822669 * 5470; time = 0.8721s; samplesPerSecond = 6272.0
08/04/2016 13:54:39:  Epoch[ 2 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.37051434 * 2036; Err = 0.90717092 * 2036; time = 0.8614s; samplesPerSecond = 2363.6
08/04/2016 13:54:39: Finished Epoch[ 2 of 4]: [Training] cr = 4.38763434 * 20470; Err = 0.87454812 * 20470; totalSamplesSeen = 41040; learningRatePerSample = 0.00078125001; epochTime=4.09653s
08/04/2016 13:54:40: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.2'

08/04/2016 13:54:40: Starting Epoch 3: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 41040) with 1 datapasses

08/04/2016 13:54:40: Starting minibatch loop.
08/04/2016 13:54:41:  Epoch[ 3 of 4]-Minibatch[   1-  10, 0.98%]: cr = 4.19500702 * 6400; Err = 0.85171875 * 6400; time = 0.7977s; samplesPerSecond = 8023.0
08/04/2016 13:54:41:  Epoch[ 3 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.09230499 * 6400; Err = 0.85000000 * 6400; time = 0.8085s; samplesPerSecond = 7915.5
08/04/2016 13:54:42:  Epoch[ 3 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.22900804 * 5910; Err = 0.88443316 * 5910; time = 0.8769s; samplesPerSecond = 6740.0
08/04/2016 13:54:43:  Epoch[ 3 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.21967493 * 1740; Err = 0.90344828 * 1740; time = 0.8565s; samplesPerSecond = 2031.6
08/04/2016 13:54:44: Finished Epoch[ 3 of 4]: [Training] cr = 4.17638148 * 20578; Err = 0.86548741 * 20578; totalSamplesSeen = 61618; learningRatePerSample = 0.00078125001; epochTime=3.85415s
08/04/2016 13:54:44: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn.3'

08/04/2016 13:54:44: Starting Epoch 4: learning rate per sample = 0.000781  effective momentum = 0.900000  momentum as time constant = 6074.4 samples
minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61618) with 1 datapasses

08/04/2016 13:54:44: Starting minibatch loop.
08/04/2016 13:54:45:  Epoch[ 4 of 4]-Minibatch[   1-  10, 0.98%]: cr = 3.99454559 * 6400; Err = 0.83812500 * 6400; time = 0.7973s; samplesPerSecond = 8027.0
08/04/2016 13:54:46:  Epoch[ 4 of 4]-Minibatch[  11-  20, 1.95%]: cr = 4.12654449 * 6400; Err = 0.87031250 * 6400; time = 0.8086s; samplesPerSecond = 7915.1
08/04/2016 13:54:47:  Epoch[ 4 of 4]-Minibatch[  21-  30, 2.93%]: cr = 4.30654117 * 5420; Err = 0.90258303 * 5420; time = 0.8929s; samplesPerSecond = 6069.9
08/04/2016 13:54:48:  Epoch[ 4 of 4]-Minibatch[  31-  40, 3.91%]: cr = 4.22490448 * 1734; Err = 0.89158016 * 1734; time = 0.8563s; samplesPerSecond = 2024.9
08/04/2016 13:54:48:  Epoch[ 4 of 4]-Minibatch[  41-  50, 4.88%]: cr = 3.84306066 * 612; Err = 0.79575163 * 612; time = 0.8345s; samplesPerSecond = 733.4
08/04/2016 13:54:49: Finished Epoch[ 4 of 4]: [Training] cr = 4.13165314 * 20600; Err = 0.86854369 * 20600; totalSamplesSeen = 82218; learningRatePerSample = 0.00078125001; epochTime=4.37124s
08/04/2016 13:54:49: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134659.552312/Speech/LSTM_Truncated-Kaldi@release_gpu/models/cntkSpeech.dnn'
08/04/2016 13:54:49: CNTKCommandTrainEnd: speechTrain

08/04/2016 13:54:49: Action "train" complete.

08/04/2016 13:54:49: __COMPLETED__