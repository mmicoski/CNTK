CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running mpiexec -n 3 /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/.. OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu DeviceId=-1 timestamping=true numCPUThreads=8 precision=double speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] speechTrain=[SGD=[maxEpochs=4]] speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]] stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
MPIWrapper: initializing MPI
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
MPIWrapper: initializing MPI
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (2) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (before change)]: all 3 nodes responded
requestnodes [MPIWrapper]: using 3 out of 3 MPI nodes (3 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 1 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 2 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [requestnodes (after change)]: all 3 nodes responded
mpihelper: we are cog 0 in a gearbox of 3
ping [mpihelper]: 3 nodes pinging each other
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
ping [mpihelper]: all 3 nodes responded
08/04/2016 14:00:30: Redirecting stderr to file /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr_speechTrain.logrank0
08/04/2016 14:00:31: Redirecting stderr to file /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr_speechTrain.logrank1
08/04/2016 14:00:31: Redirecting stderr to file /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr_speechTrain.logrank2
MPI Rank 0: 08/04/2016 14:00:30: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 14:00:30: Build info: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:30: 		Built time: Aug  4 2016 13:07:13
MPI Rank 0: 08/04/2016 14:00:30: 		Last modified date: Thu Aug  4 10:38:25 2016
MPI Rank 0: 08/04/2016 14:00:30: 		Build type: release
MPI Rank 0: 08/04/2016 14:00:30: 		Build target: GPU
MPI Rank 0: 08/04/2016 14:00:30: 		With 1bit-SGD: yes
MPI Rank 0: 08/04/2016 14:00:30: 		Math lib: mkl
MPI Rank 0: 08/04/2016 14:00:30: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 0: 08/04/2016 14:00:30: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 0: 08/04/2016 14:00:30: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 0: 08/04/2016 14:00:30: 		Build Branch: HEAD
MPI Rank 0: 08/04/2016 14:00:30: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 0: 08/04/2016 14:00:30: 		Built by philly on ee6c20c358b8
MPI Rank 0: 08/04/2016 14:00:30: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 0: 08/04/2016 14:00:30: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 14:00:31: -------------------------------------------------------------------
MPI Rank 0: 08/04/2016 14:00:31: GPU info:
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 14:00:31: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 14:00:31: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 0: 08/04/2016 14:00:31: -------------------------------------------------------------------
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: Running on localhost at 2016/08/04 14:00:31
MPI Rank 0: 08/04/2016 14:00:31: Command line: 
MPI Rank 0: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..  OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=8  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 14:00:31: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = $DeviceId$
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = $DeviceId$
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=8
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: 08/04/2016 14:00:31: precision = "float"
MPI Rank 0: command = speechTrain
MPI Rank 0: deviceId = -1
MPI Rank 0: parallelTrain = true
MPI Rank 0: speechTrain = [
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ]
MPI Rank 0: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 0: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 0: DeviceId=-1
MPI Rank 0: timestamping=true
MPI Rank 0: numCPUThreads=8
MPI Rank 0: precision=double
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 0: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 0: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 0: configparameters: cntk.cntk:command=speechTrain
MPI Rank 0: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 0: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 0: configparameters: cntk.cntk:deviceId=-1
MPI Rank 0: configparameters: cntk.cntk:numCPUThreads=8
MPI Rank 0: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 0: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 0: configparameters: cntk.cntk:precision=double
MPI Rank 0: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 0: configparameters: cntk.cntk:speechTrain=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn"
MPI Rank 0:     deviceId = -1
MPI Rank 0:     traceLevel = 1
MPI Rank 0:     SimpleNetworkBuilder = [
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 0:         evalCriterion = "ErrorPrediction"
MPI Rank 0:         layerTypes = "Sigmoid"
MPI Rank 0:         initValueScale = 1.0
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         uniformInit = true
MPI Rank 0:         needPrior = true
MPI Rank 0:     ]
MPI Rank 0:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 0:         layerSizes = 363:512:512:132
MPI Rank 0:         trainingCriterion = 'CE'
MPI Rank 0:         evalCriterion = 'Err'
MPI Rank 0:         applyMeanVarNorm = true
MPI Rank 0:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 0:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 0:         featNorm = if applyMeanVarNorm
MPI Rank 0:                    then MeanVarNorm(features)
MPI Rank 0:                    else features
MPI Rank 0:         layers[layer:1..L-1] = if layer > 1
MPI Rank 0:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 0:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 0:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 0:         CE = if trainingCriterion == 'CE'
MPI Rank 0:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 0:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 0:         Err = if evalCriterion == 'Err' then
MPI Rank 0:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 0:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 0:         logPrior = LogPrior(labels)
MPI Rank 0:         // TODO: how to add a tag to an infix operation?
MPI Rank 0:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 20480
MPI Rank 0:         minibatchSize = 64:256:1024
MPI Rank 0:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         momentumPerMB = 0.9:0.656119
MPI Rank 0:         dropoutRate = 0.0
MPI Rank 0:         maxEpochs = 3
MPI Rank 0:         keepCheckPointFiles = true
MPI Rank 0:         clippingThresholdPerSample = 1#INF
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = "DataParallelSGD"
MPI Rank 0:             distributedMBReading = true
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 32
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:         AutoAdjust = [
MPI Rank 0:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 0:             loadBestModel = true
MPI Rank 0:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 0:             learnRateDecreaseFactor = 0.5
MPI Rank 0:             learnRateIncreaseFactor = 1.382
MPI Rank 0:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "HTKMLFReader"
MPI Rank 0:         readMethod = "blockRandomize"
MPI Rank 0:         miniBatchMode = "partial"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         verbosity = 0
MPI Rank 0:         features = [
MPI Rank 0:             dim = 363
MPI Rank 0:             type = "real"
MPI Rank 0:             scpFile = "glob_0000.scp"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 0:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 0:             labelDim = 132
MPI Rank 0:             labelType = "category"
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 0: 
MPI Rank 0: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 0: configparameters: cntk.cntk:timestamping=true
MPI Rank 0: 08/04/2016 14:00:31: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 0: 08/04/2016 14:00:31: Commands: speechTrain
MPI Rank 0: 08/04/2016 14:00:31: Precision = "double"
MPI Rank 0: 08/04/2016 14:00:31: Using 8 CPU threads.
MPI Rank 0: 08/04/2016 14:00:31: CNTKModelPath: /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn
MPI Rank 0: 08/04/2016 14:00:31: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 0: 08/04/2016 14:00:31: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: ##############################################################################
MPI Rank 0: 08/04/2016 14:00:31: #                                                                            #
MPI Rank 0: 08/04/2016 14:00:31: # Action "train"                                                             #
MPI Rank 0: 08/04/2016 14:00:31: #                                                                            #
MPI Rank 0: 08/04/2016 14:00:31: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: CNTKCommandTrainBegin: speechTrain
MPI Rank 0: SimpleNetworkBuilder Using CPU
MPI Rank 0: reading script file glob_0000.scp ... 948 entries
MPI Rank 0: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 0: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 0: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 0: label set 0: 129 classes
MPI Rank 0: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: Creating virgin network.
MPI Rank 0: 
MPI Rank 0: Post-processing network...
MPI Rank 0: 
MPI Rank 0: 7 roots:
MPI Rank 0: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 0: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 0: 	InvStdOfFeatures = InvStdDev()
MPI Rank 0: 	MeanOfFeatures = Mean()
MPI Rank 0: 	PosteriorProb = Softmax()
MPI Rank 0: 	Prior = Mean()
MPI Rank 0: 	ScaledLogLikelihood = Minus()
MPI Rank 0: 
MPI Rank 0: Validating network. 25 nodes to process in pass 1.
MPI Rank 0: 
MPI Rank 0: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 0: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 0: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 0: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 0: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 0: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 0: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 0: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 0: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 0: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 0: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 0: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 0: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 0: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 0: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 0: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 0: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 0: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 0: 
MPI Rank 0: Validating network. 17 nodes to process in pass 2.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Validating network, final pass.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 0: 
MPI Rank 0: Post-processing network complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: Created model with 25 nodes on CPU.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: Training criterion node(s):
MPI Rank 0: 08/04/2016 14:00:31: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: Evaluation criterion node(s):
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing Structure:
MPI Rank 0: 
MPI Rank 0: (nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 0: 0x2157d68: {[MeanOfFeatures Value[363]] }
MPI Rank 0: 0x2158608: {[InvStdOfFeatures Value[363]] }
MPI Rank 0: 0x21bf7f8: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 0: 0x21bf9b8: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 0: 0x21bfb78: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 0: 0x21bfd38: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 0: 0x21ebbf8: {[B2 Value[132 x 1]] }
MPI Rank 0: 0x2202e68: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 0: 0x22039f8: {[features Value[363 x *]] }
MPI Rank 0: 0x220f488: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 0: 0x2212d68: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 0: 0x2213518: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 0: 0x2213678: {[B2 Gradient[132 x 1]] }
MPI Rank 0: 0x2215d68: {[labels Value[132 x *]] }
MPI Rank 0: 0x22185d8: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 0: 0x2218798: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 0: 0x221bf48: {[W0 Value[512 x 363]] }
MPI Rank 0: 0x221de78: {[B1 Value[512 x 1]] }
MPI Rank 0: 0x221df18: {[W2 Value[132 x 512]] }
MPI Rank 0: 0x2269d28: {[EvalErrorPrediction Value[1]] }
MPI Rank 0: 0x2269e88: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 0: 0x226a048: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 0: 0x2270b18: {[Prior Value[132]] }
MPI Rank 0: 0x2299308: {[W1 Value[512 x 512]] }
MPI Rank 0: 0x24c7298: {[W0*features Value[512 x *]] }
MPI Rank 0: 0x24c7398: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 0: 0x24c7448: {[LogOfPrior Value[132]] }
MPI Rank 0: 0x24c7a58: {[B0 Value[512 x 1]] }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: Precomputing --> 3 PreCompute nodes found.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:31: 	MeanOfFeatures = Mean()
MPI Rank 0: 08/04/2016 14:00:31: 	InvStdOfFeatures = InvStdDev()
MPI Rank 0: 08/04/2016 14:00:31: 	Prior = Mean()
MPI Rank 0: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:33: Precomputing --> Completed.
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:34: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 0: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:34: Starting minibatch loop.
MPI Rank 0: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.60029247 * 640; EvalErrorPrediction = 0.92968750 * 640; time = 0.3014s; samplesPerSecond = 2123.6
MPI Rank 0: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.31459154 * 640; EvalErrorPrediction = 0.90156250 * 640; time = 0.3310s; samplesPerSecond = 1933.4
MPI Rank 0: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.02745253 * 640; EvalErrorPrediction = 0.87812500 * 640; time = 0.1486s; samplesPerSecond = 4307.5
MPI Rank 0: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.92723120 * 640; EvalErrorPrediction = 0.87031250 * 640; time = 0.1897s; samplesPerSecond = 3374.2
MPI Rank 0: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.75439942 * 640; EvalErrorPrediction = 0.84531250 * 640; time = 0.1304s; samplesPerSecond = 4909.2
MPI Rank 0: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78594059 * 640; EvalErrorPrediction = 0.87343750 * 640; time = 0.1107s; samplesPerSecond = 5778.9
MPI Rank 0: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.58735083 * 640; EvalErrorPrediction = 0.85156250 * 640; time = 0.1625s; samplesPerSecond = 3937.5
MPI Rank 0: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.43859968 * 640; EvalErrorPrediction = 0.79531250 * 640; time = 0.2956s; samplesPerSecond = 2164.8
MPI Rank 0: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.49304580 * 640; EvalErrorPrediction = 0.81875000 * 640; time = 0.2107s; samplesPerSecond = 3038.2
MPI Rank 0: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.41658528 * 640; EvalErrorPrediction = 0.80781250 * 640; time = 0.1255s; samplesPerSecond = 5097.9
MPI Rank 0: 08/04/2016 14:00:37:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.45817150 * 640; EvalErrorPrediction = 0.82812500 * 640; time = 0.0984s; samplesPerSecond = 6505.7
MPI Rank 0: 08/04/2016 14:00:37:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.16026166 * 640; EvalErrorPrediction = 0.78281250 * 640; time = 0.1760s; samplesPerSecond = 3636.3
MPI Rank 0: 08/04/2016 14:00:37:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.19834287 * 640; EvalErrorPrediction = 0.75312500 * 640; time = 0.2235s; samplesPerSecond = 2863.7
MPI Rank 0: 08/04/2016 14:00:37:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.15275588 * 640; EvalErrorPrediction = 0.76093750 * 640; time = 0.2636s; samplesPerSecond = 2427.9
MPI Rank 0: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.11484584 * 640; EvalErrorPrediction = 0.75000000 * 640; time = 0.2792s; samplesPerSecond = 2292.2
MPI Rank 0: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.09188858 * 640; EvalErrorPrediction = 0.75625000 * 640; time = 0.2637s; samplesPerSecond = 2427.0
MPI Rank 0: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 3.04570393 * 640; EvalErrorPrediction = 0.74531250 * 640; time = 0.2323s; samplesPerSecond = 2754.8
MPI Rank 0: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.87599277 * 640; EvalErrorPrediction = 0.71250000 * 640; time = 0.4710s; samplesPerSecond = 1358.9
MPI Rank 0: 08/04/2016 14:00:39:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.87318858 * 640; EvalErrorPrediction = 0.69843750 * 640; time = 0.2870s; samplesPerSecond = 2230.0
MPI Rank 0: 08/04/2016 14:00:39:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.77854945 * 640; EvalErrorPrediction = 0.70312500 * 640; time = 0.2676s; samplesPerSecond = 2391.9
MPI Rank 0: 08/04/2016 14:00:39:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.82479386 * 640; EvalErrorPrediction = 0.69687500 * 640; time = 0.2732s; samplesPerSecond = 2342.9
MPI Rank 0: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.65867164 * 640; EvalErrorPrediction = 0.68437500 * 640; time = 0.2886s; samplesPerSecond = 2218.0
MPI Rank 0: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.58743520 * 640; EvalErrorPrediction = 0.66093750 * 640; time = 0.1168s; samplesPerSecond = 5479.0
MPI Rank 0: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.47343256 * 640; EvalErrorPrediction = 0.65000000 * 640; time = 0.2380s; samplesPerSecond = 2688.6
MPI Rank 0: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.50126173 * 640; EvalErrorPrediction = 0.63437500 * 640; time = 0.1221s; samplesPerSecond = 5243.0
MPI Rank 0: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.44996736 * 640; EvalErrorPrediction = 0.64218750 * 640; time = 0.0961s; samplesPerSecond = 6660.3
MPI Rank 0: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.33506320 * 640; EvalErrorPrediction = 0.64062500 * 640; time = 0.0916s; samplesPerSecond = 6983.5
MPI Rank 0: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.46367523 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.1307s; samplesPerSecond = 4896.6
MPI Rank 0: 08/04/2016 14:00:41:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.43029295 * 640; EvalErrorPrediction = 0.62031250 * 640; time = 0.3677s; samplesPerSecond = 1740.8
MPI Rank 0: 08/04/2016 14:00:41:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.23640847 * 640; EvalErrorPrediction = 0.60156250 * 640; time = 0.1655s; samplesPerSecond = 3866.8
MPI Rank 0: 08/04/2016 14:00:41:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.35774394 * 640; EvalErrorPrediction = 0.61562500 * 640; time = 0.1677s; samplesPerSecond = 3817.0
MPI Rank 0: 08/04/2016 14:00:41:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.21939852 * 640; EvalErrorPrediction = 0.57500000 * 640; time = 0.2163s; samplesPerSecond = 2959.1
MPI Rank 0: 08/04/2016 14:00:41: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.08229172 * 20480; EvalErrorPrediction = 0.74091797 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=6.84818s
MPI Rank 0: 08/04/2016 14:00:41: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn.1'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:41: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 0: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:41: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Actual gradient aggregation time: 0.041789
MPI Rank 0: Async gradient aggregation wait time: 0.176183
MPI Rank 0: Actual gradient aggregation time: 0.034284
MPI Rank 0: 08/04/2016 14:00:42:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.19264392 * 2304; EvalErrorPrediction = 0.59895833 * 2304; time = 0.6332s; samplesPerSecond = 3638.9
MPI Rank 0: Async gradient aggregation wait time: 0.049292
MPI Rank 0: Actual gradient aggregation time: 0.020267
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.021246
MPI Rank 0: 08/04/2016 14:00:43:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.18313848 * 2560; EvalErrorPrediction = 0.59062500 * 2560; time = 0.5409s; samplesPerSecond = 4732.8
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.021491
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.025986
MPI Rank 0: 08/04/2016 14:00:43:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.11400878 * 2560; EvalErrorPrediction = 0.57695312 * 2560; time = 0.7580s; samplesPerSecond = 3377.3
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.026751
MPI Rank 0: Async gradient aggregation wait time: 9e-06
MPI Rank 0: Actual gradient aggregation time: 0.025358
MPI Rank 0: 08/04/2016 14:00:44:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.18346011 * 2560; EvalErrorPrediction = 0.61523438 * 2560; time = 0.4986s; samplesPerSecond = 5134.4
MPI Rank 0: Async gradient aggregation wait time: 7e-06
MPI Rank 0: Actual gradient aggregation time: 0.120086
MPI Rank 0: Async gradient aggregation wait time: 8e-06
MPI Rank 0: Actual gradient aggregation time: 0.02538
MPI Rank 0: 08/04/2016 14:00:45:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.14671794 * 2560; EvalErrorPrediction = 0.58554688 * 2560; time = 0.7187s; samplesPerSecond = 3562.1
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.076858
MPI Rank 0: Async gradient aggregation wait time: 9e-06
MPI Rank 0: Actual gradient aggregation time: 0.021611
MPI Rank 0: 08/04/2016 14:00:45:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.18640397 * 2560; EvalErrorPrediction = 0.57265625 * 2560; time = 0.7472s; samplesPerSecond = 3426.2
MPI Rank 0: Async gradient aggregation wait time: 0.009366
MPI Rank 0: Actual gradient aggregation time: 0.036042
MPI Rank 0: Async gradient aggregation wait time: 0.003237
MPI Rank 0: Actual gradient aggregation time: 0.065808
MPI Rank 0: 08/04/2016 14:00:46:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.05705193 * 2560; EvalErrorPrediction = 0.56093750 * 2560; time = 0.5195s; samplesPerSecond = 4928.1
MPI Rank 0: Async gradient aggregation wait time: 0.035269
MPI Rank 0: Actual gradient aggregation time: 0.055801
MPI Rank 0: Async gradient aggregation wait time: 0.01568
MPI Rank 0: Actual gradient aggregation time: 0.030416
MPI Rank 0: 08/04/2016 14:00:47:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.19832445 * 2560; EvalErrorPrediction = 0.64921875 * 2560; time = 0.7720s; samplesPerSecond = 3316.0
MPI Rank 0: Async gradient aggregation wait time: 0.024128
MPI Rank 0: Actual gradient aggregation time: 0.064446
MPI Rank 0: 08/04/2016 14:00:47: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.15622875 * 20480; EvalErrorPrediction = 0.59311523 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=5.28797s
MPI Rank 0: 08/04/2016 14:00:47: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn.2'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:47: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:47: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.022129
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.087548
MPI Rank 0: 08/04/2016 14:00:48:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.05142121 * 9216; EvalErrorPrediction = 0.57139757 * 9216; time = 1.0635s; samplesPerSecond = 8665.6
MPI Rank 0: Async gradient aggregation wait time: 0.037878
MPI Rank 0: Actual gradient aggregation time: 0.085759
MPI Rank 0: Async gradient aggregation wait time: 1.2e-05
MPI Rank 0: Actual gradient aggregation time: 0.037649
MPI Rank 0: 08/04/2016 14:00:49:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.05189898 * 10240; EvalErrorPrediction = 0.56689453 * 10240; time = 1.2378s; samplesPerSecond = 8272.7
MPI Rank 0: 08/04/2016 14:00:49: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.04832104 * 20480; EvalErrorPrediction = 0.56796875 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=2.42142s
MPI Rank 0: 08/04/2016 14:00:49: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn.3'
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:49: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 0: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 0 of 3, with 1 datapasses
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:49: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 0: Async gradient aggregation wait time: 1.1e-05
MPI Rank 0: Actual gradient aggregation time: 0.055176
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.021965
MPI Rank 0: 08/04/2016 14:00:51:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.97742354 * 9216; EvalErrorPrediction = 0.54123264 * 9216; time = 1.3816s; samplesPerSecond = 6670.5
MPI Rank 0: Async gradient aggregation wait time: 1.1e-05
MPI Rank 0: Actual gradient aggregation time: 0.021266
MPI Rank 0: Async gradient aggregation wait time: 1e-05
MPI Rank 0: Actual gradient aggregation time: 0.021698
MPI Rank 0: 08/04/2016 14:00:52:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.00781103 * 10240; EvalErrorPrediction = 0.54609375 * 10240; time = 1.5263s; samplesPerSecond = 6709.1
MPI Rank 0: Async gradient aggregation wait time: 0.036244
MPI Rank 0: 08/04/2016 14:00:52: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 1.99431012 * 20480; EvalErrorPrediction = 0.54428711 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-05; epochTime=3.00113s
MPI Rank 0: 08/04/2016 14:00:52: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn'
MPI Rank 0: 08/04/2016 14:00:52: CNTKCommandTrainEnd: speechTrain
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:52: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: 08/04/2016 14:00:52: __COMPLETED__
MPI Rank 0: ~MPIWrapper
MPI Rank 1: 08/04/2016 14:00:31: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 14:00:31: Build info: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:31: 		Built time: Aug  4 2016 13:07:13
MPI Rank 1: 08/04/2016 14:00:31: 		Last modified date: Thu Aug  4 10:38:25 2016
MPI Rank 1: 08/04/2016 14:00:31: 		Build type: release
MPI Rank 1: 08/04/2016 14:00:31: 		Build target: GPU
MPI Rank 1: 08/04/2016 14:00:31: 		With 1bit-SGD: yes
MPI Rank 1: 08/04/2016 14:00:31: 		Math lib: mkl
MPI Rank 1: 08/04/2016 14:00:31: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 1: 08/04/2016 14:00:31: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 1: 08/04/2016 14:00:31: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 1: 08/04/2016 14:00:31: 		Build Branch: HEAD
MPI Rank 1: 08/04/2016 14:00:31: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 1: 08/04/2016 14:00:31: 		Built by philly on ee6c20c358b8
MPI Rank 1: 08/04/2016 14:00:31: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 1: 08/04/2016 14:00:31: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 14:00:32: -------------------------------------------------------------------
MPI Rank 1: 08/04/2016 14:00:32: GPU info:
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 14:00:32: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 14:00:32: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 1: 08/04/2016 14:00:32: -------------------------------------------------------------------
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: Running on localhost at 2016/08/04 14:00:32
MPI Rank 1: 08/04/2016 14:00:32: Command line: 
MPI Rank 1: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..  OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=8  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 14:00:32: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = $DeviceId$
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = $DeviceId$
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=8
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: 08/04/2016 14:00:32: precision = "float"
MPI Rank 1: command = speechTrain
MPI Rank 1: deviceId = -1
MPI Rank 1: parallelTrain = true
MPI Rank 1: speechTrain = [
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ]
MPI Rank 1: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 1: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 1: DeviceId=-1
MPI Rank 1: timestamping=true
MPI Rank 1: numCPUThreads=8
MPI Rank 1: precision=double
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 1: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 1: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 1: configparameters: cntk.cntk:command=speechTrain
MPI Rank 1: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 1: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 1: configparameters: cntk.cntk:deviceId=-1
MPI Rank 1: configparameters: cntk.cntk:numCPUThreads=8
MPI Rank 1: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 1: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 1: configparameters: cntk.cntk:precision=double
MPI Rank 1: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 1: configparameters: cntk.cntk:speechTrain=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn"
MPI Rank 1:     deviceId = -1
MPI Rank 1:     traceLevel = 1
MPI Rank 1:     SimpleNetworkBuilder = [
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 1:         evalCriterion = "ErrorPrediction"
MPI Rank 1:         layerTypes = "Sigmoid"
MPI Rank 1:         initValueScale = 1.0
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         uniformInit = true
MPI Rank 1:         needPrior = true
MPI Rank 1:     ]
MPI Rank 1:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 1:         layerSizes = 363:512:512:132
MPI Rank 1:         trainingCriterion = 'CE'
MPI Rank 1:         evalCriterion = 'Err'
MPI Rank 1:         applyMeanVarNorm = true
MPI Rank 1:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 1:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 1:         featNorm = if applyMeanVarNorm
MPI Rank 1:                    then MeanVarNorm(features)
MPI Rank 1:                    else features
MPI Rank 1:         layers[layer:1..L-1] = if layer > 1
MPI Rank 1:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 1:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 1:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 1:         CE = if trainingCriterion == 'CE'
MPI Rank 1:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 1:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 1:         Err = if evalCriterion == 'Err' then
MPI Rank 1:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 1:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 1:         logPrior = LogPrior(labels)
MPI Rank 1:         // TODO: how to add a tag to an infix operation?
MPI Rank 1:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 20480
MPI Rank 1:         minibatchSize = 64:256:1024
MPI Rank 1:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         momentumPerMB = 0.9:0.656119
MPI Rank 1:         dropoutRate = 0.0
MPI Rank 1:         maxEpochs = 3
MPI Rank 1:         keepCheckPointFiles = true
MPI Rank 1:         clippingThresholdPerSample = 1#INF
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = "DataParallelSGD"
MPI Rank 1:             distributedMBReading = true
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 32
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:         AutoAdjust = [
MPI Rank 1:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 1:             loadBestModel = true
MPI Rank 1:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 1:             learnRateDecreaseFactor = 0.5
MPI Rank 1:             learnRateIncreaseFactor = 1.382
MPI Rank 1:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "HTKMLFReader"
MPI Rank 1:         readMethod = "blockRandomize"
MPI Rank 1:         miniBatchMode = "partial"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         verbosity = 0
MPI Rank 1:         features = [
MPI Rank 1:             dim = 363
MPI Rank 1:             type = "real"
MPI Rank 1:             scpFile = "glob_0000.scp"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 1:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 1:             labelDim = 132
MPI Rank 1:             labelType = "category"
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 1: 
MPI Rank 1: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 1: configparameters: cntk.cntk:timestamping=true
MPI Rank 1: 08/04/2016 14:00:32: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 1: 08/04/2016 14:00:32: Commands: speechTrain
MPI Rank 1: 08/04/2016 14:00:32: Precision = "double"
MPI Rank 1: 08/04/2016 14:00:32: Using 8 CPU threads.
MPI Rank 1: 08/04/2016 14:00:32: CNTKModelPath: /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn
MPI Rank 1: 08/04/2016 14:00:32: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 1: 08/04/2016 14:00:32: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: ##############################################################################
MPI Rank 1: 08/04/2016 14:00:32: #                                                                            #
MPI Rank 1: 08/04/2016 14:00:32: # Action "train"                                                             #
MPI Rank 1: 08/04/2016 14:00:32: #                                                                            #
MPI Rank 1: 08/04/2016 14:00:32: ##############################################################################
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: CNTKCommandTrainBegin: speechTrain
MPI Rank 1: SimpleNetworkBuilder Using CPU
MPI Rank 1: reading script file glob_0000.scp ... 948 entries
MPI Rank 1: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 1: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 1: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 1: label set 0: 129 classes
MPI Rank 1: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: Creating virgin network.
MPI Rank 1: 
MPI Rank 1: Post-processing network...
MPI Rank 1: 
MPI Rank 1: 7 roots:
MPI Rank 1: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 1: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 1: 	InvStdOfFeatures = InvStdDev()
MPI Rank 1: 	MeanOfFeatures = Mean()
MPI Rank 1: 	PosteriorProb = Softmax()
MPI Rank 1: 	Prior = Mean()
MPI Rank 1: 	ScaledLogLikelihood = Minus()
MPI Rank 1: 
MPI Rank 1: Validating network. 25 nodes to process in pass 1.
MPI Rank 1: 
MPI Rank 1: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 1: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 1: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 1: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 1: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 1: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 1: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 1: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 1: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 1: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 1: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 1: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 1: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 1: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 1: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 1: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 1: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 1: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 1: 
MPI Rank 1: Validating network. 17 nodes to process in pass 2.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Validating network, final pass.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 1: 
MPI Rank 1: Post-processing network complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: Created model with 25 nodes on CPU.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: Training criterion node(s):
MPI Rank 1: 08/04/2016 14:00:32: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: Evaluation criterion node(s):
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing Structure:
MPI Rank 1: 
MPI Rank 1: (nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 1: 0x7f0c50101728: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 1: 0x7f0c5010fe88: {[EvalErrorPrediction Value[1]] }
MPI Rank 1: 0x7f0c5010ffe8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 1: 0x7f0c501101a8: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 1: 0x7f0c501123c8: {[InvStdOfFeatures Value[363]] }
MPI Rank 1: 0x7f0c50118768: {[W0*features Value[512 x *]] }
MPI Rank 1: 0x7f0c50118928: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 1: 0x7f0c50118ae8: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 1: 0x7f0c5011e7c8: {[Prior Value[132]] }
MPI Rank 1: 0x7f0c50120e18: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 1: 0x7f0c50120ec8: {[LogOfPrior Value[132]] }
MPI Rank 1: 0x7f0c5014a028: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 1: 0x7f0c5014a1e8: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f0c5014a3a8: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 1: 0x7f0c505f7fc8: {[B2 Gradient[132 x 1]] }
MPI Rank 1: 0x7f0c67244708: {[B0 Value[512 x 1]] }
MPI Rank 1: 0x7f0c67255148: {[W1 Value[512 x 512]] }
MPI Rank 1: 0x7f0c6726ab38: {[W0 Value[512 x 363]] }
MPI Rank 1: 0x7f0c6726ac38: {[B1 Value[512 x 1]] }
MPI Rank 1: 0x7f0c6727ef08: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 1: 0x7f0c6727f0c8: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 1: 0x7f0c6727f288: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 1: 0x7f0c6727f448: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 1: 0x7f0c67283088: {[labels Value[132 x *]] }
MPI Rank 1: 0x7f0c672a09a8: {[W2 Value[132 x 512]] }
MPI Rank 1: 0x7f0c672a15f8: {[B2 Value[132 x 1]] }
MPI Rank 1: 0x7f0c672a2178: {[features Value[363 x *]] }
MPI Rank 1: 0x7f0c672a2b18: {[MeanOfFeatures Value[363]] }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: Precomputing --> 3 PreCompute nodes found.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:32: 	MeanOfFeatures = Mean()
MPI Rank 1: 08/04/2016 14:00:32: 	InvStdOfFeatures = InvStdDev()
MPI Rank 1: 08/04/2016 14:00:32: 	Prior = Mean()
MPI Rank 1: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:33: Precomputing --> Completed.
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:34: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 1: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:34: Starting minibatch loop.
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.60029247 * 640; EvalErrorPrediction = 0.92968750 * 640; time = 0.0637s; samplesPerSecond = 10043.3
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.31459154 * 640; EvalErrorPrediction = 0.90156250 * 640; time = 0.0522s; samplesPerSecond = 12269.5
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.02745253 * 640; EvalErrorPrediction = 0.87812500 * 640; time = 0.0517s; samplesPerSecond = 12382.2
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.92723120 * 640; EvalErrorPrediction = 0.87031250 * 640; time = 0.0518s; samplesPerSecond = 12363.8
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.75439942 * 640; EvalErrorPrediction = 0.84531250 * 640; time = 0.0518s; samplesPerSecond = 12363.6
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78594059 * 640; EvalErrorPrediction = 0.87343750 * 640; time = 0.0533s; samplesPerSecond = 12000.3
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.58735083 * 640; EvalErrorPrediction = 0.85156250 * 640; time = 0.0525s; samplesPerSecond = 12200.7
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.43859968 * 640; EvalErrorPrediction = 0.79531250 * 640; time = 0.0520s; samplesPerSecond = 12296.3
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.49304580 * 640; EvalErrorPrediction = 0.81875000 * 640; time = 0.0518s; samplesPerSecond = 12345.4
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.41658528 * 640; EvalErrorPrediction = 0.80781250 * 640; time = 0.0529s; samplesPerSecond = 12106.3
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.45817150 * 640; EvalErrorPrediction = 0.82812500 * 640; time = 0.0530s; samplesPerSecond = 12079.8
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.16026166 * 640; EvalErrorPrediction = 0.78281250 * 640; time = 0.0525s; samplesPerSecond = 12179.8
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.19834287 * 640; EvalErrorPrediction = 0.75312500 * 640; time = 0.0525s; samplesPerSecond = 12186.5
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.15275588 * 640; EvalErrorPrediction = 0.76093750 * 640; time = 0.0525s; samplesPerSecond = 12194.4
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.11484584 * 640; EvalErrorPrediction = 0.75000000 * 640; time = 0.0537s; samplesPerSecond = 11926.5
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.09188858 * 640; EvalErrorPrediction = 0.75625000 * 640; time = 0.0520s; samplesPerSecond = 12303.2
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 3.04570393 * 640; EvalErrorPrediction = 0.74531250 * 640; time = 0.0526s; samplesPerSecond = 12172.9
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.87599277 * 640; EvalErrorPrediction = 0.71250000 * 640; time = 0.0525s; samplesPerSecond = 12179.6
MPI Rank 1: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.87318858 * 640; EvalErrorPrediction = 0.69843750 * 640; time = 0.0559s; samplesPerSecond = 11444.5
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.77854945 * 640; EvalErrorPrediction = 0.70312500 * 640; time = 0.0526s; samplesPerSecond = 12157.4
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.82479386 * 640; EvalErrorPrediction = 0.69687500 * 640; time = 0.0528s; samplesPerSecond = 12130.2
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.65867164 * 640; EvalErrorPrediction = 0.68437500 * 640; time = 0.0524s; samplesPerSecond = 12214.2
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.58743520 * 640; EvalErrorPrediction = 0.66093750 * 640; time = 0.0523s; samplesPerSecond = 12226.1
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.47343256 * 640; EvalErrorPrediction = 0.65000000 * 640; time = 0.0533s; samplesPerSecond = 12004.1
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.50126173 * 640; EvalErrorPrediction = 0.63437500 * 640; time = 0.0534s; samplesPerSecond = 11994.7
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.44996736 * 640; EvalErrorPrediction = 0.64218750 * 640; time = 0.0526s; samplesPerSecond = 12171.5
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.33506320 * 640; EvalErrorPrediction = 0.64062500 * 640; time = 0.0518s; samplesPerSecond = 12351.4
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.46367523 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.0536s; samplesPerSecond = 11950.1
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.43029295 * 640; EvalErrorPrediction = 0.62031250 * 640; time = 0.0528s; samplesPerSecond = 12115.5
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.23640847 * 640; EvalErrorPrediction = 0.60156250 * 640; time = 0.0522s; samplesPerSecond = 12260.3
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.35774394 * 640; EvalErrorPrediction = 0.61562500 * 640; time = 0.0528s; samplesPerSecond = 12132.5
MPI Rank 1: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.21939852 * 640; EvalErrorPrediction = 0.57500000 * 640; time = 0.0529s; samplesPerSecond = 12086.9
MPI Rank 1: 08/04/2016 14:00:36: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.08229172 * 20480; EvalErrorPrediction = 0.74091797 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=1.70158s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:41: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 1: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:41: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Actual gradient aggregation time: 0.055006
MPI Rank 1: Async gradient aggregation wait time: 0.216045
MPI Rank 1: Actual gradient aggregation time: 0.033969
MPI Rank 1: 08/04/2016 14:00:42:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.19264392 * 2304; EvalErrorPrediction = 0.59895833 * 2304; time = 0.6172s; samplesPerSecond = 3733.0
MPI Rank 1: Async gradient aggregation wait time: 0.056658
MPI Rank 1: Actual gradient aggregation time: 0.0582
MPI Rank 1: Async gradient aggregation wait time: 0.026623
MPI Rank 1: Actual gradient aggregation time: 0.046186
MPI Rank 1: 08/04/2016 14:00:43:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.18313848 * 2560; EvalErrorPrediction = 0.59062500 * 2560; time = 0.5334s; samplesPerSecond = 4799.1
MPI Rank 1: Async gradient aggregation wait time: 0.039985
MPI Rank 1: Actual gradient aggregation time: 0.043625
MPI Rank 1: Async gradient aggregation wait time: 0.046936
MPI Rank 1: Actual gradient aggregation time: 0.040099
MPI Rank 1: 08/04/2016 14:00:43:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.11400878 * 2560; EvalErrorPrediction = 0.57695312 * 2560; time = 0.7330s; samplesPerSecond = 3492.6
MPI Rank 1: Async gradient aggregation wait time: 0.069714
MPI Rank 1: Actual gradient aggregation time: 0.052795
MPI Rank 1: Async gradient aggregation wait time: 0.02883
MPI Rank 1: Actual gradient aggregation time: 0.046364
MPI Rank 1: 08/04/2016 14:00:44:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.18346011 * 2560; EvalErrorPrediction = 0.61523438 * 2560; time = 0.5169s; samplesPerSecond = 4953.0
MPI Rank 1: Async gradient aggregation wait time: 0.109149
MPI Rank 1: Actual gradient aggregation time: 0.134153
MPI Rank 1: Async gradient aggregation wait time: 0.0343
MPI Rank 1: Actual gradient aggregation time: 0.063865
MPI Rank 1: 08/04/2016 14:00:44:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.14671794 * 2560; EvalErrorPrediction = 0.58554688 * 2560; time = 0.7143s; samplesPerSecond = 3583.8
MPI Rank 1: Async gradient aggregation wait time: 0.049628
MPI Rank 1: Actual gradient aggregation time: 0.071751
MPI Rank 1: Async gradient aggregation wait time: 0.06903
MPI Rank 1: Actual gradient aggregation time: 0.206455
MPI Rank 1: 08/04/2016 14:00:45:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.18640397 * 2560; EvalErrorPrediction = 0.57265625 * 2560; time = 0.7526s; samplesPerSecond = 3401.5
MPI Rank 1: Async gradient aggregation wait time: 0.062269
MPI Rank 1: Actual gradient aggregation time: 0.050058
MPI Rank 1: Async gradient aggregation wait time: 0.030051
MPI Rank 1: Actual gradient aggregation time: 0.06494
MPI Rank 1: 08/04/2016 14:00:46:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.05705193 * 2560; EvalErrorPrediction = 0.56093750 * 2560; time = 0.5459s; samplesPerSecond = 4689.1
MPI Rank 1: Async gradient aggregation wait time: 0.054508
MPI Rank 1: Actual gradient aggregation time: 0.050722
MPI Rank 1: Async gradient aggregation wait time: 0.042586
MPI Rank 1: Actual gradient aggregation time: 0.043634
MPI Rank 1: 08/04/2016 14:00:47:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.19832445 * 2560; EvalErrorPrediction = 0.64921875 * 2560; time = 0.7379s; samplesPerSecond = 3469.5
MPI Rank 1: Async gradient aggregation wait time: 0.060576
MPI Rank 1: Actual gradient aggregation time: 0.054583
MPI Rank 1: 08/04/2016 14:00:47: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.15622875 * 20480; EvalErrorPrediction = 0.59311523 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=5.26878s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:47: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:47: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 0.082559
MPI Rank 1: Actual gradient aggregation time: 0.091198
MPI Rank 1: Async gradient aggregation wait time: 0.017209
MPI Rank 1: Actual gradient aggregation time: 0.094861
MPI Rank 1: 08/04/2016 14:00:48:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.05142121 * 9216; EvalErrorPrediction = 0.57139757 * 9216; time = 1.0533s; samplesPerSecond = 8749.6
MPI Rank 1: Async gradient aggregation wait time: 0.235792
MPI Rank 1: Actual gradient aggregation time: 0.085798
MPI Rank 1: Async gradient aggregation wait time: 0.126167
MPI Rank 1: Actual gradient aggregation time: 0.085043
MPI Rank 1: 08/04/2016 14:00:49:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.05189898 * 10240; EvalErrorPrediction = 0.56689453 * 10240; time = 1.1669s; samplesPerSecond = 8775.2
MPI Rank 1: 08/04/2016 14:00:49: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.04832104 * 20480; EvalErrorPrediction = 0.56796875 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=2.38524s
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:49: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 1: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 1 of 3, with 1 datapasses
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:49: Starting minibatch loop, DataParallelSGD training (MyRank = 1, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 1: Async gradient aggregation wait time: 0.202135
MPI Rank 1: Actual gradient aggregation time: 0.084004
MPI Rank 1: Async gradient aggregation wait time: 0.086753
MPI Rank 1: Actual gradient aggregation time: 0.09787
MPI Rank 1: 08/04/2016 14:00:51:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.97742354 * 9216; EvalErrorPrediction = 0.54123264 * 9216; time = 1.3708s; samplesPerSecond = 6723.2
MPI Rank 1: Async gradient aggregation wait time: 0.092284
MPI Rank 1: Actual gradient aggregation time: 0.124888
MPI Rank 1: Async gradient aggregation wait time: 0.292039
MPI Rank 1: Actual gradient aggregation time: 0.131237
MPI Rank 1: 08/04/2016 14:00:52:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.00781103 * 10240; EvalErrorPrediction = 0.54609375 * 10240; time = 1.4161s; samplesPerSecond = 7231.1
MPI Rank 1: Async gradient aggregation wait time: 0.05911
MPI Rank 1: 08/04/2016 14:00:52: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 1.99431012 * 20480; EvalErrorPrediction = 0.54428711 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-05; epochTime=3.00112s
MPI Rank 1: 08/04/2016 14:00:52: CNTKCommandTrainEnd: speechTrain
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:52: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: 08/04/2016 14:00:52: __COMPLETED__
MPI Rank 1: ~MPIWrapper
MPI Rank 2: 08/04/2016 14:00:31: -------------------------------------------------------------------
MPI Rank 2: 08/04/2016 14:00:31: Build info: 
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:31: 		Built time: Aug  4 2016 13:07:13
MPI Rank 2: 08/04/2016 14:00:31: 		Last modified date: Thu Aug  4 10:38:25 2016
MPI Rank 2: 08/04/2016 14:00:31: 		Build type: release
MPI Rank 2: 08/04/2016 14:00:31: 		Build target: GPU
MPI Rank 2: 08/04/2016 14:00:31: 		With 1bit-SGD: yes
MPI Rank 2: 08/04/2016 14:00:31: 		Math lib: mkl
MPI Rank 2: 08/04/2016 14:00:31: 		CUDA_PATH: /usr/local/cuda-7.5
MPI Rank 2: 08/04/2016 14:00:31: 		CUB_PATH: /usr/local/cub-1.4.1
MPI Rank 2: 08/04/2016 14:00:31: 		CUDNN_PATH: /usr/local/cudnn-4.0
MPI Rank 2: 08/04/2016 14:00:31: 		Build Branch: HEAD
MPI Rank 2: 08/04/2016 14:00:31: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
MPI Rank 2: 08/04/2016 14:00:31: 		Built by philly on ee6c20c358b8
MPI Rank 2: 08/04/2016 14:00:31: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
MPI Rank 2: 08/04/2016 14:00:31: -------------------------------------------------------------------
MPI Rank 2: 08/04/2016 14:00:32: -------------------------------------------------------------------
MPI Rank 2: 08/04/2016 14:00:32: GPU info:
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 2: 08/04/2016 14:00:32: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 2: 08/04/2016 14:00:32: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
MPI Rank 2: 08/04/2016 14:00:32: -------------------------------------------------------------------
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: Running on localhost at 2016/08/04 14:00:32
MPI Rank 2: 08/04/2016 14:00:32: Command line: 
MPI Rank 2: /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/../cntk.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..  OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu  DeviceId=-1  timestamping=true  numCPUThreads=8  precision=double  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]  speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]  speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]  speechTrain=[SGD=[maxEpochs=4]]  speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]  stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: 08/04/2016 14:00:32: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = $DeviceId$
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "$RunDir$/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = $DeviceId$
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "$DataDir$/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "$DataDir$/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 2: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 2: DeviceId=-1
MPI Rank 2: timestamping=true
MPI Rank 2: numCPUThreads=8
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: 08/04/2016 14:00:32: precision = "float"
MPI Rank 2: command = speechTrain
MPI Rank 2: deviceId = -1
MPI Rank 2: parallelTrain = true
MPI Rank 2: speechTrain = [
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = -1
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ]
MPI Rank 2: currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 2: DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 2: DeviceId=-1
MPI Rank 2: timestamping=true
MPI Rank 2: numCPUThreads=8
MPI Rank 2: precision=double
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[parallelizationStartEpoch=2]]]
MPI Rank 2: speechTrain=[SGD=[maxEpochs=4]]
MPI Rank 2: speechTrain=[SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
MPI Rank 2: configparameters: cntk.cntk:command=speechTrain
MPI Rank 2: configparameters: cntk.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/DNN/ParallelBufferedAsyncGradientAggregation/..
MPI Rank 2: configparameters: cntk.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: configparameters: cntk.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data
MPI Rank 2: configparameters: cntk.cntk:deviceId=-1
MPI Rank 2: configparameters: cntk.cntk:numCPUThreads=8
MPI Rank 2: configparameters: cntk.cntk:OutputDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 2: configparameters: cntk.cntk:parallelTrain=true
MPI Rank 2: configparameters: cntk.cntk:precision=double
MPI Rank 2: configparameters: cntk.cntk:RunDir=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu
MPI Rank 2: configparameters: cntk.cntk:speechTrain=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn"
MPI Rank 2:     deviceId = -1
MPI Rank 2:     traceLevel = 1
MPI Rank 2:     SimpleNetworkBuilder = [
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = "CrossEntropyWithSoftmax"
MPI Rank 2:         evalCriterion = "ErrorPrediction"
MPI Rank 2:         layerTypes = "Sigmoid"
MPI Rank 2:         initValueScale = 1.0
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         uniformInit = true
MPI Rank 2:         needPrior = true
MPI Rank 2:     ]
MPI Rank 2:     ExperimentalNetworkBuilder = [    // the same as above but with BS. Not active; activate by commenting out the SimpleNetworkBuilder entry above
MPI Rank 2:         layerSizes = 363:512:512:132
MPI Rank 2:         trainingCriterion = 'CE'
MPI Rank 2:         evalCriterion = 'Err'
MPI Rank 2:         applyMeanVarNorm = true
MPI Rank 2:         L = Length(layerSizes)-1    // number of model layers
MPI Rank 2:         features = Input(layerSizes[0], 1, tag='feature') ; labels = Input(layerSizes[Length(layerSizes)-1], 1, tag='label')
MPI Rank 2:         featNorm = if applyMeanVarNorm
MPI Rank 2:                    then MeanVarNorm(features)
MPI Rank 2:                    else features
MPI Rank 2:         layers[layer:1..L-1] = if layer > 1
MPI Rank 2:                                then SBFF(layers[layer-1].Eh, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:                                else SBFF(featNorm, layerSizes[layer], layerSizes[layer-1])
MPI Rank 2:         outLayer = BFF(layers[L-1].Eh, layerSizes[L], layerSizes[L-1])
MPI Rank 2:         outZ = outLayer.z        // + PastValue(layerSizes[L], 1, outLayer.z)
MPI Rank 2:         CE = if trainingCriterion == 'CE'
MPI Rank 2:              then CrossEntropyWithSoftmax(labels, outZ, tag='criterion')
MPI Rank 2:              else Fail('unknown trainingCriterion ' + trainingCriterion)
MPI Rank 2:         Err = if evalCriterion == 'Err' then
MPI Rank 2:               ErrorPrediction(labels, outZ, tag='evaluation')
MPI Rank 2:               else Fail('unknown evalCriterion ' + evalCriterion)
MPI Rank 2:         logPrior = LogPrior(labels)
MPI Rank 2:         // TODO: how to add a tag to an infix operation?
MPI Rank 2:         ScaledLogLikelihood = Minus (outZ, logPrior, tag='output')
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 20480
MPI Rank 2:         minibatchSize = 64:256:1024
MPI Rank 2:         learningRatesPerMB = 1.0:0.5:0.1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         momentumPerMB = 0.9:0.656119
MPI Rank 2:         dropoutRate = 0.0
MPI Rank 2:         maxEpochs = 3
MPI Rank 2:         keepCheckPointFiles = true
MPI Rank 2:         clippingThresholdPerSample = 1#INF
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = "DataParallelSGD"
MPI Rank 2:             distributedMBReading = true
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 32
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:         AutoAdjust = [
MPI Rank 2:             reduceLearnRateIfImproveLessThan = 0
MPI Rank 2:             loadBestModel = true
MPI Rank 2:             increaseLearnRateIfImproveMoreThan = 1000000000
MPI Rank 2:             learnRateDecreaseFactor = 0.5
MPI Rank 2:             learnRateIncreaseFactor = 1.382
MPI Rank 2:             autoAdjustLR = "adjustAfterEpoch"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "HTKMLFReader"
MPI Rank 2:         readMethod = "blockRandomize"
MPI Rank 2:         miniBatchMode = "partial"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         verbosity = 0
MPI Rank 2:         features = [
MPI Rank 2:             dim = 363
MPI Rank 2:             type = "real"
MPI Rank 2:             scpFile = "glob_0000.scp"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             mlfFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf"
MPI Rank 2:             labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list"
MPI Rank 2:             labelDim = 132
MPI Rank 2:             labelType = "category"
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2: ] [SGD=[ParallelTrain=[DataParallelSGD=[gradientBits=1]]]] [SGD=[ParallelTrain=[DataParallelSGD=[useBufferedAsyncGradientAggregation=true]]]] [SGD=[ParallelTrain=[parallelizationStartEpoch=2]]] [SGD=[maxEpochs=4]] [SGD=[ParallelTrain=[syncPerfStats=5]]]
MPI Rank 2: 
MPI Rank 2: configparameters: cntk.cntk:stderr=/tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/stderr
MPI Rank 2: configparameters: cntk.cntk:timestamping=true
MPI Rank 2: 08/04/2016 14:00:32: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
MPI Rank 2: 08/04/2016 14:00:32: Commands: speechTrain
MPI Rank 2: 08/04/2016 14:00:32: Precision = "double"
MPI Rank 2: 08/04/2016 14:00:32: Using 8 CPU threads.
MPI Rank 2: 08/04/2016 14:00:32: CNTKModelPath: /tmp/cntk-test-20160804135911.121435/Speech/DNN_ParallelBufferedAsyncGradientAggregation@release_cpu/models/cntkSpeech.dnn
MPI Rank 2: 08/04/2016 14:00:32: CNTKCommandTrainInfo: speechTrain : 4
MPI Rank 2: 08/04/2016 14:00:32: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 4
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: ##############################################################################
MPI Rank 2: 08/04/2016 14:00:32: #                                                                            #
MPI Rank 2: 08/04/2016 14:00:32: # Action "train"                                                             #
MPI Rank 2: 08/04/2016 14:00:32: #                                                                            #
MPI Rank 2: 08/04/2016 14:00:32: ##############################################################################
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: CNTKCommandTrainBegin: speechTrain
MPI Rank 2: SimpleNetworkBuilder Using CPU
MPI Rank 2: reading script file glob_0000.scp ... 948 entries
MPI Rank 2: total 132 state names in state list /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/state.list
MPI Rank 2: htkmlfreader: reading MLF file /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Speech/Data/glob_0000.mlf ... total 948 entries
MPI Rank 2: ...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
MPI Rank 2: label set 0: 129 classes
MPI Rank 2: minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: Creating virgin network.
MPI Rank 2: 
MPI Rank 2: Post-processing network...
MPI Rank 2: 
MPI Rank 2: 7 roots:
MPI Rank 2: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
MPI Rank 2: 	EvalErrorPrediction = ErrorPrediction()
MPI Rank 2: 	InvStdOfFeatures = InvStdDev()
MPI Rank 2: 	MeanOfFeatures = Mean()
MPI Rank 2: 	PosteriorProb = Softmax()
MPI Rank 2: 	Prior = Mean()
MPI Rank 2: 	ScaledLogLikelihood = Minus()
MPI Rank 2: 
MPI Rank 2: Validating network. 25 nodes to process in pass 1.
MPI Rank 2: 
MPI Rank 2: Validating --> labels = InputValue() :  -> [132 x *]
MPI Rank 2: Validating --> W2 = LearnableParameter() :  -> [132 x 512]
MPI Rank 2: Validating --> W1 = LearnableParameter() :  -> [512 x 512]
MPI Rank 2: Validating --> W0 = LearnableParameter() :  -> [512 x 363]
MPI Rank 2: Validating --> features = InputValue() :  -> [363 x *]
MPI Rank 2: Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
MPI Rank 2: Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
MPI Rank 2: Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
MPI Rank 2: Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
MPI Rank 2: Validating --> B0 = LearnableParameter() :  -> [512 x 1]
MPI Rank 2: Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 2: Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> B1 = LearnableParameter() :  -> [512 x 1]
MPI Rank 2: Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
MPI Rank 2: Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
MPI Rank 2: Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
MPI Rank 2: Validating --> B2 = LearnableParameter() :  -> [132 x 1]
MPI Rank 2: Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
MPI Rank 2: Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 2: Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
MPI Rank 2: Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
MPI Rank 2: Validating --> Prior = Mean (labels) : [132 x *] -> [132]
MPI Rank 2: Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
MPI Rank 2: Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]
MPI Rank 2: 
MPI Rank 2: Validating network. 17 nodes to process in pass 2.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Validating network, final pass.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 12 out of 25 nodes do not share the minibatch layout with the input data.
MPI Rank 2: 
MPI Rank 2: Post-processing network complete.
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: Created model with 25 nodes on CPU.
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: Training criterion node(s):
MPI Rank 2: 08/04/2016 14:00:32: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: Evaluation criterion node(s):
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: 	EvalErrorPrediction = ErrorPrediction
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Memory Sharing Structure:
MPI Rank 2: 
MPI Rank 2: (nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
MPI Rank 2: 0x296a0f8: {[H2 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] }
MPI Rank 2: 0x296a2b8: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
MPI Rank 2: 0x296a478: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
MPI Rank 2: 0x2974c18: {[EvalErrorPrediction Value[1]] }
MPI Rank 2: 0x2974de8: {[ScaledLogLikelihood Value[132 x 1 x *]] }
MPI Rank 2: 0x2974fa8: {[CrossEntropyWithSoftmax Value[1]] }
MPI Rank 2: 0x2975168: {[MVNormalizedFeatures Value[363 x *]] }
MPI Rank 2: 0x2976a18: {[CrossEntropyWithSoftmax Gradient[1]] }
MPI Rank 2: 0x2976bd8: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
MPI Rank 2: 0x2977718: {[W2 Value[132 x 512]] }
MPI Rank 2: 0x2977918: {[labels Value[132 x *]] }
MPI Rank 2: 0x297d9a8: {[B1 Value[512 x 1]] }
MPI Rank 2: 0x2a51788: {[features Value[363 x *]] }
MPI Rank 2: 0x2a5bc38: {[W0*features Value[512 x *]] }
MPI Rank 2: 0x2a5bd28: {[LogOfPrior Value[132]] }
MPI Rank 2: 0x2a6d828: {[W0 Gradient[512 x 363]] [W0*features+B0 Value[512 x 1 x *]] }
MPI Rank 2: 0x2a6da38: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] }
MPI Rank 2: 0x2a6dbf8: {[W0*features+B0 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
MPI Rank 2: 0x2a6ddb8: {[W1 Gradient[512 x 512]] [W1*H1+B1 Value[512 x 1 x *]] }
MPI Rank 2: 0x2a72588: {[W1 Value[512 x 512]] }
MPI Rank 2: 0x2a8be38: {[W0 Value[512 x 363]] }
MPI Rank 2: 0x2a93588: {[Prior Value[132]] }
MPI Rank 2: 0x2ae7738: {[InvStdOfFeatures Value[363]] }
MPI Rank 2: 0x2ae81e8: {[B2 Value[132 x 1]] }
MPI Rank 2: 0x2d21e88: {[B0 Value[512 x 1]] }
MPI Rank 2: 0x2d26788: {[MeanOfFeatures Value[363]] }
MPI Rank 2: 0x31d69c8: {[W2*H1 Gradient[132 x 1 x *]] }
MPI Rank 2: 0x31d6b28: {[B2 Gradient[132 x 1]] }
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: Precomputing --> 3 PreCompute nodes found.
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:32: 	MeanOfFeatures = Mean()
MPI Rank 2: 08/04/2016 14:00:32: 	InvStdOfFeatures = InvStdDev()
MPI Rank 2: 08/04/2016 14:00:32: 	Prior = Mean()
MPI Rank 2: minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:34: Precomputing --> Completed.
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:34: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
MPI Rank 2: minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:34: Starting minibatch loop.
MPI Rank 2: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[   1-  10, 3.12%]: CrossEntropyWithSoftmax = 4.60029247 * 640; EvalErrorPrediction = 0.92968750 * 640; time = 0.3339s; samplesPerSecond = 1916.5
MPI Rank 2: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.31459154 * 640; EvalErrorPrediction = 0.90156250 * 640; time = 0.1263s; samplesPerSecond = 5066.0
MPI Rank 2: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.02745253 * 640; EvalErrorPrediction = 0.87812500 * 640; time = 0.1131s; samplesPerSecond = 5658.2
MPI Rank 2: 08/04/2016 14:00:35:  Epoch[ 1 of 4]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.92723120 * 640; EvalErrorPrediction = 0.87031250 * 640; time = 0.3442s; samplesPerSecond = 1859.5
MPI Rank 2: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  41-  50, 15.62%]: CrossEntropyWithSoftmax = 3.75439942 * 640; EvalErrorPrediction = 0.84531250 * 640; time = 0.1938s; samplesPerSecond = 3301.8
MPI Rank 2: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78594059 * 640; EvalErrorPrediction = 0.87343750 * 640; time = 0.1519s; samplesPerSecond = 4214.0
MPI Rank 2: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.58735083 * 640; EvalErrorPrediction = 0.85156250 * 640; time = 0.1076s; samplesPerSecond = 5948.8
MPI Rank 2: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.43859968 * 640; EvalErrorPrediction = 0.79531250 * 640; time = 0.1003s; samplesPerSecond = 6380.6
MPI Rank 2: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  81-  90, 28.12%]: CrossEntropyWithSoftmax = 3.49304580 * 640; EvalErrorPrediction = 0.81875000 * 640; time = 0.2585s; samplesPerSecond = 2475.4
MPI Rank 2: 08/04/2016 14:00:36:  Epoch[ 1 of 4]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.41658528 * 640; EvalErrorPrediction = 0.80781250 * 640; time = 0.1849s; samplesPerSecond = 3462.1
MPI Rank 2: 08/04/2016 14:00:37:  Epoch[ 1 of 4]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.45817150 * 640; EvalErrorPrediction = 0.82812500 * 640; time = 0.2309s; samplesPerSecond = 2771.9
MPI Rank 2: 08/04/2016 14:00:37:  Epoch[ 1 of 4]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.16026166 * 640; EvalErrorPrediction = 0.78281250 * 640; time = 0.1773s; samplesPerSecond = 3609.5
MPI Rank 2: 08/04/2016 14:00:37:  Epoch[ 1 of 4]-Minibatch[ 121- 130, 40.62%]: CrossEntropyWithSoftmax = 3.19834287 * 640; EvalErrorPrediction = 0.75312500 * 640; time = 0.2323s; samplesPerSecond = 2755.4
MPI Rank 2: 08/04/2016 14:00:37:  Epoch[ 1 of 4]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.15275588 * 640; EvalErrorPrediction = 0.76093750 * 640; time = 0.3727s; samplesPerSecond = 1717.1
MPI Rank 2: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.11484584 * 640; EvalErrorPrediction = 0.75000000 * 640; time = 0.2400s; samplesPerSecond = 2666.4
MPI Rank 2: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.09188858 * 640; EvalErrorPrediction = 0.75625000 * 640; time = 0.1886s; samplesPerSecond = 3394.1
MPI Rank 2: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 161- 170, 53.12%]: CrossEntropyWithSoftmax = 3.04570393 * 640; EvalErrorPrediction = 0.74531250 * 640; time = 0.1761s; samplesPerSecond = 3635.1
MPI Rank 2: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.87599277 * 640; EvalErrorPrediction = 0.71250000 * 640; time = 0.2007s; samplesPerSecond = 3188.5
MPI Rank 2: 08/04/2016 14:00:38:  Epoch[ 1 of 4]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.87318858 * 640; EvalErrorPrediction = 0.69843750 * 640; time = 0.1827s; samplesPerSecond = 3503.3
MPI Rank 2: 08/04/2016 14:00:39:  Epoch[ 1 of 4]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.77854945 * 640; EvalErrorPrediction = 0.70312500 * 640; time = 0.1613s; samplesPerSecond = 3966.8
MPI Rank 2: 08/04/2016 14:00:39:  Epoch[ 1 of 4]-Minibatch[ 201- 210, 65.62%]: CrossEntropyWithSoftmax = 2.82479386 * 640; EvalErrorPrediction = 0.69687500 * 640; time = 0.1644s; samplesPerSecond = 3893.6
MPI Rank 2: 08/04/2016 14:00:39:  Epoch[ 1 of 4]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.65867164 * 640; EvalErrorPrediction = 0.68437500 * 640; time = 0.1592s; samplesPerSecond = 4019.9
MPI Rank 2: 08/04/2016 14:00:39:  Epoch[ 1 of 4]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.58743520 * 640; EvalErrorPrediction = 0.66093750 * 640; time = 0.1814s; samplesPerSecond = 3529.0
MPI Rank 2: 08/04/2016 14:00:39:  Epoch[ 1 of 4]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.47343256 * 640; EvalErrorPrediction = 0.65000000 * 640; time = 0.1823s; samplesPerSecond = 3511.6
MPI Rank 2: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 241- 250, 78.12%]: CrossEntropyWithSoftmax = 2.50126173 * 640; EvalErrorPrediction = 0.63437500 * 640; time = 0.3850s; samplesPerSecond = 1662.4
MPI Rank 2: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.44996736 * 640; EvalErrorPrediction = 0.64218750 * 640; time = 0.1825s; samplesPerSecond = 3507.6
MPI Rank 2: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.33506320 * 640; EvalErrorPrediction = 0.64062500 * 640; time = 0.0978s; samplesPerSecond = 6545.5
MPI Rank 2: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.46367523 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.1039s; samplesPerSecond = 6157.9
MPI Rank 2: 08/04/2016 14:00:40:  Epoch[ 1 of 4]-Minibatch[ 281- 290, 90.62%]: CrossEntropyWithSoftmax = 2.43029295 * 640; EvalErrorPrediction = 0.62031250 * 640; time = 0.2654s; samplesPerSecond = 2411.5
MPI Rank 2: 08/04/2016 14:00:41:  Epoch[ 1 of 4]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.23640847 * 640; EvalErrorPrediction = 0.60156250 * 640; time = 0.3873s; samplesPerSecond = 1652.6
MPI Rank 2: 08/04/2016 14:00:41:  Epoch[ 1 of 4]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.35774394 * 640; EvalErrorPrediction = 0.61562500 * 640; time = 0.2407s; samplesPerSecond = 2659.0
MPI Rank 2: 08/04/2016 14:00:41:  Epoch[ 1 of 4]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.21939852 * 640; EvalErrorPrediction = 0.57500000 * 640; time = 0.2387s; samplesPerSecond = 2681.7
MPI Rank 2: 08/04/2016 14:00:41: Finished Epoch[ 1 of 4]: [Training] CrossEntropyWithSoftmax = 3.08229172 * 20480; EvalErrorPrediction = 0.74091797 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=6.6715s
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:41: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
MPI Rank 2: minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:41: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Actual gradient aggregation time: 0.034
MPI Rank 2: Async gradient aggregation wait time: 1.1e-05
MPI Rank 2: Actual gradient aggregation time: 0.021808
MPI Rank 2: 08/04/2016 14:00:42:  Epoch[ 2 of 4]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.19264392 * 2304; EvalErrorPrediction = 0.59895833 * 2304; time = 0.6265s; samplesPerSecond = 3677.4
MPI Rank 2: Async gradient aggregation wait time: 0.073803
MPI Rank 2: Actual gradient aggregation time: 0.018169
MPI Rank 2: Async gradient aggregation wait time: 1e-05
MPI Rank 2: Actual gradient aggregation time: 0.038609
MPI Rank 2: 08/04/2016 14:00:43:  Epoch[ 2 of 4]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.18313848 * 2560; EvalErrorPrediction = 0.59062500 * 2560; time = 0.5256s; samplesPerSecond = 4870.5
MPI Rank 2: Async gradient aggregation wait time: 0.033721
MPI Rank 2: Actual gradient aggregation time: 0.031766
MPI Rank 2: Async gradient aggregation wait time: 0.03325
MPI Rank 2: Actual gradient aggregation time: 0.035678
MPI Rank 2: 08/04/2016 14:00:43:  Epoch[ 2 of 4]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 2.11400878 * 2560; EvalErrorPrediction = 0.57695312 * 2560; time = 0.7679s; samplesPerSecond = 3333.8
MPI Rank 2: Async gradient aggregation wait time: 0.005715
MPI Rank 2: Actual gradient aggregation time: 0.048765
MPI Rank 2: Async gradient aggregation wait time: 9e-06
MPI Rank 2: Actual gradient aggregation time: 0.024595
MPI Rank 2: 08/04/2016 14:00:44:  Epoch[ 2 of 4]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.18346011 * 2560; EvalErrorPrediction = 0.61523438 * 2560; time = 0.6765s; samplesPerSecond = 3784.0
MPI Rank 2: Async gradient aggregation wait time: 8e-06
MPI Rank 2: Actual gradient aggregation time: 0.021663
MPI Rank 2: Async gradient aggregation wait time: 0.021767
MPI Rank 2: Actual gradient aggregation time: 0.056757
MPI Rank 2: 08/04/2016 14:00:45:  Epoch[ 2 of 4]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 2.14671794 * 2560; EvalErrorPrediction = 0.58554688 * 2560; time = 0.5474s; samplesPerSecond = 4676.8
MPI Rank 2: Async gradient aggregation wait time: 0.010526
MPI Rank 2: Actual gradient aggregation time: 0.107996
MPI Rank 2: Async gradient aggregation wait time: 8e-06
MPI Rank 2: Actual gradient aggregation time: 0.155335
MPI Rank 2: 08/04/2016 14:00:45:  Epoch[ 2 of 4]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 2.18640397 * 2560; EvalErrorPrediction = 0.57265625 * 2560; time = 0.7421s; samplesPerSecond = 3449.6
MPI Rank 2: Async gradient aggregation wait time: 0.027149
MPI Rank 2: Actual gradient aggregation time: 0.038439
MPI Rank 2: Async gradient aggregation wait time: 8e-06
MPI Rank 2: Actual gradient aggregation time: 0.077906
MPI Rank 2: 08/04/2016 14:00:46:  Epoch[ 2 of 4]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 2.05705193 * 2560; EvalErrorPrediction = 0.56093750 * 2560; time = 0.5667s; samplesPerSecond = 4517.4
MPI Rank 2: Async gradient aggregation wait time: 1e-05
MPI Rank 2: Actual gradient aggregation time: 0.034001
MPI Rank 2: Async gradient aggregation wait time: 9e-06
MPI Rank 2: Actual gradient aggregation time: 0.024566
MPI Rank 2: 08/04/2016 14:00:47:  Epoch[ 2 of 4]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 2.19832445 * 2560; EvalErrorPrediction = 0.64921875 * 2560; time = 0.7479s; samplesPerSecond = 3423.1
MPI Rank 2: Async gradient aggregation wait time: 0.011833
MPI Rank 2: Actual gradient aggregation time: 0.070547
MPI Rank 2: 08/04/2016 14:00:47: Finished Epoch[ 2 of 4]: [Training] CrossEntropyWithSoftmax = 2.15622875 * 20480; EvalErrorPrediction = 0.59311523 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=5.28939s
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:47: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:47: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 0.033503
MPI Rank 2: Actual gradient aggregation time: 0.087334
MPI Rank 2: Async gradient aggregation wait time: 1e-05
MPI Rank 2: Actual gradient aggregation time: 0.034012
MPI Rank 2: 08/04/2016 14:00:48:  Epoch[ 3 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 2.05142121 * 9216; EvalErrorPrediction = 0.57139757 * 9216; time = 1.1050s; samplesPerSecond = 8339.9
MPI Rank 2: Async gradient aggregation wait time: 1.1e-05
MPI Rank 2: Actual gradient aggregation time: 0.022138
MPI Rank 2: Async gradient aggregation wait time: 0.058947
MPI Rank 2: Actual gradient aggregation time: 0.094565
MPI Rank 2: 08/04/2016 14:00:49:  Epoch[ 3 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.05189898 * 10240; EvalErrorPrediction = 0.56689453 * 10240; time = 1.1589s; samplesPerSecond = 8835.8
MPI Rank 2: 08/04/2016 14:00:49: Finished Epoch[ 3 of 4]: [Training] CrossEntropyWithSoftmax = 2.04832104 * 20480; EvalErrorPrediction = 0.56796875 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-05; epochTime=2.42142s
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:49: Starting Epoch 4: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
MPI Rank 2: minibatchiterator: epoch 3: frames [61440..81920] (first utterance at frame 61440), data subset 2 of 3, with 1 datapasses
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:49: Starting minibatch loop, DataParallelSGD training (MyRank = 2, NumNodes = 3, NumGradientBits = 1), BufferedAsyncGradientAggregation is ENABLED, distributed reading is ENABLED.
MPI Rank 2: Async gradient aggregation wait time: 0.054292
MPI Rank 2: Actual gradient aggregation time: 0.092359
MPI Rank 2: Async gradient aggregation wait time: 8e-06
MPI Rank 2: Actual gradient aggregation time: 0.091973
MPI Rank 2: 08/04/2016 14:00:51:  Epoch[ 4 of 4]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.97742354 * 9216; EvalErrorPrediction = 0.54123264 * 9216; time = 1.4056s; samplesPerSecond = 6556.4
MPI Rank 2: Async gradient aggregation wait time: 0.006785
MPI Rank 2: Actual gradient aggregation time: 0.12057
MPI Rank 2: Async gradient aggregation wait time: 0.219753
MPI Rank 2: Actual gradient aggregation time: 0.121788
MPI Rank 2: 08/04/2016 14:00:52:  Epoch[ 4 of 4]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 2.00781103 * 10240; EvalErrorPrediction = 0.54609375 * 10240; time = 1.3984s; samplesPerSecond = 7322.8
MPI Rank 2: Async gradient aggregation wait time: 0.049937
MPI Rank 2: 08/04/2016 14:00:52: Finished Epoch[ 4 of 4]: [Training] CrossEntropyWithSoftmax = 1.99431012 * 20480; EvalErrorPrediction = 0.54428711 * 20480; totalSamplesSeen = 81920; learningRatePerSample = 9.7656251e-05; epochTime=3.00164s
MPI Rank 2: 08/04/2016 14:00:52: CNTKCommandTrainEnd: speechTrain
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:52: Action "train" complete.
MPI Rank 2: 
MPI Rank 2: 08/04/2016 14:00:52: __COMPLETED__
MPI Rank 2: ~MPIWrapper