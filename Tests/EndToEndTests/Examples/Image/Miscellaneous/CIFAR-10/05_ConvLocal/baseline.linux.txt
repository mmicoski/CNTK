CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal.cntk currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
08/04/2016 14:36:16: Redirecting stderr to file -_Train_Test.log
08/04/2016 14:36:16: -------------------------------------------------------------------
08/04/2016 14:36:16: Build info: 

08/04/2016 14:36:16: 		Built time: Aug  4 2016 13:05:36
08/04/2016 14:36:16: 		Last modified date: Thu Aug  4 12:33:33 2016
08/04/2016 14:36:16: 		Build type: release
08/04/2016 14:36:16: 		Build target: GPU
08/04/2016 14:36:16: 		With 1bit-SGD: no
08/04/2016 14:36:16: 		Math lib: mkl
08/04/2016 14:36:16: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 14:36:16: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 14:36:16: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 14:36:16: 		Build Branch: HEAD
08/04/2016 14:36:16: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 14:36:16: 		Built by philly on 643085f7f8c2
08/04/2016 14:36:16: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 14:36:16: -------------------------------------------------------------------
08/04/2016 14:36:17: -------------------------------------------------------------------
08/04/2016 14:36:17: GPU info:

08/04/2016 14:36:17: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:36:17: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:36:17: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:36:17: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:36:17: -------------------------------------------------------------------

08/04/2016 14:36:17: Running on localhost at 2016/08/04 14:36:17
08/04/2016 14:36:17: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal.cntk  currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData  RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu  DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-



08/04/2016 14:36:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 14:36:17: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
command = Train:Test
modelPath = "$ModelDir$/05_ConvLocal"
stderr = "$OutputDir$/05_ConvLocal"
traceLevel = 1
numMBsToShowResult = 50
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

08/04/2016 14:36:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 14:36:17: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 14:36:17: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models"
ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
command = Train:Test
modelPath = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal"
stderr = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/05_ConvLocal"
traceLevel = 1
numMBsToShowResult = 50
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

08/04/2016 14:36:17: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 14:36:17: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 05_ConvLocal.cntk:command=Train:Test
configparameters: 05_ConvLocal.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 05_ConvLocal.cntk:currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
configparameters: 05_ConvLocal.cntk:DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData
configparameters: 05_ConvLocal.cntk:deviceId=0
configparameters: 05_ConvLocal.cntk:imageLayout=cudnn
configparameters: 05_ConvLocal.cntk:ModelDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models
configparameters: 05_ConvLocal.cntk:modelPath=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
configparameters: 05_ConvLocal.cntk:ndlMacros=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 05_ConvLocal.cntk:numMBsToShowResult=50
configparameters: 05_ConvLocal.cntk:OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal.cntk:precision=float
configparameters: 05_ConvLocal.cntk:RootDir=.
configparameters: 05_ConvLocal.cntk:RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal.cntk:stderr=-
configparameters: 05_ConvLocal.cntk:Test=[
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 05_ConvLocal.cntk:timestamping=true
configparameters: 05_ConvLocal.cntk:traceLevel=1
configparameters: 05_ConvLocal.cntk:Train=[
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

08/04/2016 14:36:17: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 14:36:17: Commands: Train Test
08/04/2016 14:36:17: Precision = "float"
08/04/2016 14:36:17: CNTKModelPath: /tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
08/04/2016 14:36:17: CNTKCommandTrainInfo: Train : 5
08/04/2016 14:36:17: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

08/04/2016 14:36:17: ##############################################################################
08/04/2016 14:36:17: #                                                                            #
08/04/2016 14:36:17: # Action "train"                                                             #
08/04/2016 14:36:17: #                                                                            #
08/04/2016 14:36:17: ##############################################################################

08/04/2016 14:36:17: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

08/04/2016 14:36:17: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 64 x *]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *], [1 x 1 x 64] -> [32 x 32 x 64 x *]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *], [1 x 1 x 64] -> [15 x 15 x 64 x *]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *], [1 x 1 x 64] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *] -> [7 x 7 x 32 x *]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *], [1 x 1 x 32] -> [7 x 7 x 32 x *]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.


conv1.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.

conv4.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.


13 out of 32 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 14:36:17: Created model with 32 nodes on GPU 0.

08/04/2016 14:36:17: Training criterion node(s):
08/04/2016 14:36:17: 	CE = CrossEntropyWithSoftmax

08/04/2016 14:36:17: Evaluation criterion node(s):

08/04/2016 14:36:17: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] }
0x7f96cd85c888: {[CE Gradient[1]] }
0x7f96cd85ca48: {[OutputNodes.W Gradient[10 x 7 x 7 x 32]] [OutputNodes.z Gradient[10 x *]] }
0x7f96cd85cc08: {[OutputNodes.t Gradient[10 x *]] }
0x7f96cd85cdc8: {[OutputNodes.b Gradient[10]] }
0x7f96cd85cf88: {[conv4.b Gradient[1 x 1 x 32]] [conv4.y Gradient[7 x 7 x 32 x *]] }
0x7f96cd8631a8: {[conv1.W Gradient[64 x 75]] [conv1.p Value[32 x 32 x 64 x *]] }
0x7f96cd863368: {[conv1.c Gradient[32 x 32 x 64 x *]] [conv1.y Value[32 x 32 x 64 x *]] }
0x7f96cd863528: {[conv1.p Gradient[32 x 32 x 64 x *]] [pool1 Value[15 x 15 x 64 x *]] }
0x7f96cd8636e8: {[conv2.c Value[15 x 15 x 64 x *]] }
0x7f96cd8638a8: {[conv1.b Gradient[1 x 1 x 64]] [conv1.y Gradient[32 x 32 x 64 x *]] }
0x7f96cd863a68: {[conv2.W Gradient[64 x 1600]] [conv2.p Value[15 x 15 x 64 x *]] }
0x7f96cd863c28: {[conv2.c Gradient[15 x 15 x 64 x *]] [conv2.y Value[15 x 15 x 64 x *]] }
0x7f96cd863de8: {[conv2.p Gradient[15 x 15 x 64 x *]] [pool1 Gradient[15 x 15 x 64 x *]] [pool2 Value[7 x 7 x 64 x *]] }
0x7f96cd863fa8: {[conv3.c Value[7 x 7 x 64 x *]] }
0x7f96cd864168: {[conv2.b Gradient[1 x 1 x 64]] [conv2.y Gradient[15 x 15 x 64 x *]] }
0x7f96cd864328: {[conv3.W Gradient[3136 x 576]] [conv3.p Value[7 x 7 x 64 x *]] }
0x7f96cd8644e8: {[conv3.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
0x7f96cd8646a8: {[conv4.c Value[7 x 7 x 32 x *]] }
0x7f96cd864868: {[conv3.p Gradient[7 x 7 x 64 x *]] [pool2 Gradient[7 x 7 x 64 x *]] }
0x7f96cd864a28: {[conv4.W Gradient[1568 x 576]] [conv4.p Value[7 x 7 x 32 x *]] }
0x7f96cd864be8: {[conv4.c Gradient[7 x 7 x 32 x *]] [conv4.y Value[7 x 7 x 32 x *]] }
0x7f96cd864da8: {[OutputNodes.t Value[10 x *]] [conv3.b Gradient[1 x 1 x 64]] [conv3.y Gradient[7 x 7 x 64 x *]] [conv4.p Gradient[7 x 7 x 32 x *]] }
0x7f96cdaefa48: {[featScaled Value[32 x 32 x 3 x *]] }
0x7f96cdaf06d8: {[Err Value[1]] }
0x7f96cde63a28: {[CE Value[1]] }
0x7f96d65b4dc8: {[OutputNodes.z Value[10 x *]] }
0x7f96d8bd7068: {[conv3.b Value[1 x 1 x 64]] }
0x7f96d8bd93e8: {[conv4.W Value[1568 x 576]] }
0x7f96d8bda1c8: {[conv4.b Value[1 x 1 x 32]] }
0x7f96d8bdc618: {[OutputNodes.W Value[10 x 7 x 7 x 32]] }
0x7f96d8bdd048: {[OutputNodes.b Value[10]] }
0x7f96d8de5e98: {[labels Value[10 x *]] }
0x7f96d8de6968: {[conv1.W Value[64 x 75]] }
0x7f96d8de7778: {[conv1.b Value[1 x 1 x 64]] }
0x7f96d8de9088: {[conv2.W Value[64 x 1600]] }
0x7f96d8dea248: {[conv2.b Value[1 x 1 x 64]] }
0x7f96d8debf08: {[conv3.W Value[3136 x 576]] }
0x7f96d8df6f08: {[featOffs Value[1 x 1]] }
0x7f96dd6250f8: {[conv1.c Value[32 x 32 x 64 x *]] }
0x7f96dd63c9f8: {[features Value[32 x 32 x 3 x *]] }

08/04/2016 14:36:17: No PreCompute nodes found, skipping PreCompute step.

08/04/2016 14:36:17: Starting Epoch 1: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1

08/04/2016 14:36:17: Starting minibatch loop.
08/04/2016 14:36:21: Finished Epoch[ 1 of 5]: [Training] CE = 2.30258072 * 100; Err = 0.91000000 * 100; totalSamplesSeen = 100; learningRatePerSample = 0.00015625; epochTime=3.69559s
08/04/2016 14:36:21: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.1'

08/04/2016 14:36:21: Starting Epoch 2: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 1: frames [100..200] (first sequence at sample 100), data subset 0 of 1

08/04/2016 14:36:21: Starting minibatch loop.
08/04/2016 14:36:22: Finished Epoch[ 2 of 5]: [Training] CE = 2.30257950 * 100; Err = 0.91000000 * 100; totalSamplesSeen = 200; learningRatePerSample = 0.00015625; epochTime=0.190278s
08/04/2016 14:36:22: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.2'

08/04/2016 14:36:22: Starting Epoch 3: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 2: frames [200..300] (first sequence at sample 200), data subset 0 of 1

08/04/2016 14:36:22: Starting minibatch loop.
08/04/2016 14:36:22: Finished Epoch[ 3 of 5]: [Training] CE = 2.30258392 * 100; Err = 0.95000000 * 100; totalSamplesSeen = 300; learningRatePerSample = 0.00015625; epochTime=0.188369s
08/04/2016 14:36:22: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.3'

08/04/2016 14:36:22: Starting Epoch 4: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 3: frames [300..400] (first sequence at sample 300), data subset 0 of 1

08/04/2016 14:36:22: Starting minibatch loop.
08/04/2016 14:36:22: Finished Epoch[ 4 of 5]: [Training] CE = 2.30260574 * 100; Err = 0.85000000 * 100; totalSamplesSeen = 400; learningRatePerSample = 0.00015625; epochTime=0.190041s
08/04/2016 14:36:22: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.4'

08/04/2016 14:36:23: Starting Epoch 5: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples
BlockRandomizer::StartEpoch: epoch 4: frames [400..500] (first sequence at sample 400), data subset 0 of 1

08/04/2016 14:36:23: Starting minibatch loop.
08/04/2016 14:36:23: Finished Epoch[ 5 of 5]: [Training] CE = 2.30248108 * 100; Err = 0.90000000 * 100; totalSamplesSeen = 500; learningRatePerSample = 0.00015625; epochTime=0.183995s
08/04/2016 14:36:23: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal'
08/04/2016 14:36:23: CNTKCommandTrainEnd: Train

08/04/2016 14:36:23: Action "train" complete.


08/04/2016 14:36:23: ##############################################################################
08/04/2016 14:36:23: #                                                                            #
08/04/2016 14:36:23: # Action "test"                                                              #
08/04/2016 14:36:23: #                                                                            #
08/04/2016 14:36:23: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 64 x *1]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *1], [1 x 1 x 64] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *1], [1 x 1 x 32] -> [7 x 7 x 32 x *1]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.


conv1.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.

conv4.c: using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.


13 out of 32 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 7 x 7 x 32]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.W Gradient[64 x 75]] [conv1.b Gradient[1 x 1 x 64]] [conv1.c Gradient[32 x 32 x 64 x *1]] [conv1.p Gradient[32 x 32 x 64 x *1]] [conv1.y Gradient[32 x 32 x 64 x *1]] [conv2.W Gradient[64 x 1600]] [conv2.b Gradient[1 x 1 x 64]] [conv2.c Gradient[15 x 15 x 64 x *1]] [conv2.p Gradient[15 x 15 x 64 x *1]] [conv2.y Gradient[15 x 15 x 64 x *1]] [conv3.W Gradient[3136 x 576]] [conv3.b Gradient[1 x 1 x 64]] [conv3.c Gradient[7 x 7 x 64 x *1]] [conv3.p Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [conv4.W Gradient[1568 x 576]] [conv4.b Gradient[1 x 1 x 32]] [conv4.c Gradient[7 x 7 x 32 x *1]] [conv4.p Gradient[7 x 7 x 32 x *1]] [conv4.y Gradient[7 x 7 x 32 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 64 x *1]] [pool2 Gradient[7 x 7 x 64 x *1]] }
0x7f96de2cea98: {[featScaled Value[32 x 32 x 3 x *1]] }
0x7f96de2cf3d8: {[conv1.b Value[1 x 1 x 64]] }
0x7f96de2cfdc8: {[conv3.b Value[1 x 1 x 64]] }
0x7f96de2d07f8: {[conv1.W Value[64 x 75]] }
0x7f96de436018: {[conv2.b Value[1 x 1 x 64]] }
0x7f96de437488: {[conv2.W Value[64 x 1600]] }
0x7f96de439a68: {[conv3.W Value[3136 x 576]] }
0x7f96de43ae18: {[conv4.W Value[1568 x 576]] }
0x7f96de43b158: {[conv4.b Value[1 x 1 x 32]] }
0x7f96de43da38: {[featOffs Value[1 x 1]] }
0x7f96de43e6b8: {[features Value[32 x 32 x 3 x *1]] }
0x7f96de43f4d8: {[labels Value[10 x *1]] }
0x7f96de43fee8: {[OutputNodes.b Value[10]] }
0x7f96de440a68: {[OutputNodes.W Value[10 x 7 x 7 x 32]] }
0x7f96de442048: {[CE Value[1]] }
0x7f96de6423d8: {[Err Value[1]] }
0x7f96de6b1108: {[conv1.c Value[32 x 32 x 64 x *1]] }
0x7f96de6b16d8: {[conv1.p Value[32 x 32 x 64 x *1]] }
0x7f96de6b1898: {[conv1.y Value[32 x 32 x 64 x *1]] }
0x7f96de6b1a58: {[pool1 Value[15 x 15 x 64 x *1]] }
0x7f96de6b1c18: {[conv2.c Value[15 x 15 x 64 x *1]] }
0x7f96de6b1f98: {[conv2.p Value[15 x 15 x 64 x *1]] }
0x7f96de6b2158: {[conv2.y Value[15 x 15 x 64 x *1]] }
0x7f96de6b2318: {[pool2 Value[7 x 7 x 64 x *1]] }
0x7f96deef88b8: {[conv3.c Value[7 x 7 x 64 x *1]] }
0x7f96deef8c38: {[conv3.p Value[7 x 7 x 64 x *1]] }
0x7f96deef8df8: {[conv3.y Value[7 x 7 x 64 x *1]] }
0x7f96deef8fb8: {[conv4.c Value[7 x 7 x 32 x *1]] }
0x7f96deef9338: {[conv4.p Value[7 x 7 x 32 x *1]] }
0x7f96deef94f8: {[conv4.y Value[7 x 7 x 32 x *1]] }
0x7f96deef96b8: {[OutputNodes.t Value[10 x *1]] }
0x7f96deef9878: {[OutputNodes.z Value[10 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
08/04/2016 14:36:24: Minibatch[1-50]: Err = 0.84250000 * 800; CE = 2.30250628 * 800
08/04/2016 14:36:24: Minibatch[51-100]: Err = 0.82125000 * 800; CE = 2.30251752 * 800
08/04/2016 14:36:25: Minibatch[101-150]: Err = 0.85000000 * 800; CE = 2.30254408 * 800
08/04/2016 14:36:25: Minibatch[151-200]: Err = 0.85625000 * 800; CE = 2.30256267 * 800
08/04/2016 14:36:25: Minibatch[201-250]: Err = 0.84625000 * 800; CE = 2.30251079 * 800
08/04/2016 14:36:25: Minibatch[251-300]: Err = 0.84375000 * 800; CE = 2.30255085 * 800
08/04/2016 14:36:26: Minibatch[301-350]: Err = 0.84250000 * 800; CE = 2.30249901 * 800
08/04/2016 14:36:26: Minibatch[351-400]: Err = 0.84000000 * 800; CE = 2.30252127 * 800
08/04/2016 14:36:26: Minibatch[401-450]: Err = 0.83875000 * 800; CE = 2.30255857 * 800
08/04/2016 14:36:26: Minibatch[451-500]: Err = 0.84750000 * 800; CE = 2.30248772 * 800
08/04/2016 14:36:26: Minibatch[501-550]: Err = 0.85625000 * 800; CE = 2.30254405 * 800
08/04/2016 14:36:27: Minibatch[551-600]: Err = 0.84000000 * 800; CE = 2.30247979 * 800
08/04/2016 14:36:27: Minibatch[601-625]: Err = 0.84750000 * 400; CE = 2.30249345 * 400
08/04/2016 14:36:27: Final Results: Minibatch[1-625]: Err = 0.84390000 * 10000; CE = 2.30252234 * 10000; perplexity = 9.99937254

08/04/2016 14:36:27: Action "test" complete.

08/04/2016 14:36:27: __COMPLETED__