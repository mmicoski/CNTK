CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.cntk currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
08/04/2016 14:35:38: Redirecting stderr to file -_Train_Test.log
08/04/2016 14:35:38: -------------------------------------------------------------------
08/04/2016 14:35:38: Build info: 

08/04/2016 14:35:38: 		Built time: Aug  4 2016 13:05:36
08/04/2016 14:35:38: 		Last modified date: Thu Aug  4 12:33:33 2016
08/04/2016 14:35:38: 		Build type: release
08/04/2016 14:35:38: 		Build target: GPU
08/04/2016 14:35:38: 		With 1bit-SGD: no
08/04/2016 14:35:38: 		Math lib: mkl
08/04/2016 14:35:38: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 14:35:38: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 14:35:38: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 14:35:38: 		Build Branch: HEAD
08/04/2016 14:35:38: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 14:35:38: 		Built by philly on 643085f7f8c2
08/04/2016 14:35:38: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 14:35:38: -------------------------------------------------------------------
08/04/2016 14:35:39: -------------------------------------------------------------------
08/04/2016 14:35:39: GPU info:

08/04/2016 14:35:39: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:35:39: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:35:39: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:35:39: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:35:39: -------------------------------------------------------------------

08/04/2016 14:35:39: Running on localhost at 2016/08/04 14:35:39
08/04/2016 14:35:39: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.cntk  currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData  RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu  DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-



08/04/2016 14:35:39: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 14:35:39: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
command = Train:Test
stderr = "$OutputDir$/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "$ModelDir$/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

08/04/2016 14:35:39: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 14:35:39: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 14:35:39: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models"
ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
command = Train:Test
stderr = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
Test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

08/04/2016 14:35:39: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 14:35:39: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_BatchNormConv.cntk:command=Train:Test
configparameters: 02_BatchNormConv.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 02_BatchNormConv.cntk:currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:deviceId=0
configparameters: 02_BatchNormConv.cntk:imageLayout=cudnn
configparameters: 02_BatchNormConv.cntk:initOnCPUOnly=true
configparameters: 02_BatchNormConv.cntk:ModelDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models
configparameters: 02_BatchNormConv.cntk:ndlMacros=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 02_BatchNormConv.cntk:numMBsToShowResult=500
configparameters: 02_BatchNormConv.cntk:OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:precision=float
configparameters: 02_BatchNormConv.cntk:RootDir=.
configparameters: 02_BatchNormConv.cntk:RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:stderr=-
configparameters: 02_BatchNormConv.cntk:Test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
]

configparameters: 02_BatchNormConv.cntk:timestamping=true
configparameters: 02_BatchNormConv.cntk:traceLevel=1
configparameters: 02_BatchNormConv.cntk:Train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]    
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

08/04/2016 14:35:39: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 14:35:39: Commands: Train Test
08/04/2016 14:35:39: Precision = "float"
08/04/2016 14:35:39: CNTKModelPath: /tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv
08/04/2016 14:35:39: CNTKCommandTrainInfo: Train : 5
08/04/2016 14:35:39: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

08/04/2016 14:35:39: ##############################################################################
08/04/2016 14:35:39: #                                                                            #
08/04/2016 14:35:39: # Action "train"                                                             #
08/04/2016 14:35:39: #                                                                            #
08/04/2016 14:35:39: ##############################################################################

08/04/2016 14:35:39: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

08/04/2016 14:35:39: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 32 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *] -> [32 x 32 x 32 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *] -> [3 x 3 x 64 x *]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *] -> [64 x *]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *] -> [64 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c.c.c: using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool3: using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 14:35:40: Created model with 45 nodes on GPU 0.

08/04/2016 14:35:40: Training criterion node(s):
08/04/2016 14:35:40: 	CE = CrossEntropyWithSoftmax

08/04/2016 14:35:40: Evaluation criterion node(s):

08/04/2016 14:35:40: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [labels Gradient[10 x *]] }
0x7f931d8247f8: {[featScaled Value[32 x 32 x 3 x *]] }
0x7f931d824b38: {[conv1.c.c.c Value[32 x 32 x 32 x *]] }
0x7f931d841c48: {[conv1.c.c.c Gradient[32 x 32 x 32 x *]] [conv1.y Value[32 x 32 x 32 x *]] }
0x7f931d8421b8: {[conv1.c.c.y Gradient[32 x 32 x 32 x *]] [pool1 Value[15 x 15 x 32 x *]] }
0x7f931d842378: {[conv1.c.W Gradient[32 x 75]] [conv2.c.c.c Value[15 x 15 x 32 x *]] }
0x7f931d842538: {[conv1.c.c.sc Gradient[32 x 1]] [conv1.y Gradient[32 x 32 x 32 x *]] }
0x7f931d8426f8: {[conv2.c.c.y Value[15 x 15 x 32 x *]] }
0x7f931d842c38: {[conv1.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *]] [conv2.y Value[15 x 15 x 32 x *]] }
0x7f931d842df8: {[conv2.c.c.y Gradient[15 x 15 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0x7f931d842fb8: {[conv2.c.W Gradient[32 x 800]] [conv3.c.c.c Value[7 x 7 x 64 x *]] }
0x7f931d843178: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[15 x 15 x 32 x *]] }
0x7f931d843338: {[conv3.c.c.y Value[7 x 7 x 64 x *]] }
0x7f931d843878: {[conv2.c.c.b Gradient[32 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
0x7f931d843a38: {[conv3.c.c.y Gradient[7 x 7 x 64 x *]] [pool3 Value[3 x 3 x 64 x *]] }
0x7f931d843bf8: {[conv3.c.c.sc Gradient[64 x 1]] [conv3.y Gradient[7 x 7 x 64 x *]] [h1.t Value[64 x *]] }
0x7f931d843db8: {[h1.bn Value[64 x *]] }
0x7f931d844138: {[conv3.c.c.b Gradient[64 x 1]] }
0x7f931d8442f8: {[conv3.c.W Gradient[64 x 800]] [h1.t Gradient[64 x *]] [h1.y Value[64 x *]] }
0x7f931d8444b8: {[OutputNodes.t Value[10 x *]] [h1.bn Gradient[64 x *]] }
0x7f931d844f98: {[CE Gradient[1]] }
0x7f931d845158: {[OutputNodes.W Gradient[10 x 64]] [OutputNodes.z Gradient[10 x *]] }
0x7f931d845318: {[OutputNodes.t Gradient[10 x *]] [pool1 Gradient[15 x 15 x 32 x *]] [pool2 Gradient[7 x 7 x 32 x *]] [pool3 Gradient[3 x 3 x 64 x *]] }
0x7f931d8454d8: {[OutputNodes.b Gradient[10]] }
0x7f931d845698: {[h1.sc Gradient[64 x 1]] [h1.y Gradient[64 x *]] }
0x7f931d845888: {[h1.W Gradient[64 x 3 x 3 x 64]] }
0x7f931d845a48: {[h1.b Gradient[64 x 1]] }
0x7f931d84d028: {[conv1.c.c.y Value[32 x 32 x 32 x *]] }
0x7f9325edf3b8: {[featOffs Value[1 x 1]] }
0x7f9325ee04b8: {[labels Value[10 x *]] }
0x7f9325ee1018: {[conv1.c.W Value[32 x 75]] }
0x7f9325ee1558: {[conv1.c.c.b Value[32 x 1]] }
0x7f9325ee22a8: {[conv1.c.c.sc Value[32 x 1]] }
0x7f9325ee2a38: {[conv1.c.c.isd Value[32 x 1]] }
0x7f9325ee2e18: {[conv1.c.c.m Value[32 x 1]] }
0x7f9325ee5678: {[conv2.c.W Value[32 x 800]] }
0x7f9325ee6578: {[conv2.c.c.b Value[32 x 1]] }
0x7f9325ee6fa8: {[conv2.c.c.sc Value[32 x 1]] }
0x7f9325ee7618: {[h1.b Value[64 x 1]] }
0x7f9325ee7c28: {[conv2.c.c.m Value[32 x 1]] }
0x7f9325ee8798: {[conv2.c.c.isd Value[32 x 1]] }
0x7f9325eea448: {[conv3.c.W Value[64 x 800]] }
0x7f9325eea988: {[conv3.c.c.b Value[64 x 1]] }
0x7f9325eeb6e8: {[conv3.c.c.sc Value[64 x 1]] }
0x7f9325eebe08: {[conv3.c.c.isd Value[64 x 1]] }
0x7f9325eec248: {[conv3.c.c.m Value[64 x 1]] }
0x7f9325eeddd8: {[h1.sc Value[64 x 1]] }
0x7f9325eee768: {[h1.W Value[64 x 3 x 3 x 64]] }
0x7f9325ef0858: {[h1.m Value[64 x 1]] }
0x7f9325ef13c8: {[h1.isd Value[64 x 1]] }
0x7f9325ef27f8: {[OutputNodes.W Value[10 x 64]] }
0x7f9325ef36f8: {[OutputNodes.b Value[10]] }
0x7f93287e81d8: {[Err Value[1]] }
0x7f93287e8d48: {[OutputNodes.z Value[10 x *]] }
0x7f93287eac98: {[CE Value[1]] }
0x7f932d64aae8: {[features Value[32 x 32 x 3 x *]] }

08/04/2016 14:35:40: No PreCompute nodes found, skipping PreCompute step.

08/04/2016 14:35:40: Starting Epoch 1: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..100] (first sequence at sample 0), data subset 0 of 1

08/04/2016 14:35:40: Starting minibatch loop.
08/04/2016 14:35:43: Finished Epoch[ 1 of 5]: [Training] CE = 2.27778687 * 100; Err = 0.86000000 * 100; totalSamplesSeen = 100; learningRatePerSample = 0.00046874999; epochTime=3.50026s
08/04/2016 14:35:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.1'

08/04/2016 14:35:43: Starting Epoch 2: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 1: frames [100..200] (first sequence at sample 100), data subset 0 of 1

08/04/2016 14:35:43: Starting minibatch loop.
08/04/2016 14:35:43: Finished Epoch[ 2 of 5]: [Training] CE = 2.24985291 * 100; Err = 0.81000000 * 100; totalSamplesSeen = 200; learningRatePerSample = 0.00046874999; epochTime=0.011892s
08/04/2016 14:35:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.2'

08/04/2016 14:35:43: Starting Epoch 3: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 2: frames [200..300] (first sequence at sample 200), data subset 0 of 1

08/04/2016 14:35:43: Starting minibatch loop.
08/04/2016 14:35:43: Finished Epoch[ 3 of 5]: [Training] CE = 2.24754929 * 100; Err = 0.88000000 * 100; totalSamplesSeen = 300; learningRatePerSample = 0.00046874999; epochTime=0.011814s
08/04/2016 14:35:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.3'

08/04/2016 14:35:43: Starting Epoch 4: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 3: frames [300..400] (first sequence at sample 300), data subset 0 of 1

08/04/2016 14:35:43: Starting minibatch loop.
08/04/2016 14:35:43: Finished Epoch[ 4 of 5]: [Training] CE = 2.19956787 * 100; Err = 0.77000000 * 100; totalSamplesSeen = 400; learningRatePerSample = 0.00046874999; epochTime=0.011368s
08/04/2016 14:35:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.4'

08/04/2016 14:35:43: Starting Epoch 5: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples
BlockRandomizer::StartEpoch: epoch 4: frames [400..500] (first sequence at sample 400), data subset 0 of 1

08/04/2016 14:35:43: Starting minibatch loop.
08/04/2016 14:35:43: Finished Epoch[ 5 of 5]: [Training] CE = 2.15012985 * 100; Err = 0.71000000 * 100; totalSamplesSeen = 500; learningRatePerSample = 0.00046874999; epochTime=0.011576s
08/04/2016 14:35:43: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv'
08/04/2016 14:35:43: CNTKCommandTrainEnd: Train

08/04/2016 14:35:43: Action "train" complete.


08/04/2016 14:35:43: ##############################################################################
08/04/2016 14:35:43: #                                                                            #
08/04/2016 14:35:43: # Action "test"                                                              #
08/04/2016 14:35:43: #                                                                            #
08/04/2016 14:35:43: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 32 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *1] -> [32 x 32 x 32 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *1] -> [3 x 3 x 64 x *1]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *1] -> [64 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *1] -> [64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv3.c.c.c: using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool3: using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[32 x 75]] [conv1.c.c.b Gradient[32 x 1]] [conv1.c.c.c Gradient[32 x 32 x 32 x *1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv1.c.c.sc Gradient[32 x 1]] [conv1.c.c.y Gradient[32 x 32 x 32 x *1]] [conv1.y Gradient[32 x 32 x 32 x *1]] [conv2.c.W Gradient[32 x 800]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[15 x 15 x 32 x *1]] [conv2.y Gradient[15 x 15 x 32 x *1]] [conv3.c.W Gradient[64 x 800]] [conv3.c.c.b Gradient[64 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [conv3.c.c.sc Gradient[64 x 1]] [conv3.c.c.y Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [h1.W Gradient[64 x 3 x 3 x 64]] [h1.b Gradient[64 x 1]] [h1.bn Gradient[64 x *1]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [h1.sc Gradient[64 x 1]] [h1.t Gradient[64 x *1]] [h1.y Gradient[64 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 32 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] [pool3 Gradient[3 x 3 x 64 x *1]] }
0x7f931d861fe8: {[conv3.c.c.b Value[64 x 1]] }
0x7f931d862248: {[conv3.c.W Value[64 x 800]] }
0x7f931d863178: {[conv3.c.c.isd Value[64 x 1]] }
0x7f931d863338: {[conv3.c.c.m Value[64 x 1]] }
0x7f931d864278: {[conv3.c.c.sc Value[64 x 1]] }
0x7f932da70748: {[featScaled Value[32 x 32 x 3 x *1]] }
0x7f932dceff88: {[conv1.y Value[32 x 32 x 32 x *1]] }
0x7f932dcf0148: {[pool1 Value[15 x 15 x 32 x *1]] }
0x7f932dcf0308: {[conv2.c.c.c Value[15 x 15 x 32 x *1]] }
0x7f932dcf0688: {[conv2.c.c.y Value[15 x 15 x 32 x *1]] }
0x7f932dcf0bc8: {[conv2.y Value[15 x 15 x 32 x *1]] }
0x7f932dcf0d88: {[pool2 Value[7 x 7 x 32 x *1]] }
0x7f932dcf0f48: {[conv3.c.c.c Value[7 x 7 x 64 x *1]] }
0x7f932dcf12c8: {[conv3.c.c.y Value[7 x 7 x 64 x *1]] }
0x7f932dcf1808: {[conv3.y Value[7 x 7 x 64 x *1]] }
0x7f932dcf19c8: {[pool3 Value[3 x 3 x 64 x *1]] }
0x7f932dcf1b88: {[h1.t Value[64 x *1]] }
0x7f932dcf1d48: {[h1.bn Value[64 x *1]] }
0x7f932dcf2288: {[h1.y Value[64 x *1]] }
0x7f932dcf2448: {[OutputNodes.t Value[10 x *1]] }
0x7f932dcf2608: {[OutputNodes.z Value[10 x *1]] }
0x7f932dcf4568: {[labels Value[10 x *1]] }
0x7f932decc508: {[conv1.c.c.c Value[32 x 32 x 32 x *1]] }
0x7f932deccb28: {[conv1.c.c.y Value[32 x 32 x 32 x *1]] }
0x7f932dedbda8: {[CE Value[1]] }
0x7f932e032d38: {[featOffs Value[1 x 1]] }
0x7f932e032f38: {[features Value[32 x 32 x 3 x *1]] }
0x7f932e4b9128: {[conv1.c.c.b Value[32 x 1]] }
0x7f932e4ba958: {[conv1.c.c.isd Value[32 x 1]] }
0x7f932e4baab8: {[conv1.c.c.m Value[32 x 1]] }
0x7f932e4bb4c8: {[conv1.c.c.sc Value[32 x 1]] }
0x7f932e4bbed8: {[conv1.c.W Value[32 x 75]] }
0x7f932e4bd1e8: {[conv2.c.c.b Value[32 x 1]] }
0x7f932e4bd3e8: {[conv2.c.c.isd Value[32 x 1]] }
0x7f932e4be558: {[conv2.c.c.m Value[32 x 1]] }
0x7f932e4bef68: {[conv2.c.c.sc Value[32 x 1]] }
0x7f932e4bf008: {[conv2.c.W Value[32 x 800]] }
0x7f932e4c2b28: {[h1.b Value[64 x 1]] }
0x7f932e4c30a8: {[h1.isd Value[64 x 1]] }
0x7f932e4c39a8: {[h1.m Value[64 x 1]] }
0x7f932e4c3dd8: {[h1.sc Value[64 x 1]] }
0x7f932e4c5138: {[h1.W Value[64 x 3 x 3 x 64]] }
0x7f932e4c63b8: {[OutputNodes.b Value[10]] }
0x7f932e4c70e8: {[OutputNodes.W Value[10 x 64]] }
0x7f932e4c9988: {[Err Value[1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
08/04/2016 14:35:45: Minibatch[1-500]: Err = 0.89975000 * 8000; CE = 2.31075200 * 8000
08/04/2016 14:35:45: Minibatch[501-625]: Err = 0.89950000 * 2000; CE = 2.30657600 * 2000
08/04/2016 14:35:45: Final Results: Minibatch[1-625]: Err = 0.89970000 * 10000; CE = 2.30991680 * 10000; perplexity = 10.07358647

08/04/2016 14:35:45: Action "test" complete.

08/04/2016 14:35:45: __COMPLETED__