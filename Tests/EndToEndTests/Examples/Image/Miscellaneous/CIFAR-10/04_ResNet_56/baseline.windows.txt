CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
Looking for data in: /cygdrive/c/Data/CNTKTestData
Copying test data to local directory
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=1]] Train=[SGD=[epochSize=128]] Train=[reader=[randomize=none]] Train=[SGD=[minibatchSize=16]] Test=[minibatchSize=16] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 06:18:04
		Last modified date: Thu Aug  4 03:39:14 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by svcphil on dphaim-26-new
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@3\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
08/04/2016 08:07:53: Redirecting stderr to file -_Train_Test.log
08/04/2016 08:07:53: -------------------------------------------------------------------
08/04/2016 08:07:53: Build info: 

08/04/2016 08:07:53: 		Built time: Aug  4 2016 06:18:04
08/04/2016 08:07:53: 		Last modified date: Thu Aug  4 03:39:14 2016
08/04/2016 08:07:53: 		Build type: Release
08/04/2016 08:07:53: 		Build target: GPU
08/04/2016 08:07:53: 		With 1bit-SGD: no
08/04/2016 08:07:53: 		Math lib: mkl
08/04/2016 08:07:53: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/04/2016 08:07:53: 		CUB_PATH: C:\src\cub-1.4.1
08/04/2016 08:07:53: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/04/2016 08:07:53: 		Build Branch: HEAD
08/04/2016 08:07:53: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 08:07:53: 		Built by svcphil on dphaim-26-new
08/04/2016 08:07:53: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@3\Source\CNTK\
08/04/2016 08:07:53: -------------------------------------------------------------------
08/04/2016 08:07:53: -------------------------------------------------------------------
08/04/2016 08:07:53: GPU info:

08/04/2016 08:07:53: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
08/04/2016 08:07:53: -------------------------------------------------------------------

08/04/2016 08:07:53: Running on cntk-muc01 at 2016/08/04 08:07:53
08/04/2016 08:07:53: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=1]]  Train=[SGD=[epochSize=128]]  Train=[reader=[randomize=none]]  Train=[SGD=[minibatchSize=16]]  Test=[minibatchSize=16]  stderr=-



08/04/2016 08:07:53: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 08:07:53: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros="$ConfigDir$/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="$OutputDir$/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train=[
    action="train"
    modelPath="$ModelDir$/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="$ModelDir$/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

08/04/2016 08:07:53: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 08:07:53: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 08:07:53: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models"
ndlMacros="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt"
Proj32to64Filename = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt"
Train=[
    action="train"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

08/04/2016 08:07:53: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 08:07:53: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 04_ResNet_56.cntk:command=Train:Test
configparameters: 04_ResNet_56.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 04_ResNet_56.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
configparameters: 04_ResNet_56.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData
configparameters: 04_ResNet_56.cntk:deviceId=0
configparameters: 04_ResNet_56.cntk:imageLayout=cudnn
configparameters: 04_ResNet_56.cntk:initOnCPUOnly=true
configparameters: 04_ResNet_56.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models
configparameters: 04_ResNet_56.cntk:ndlMacros=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 04_ResNet_56.cntk:numMBsToShowResult=200
configparameters: 04_ResNet_56.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:parallelTrain=false
configparameters: 04_ResNet_56.cntk:precision=float
configparameters: 04_ResNet_56.cntk:prefetch=true
configparameters: 04_ResNet_56.cntk:Proj16to32Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/16to32.txt
configparameters: 04_ResNet_56.cntk:Proj32to64Filename=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/32to64.txt
configparameters: 04_ResNet_56.cntk:RootDir=.
configparameters: 04_ResNet_56.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:stderr=-
configparameters: 04_ResNet_56.cntk:Test=[
    action="test"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [minibatchSize=16]

configparameters: 04_ResNet_56.cntk:timestamping=true
configparameters: 04_ResNet_56.cntk:traceLevel=1
configparameters: 04_ResNet_56.cntk:Train=[
    action="train"
    modelPath="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\Miscellaneous\CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu\TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [SGD=[maxEpochs=1]] [SGD=[epochSize=128]] [reader=[randomize=none]] [SGD=[minibatchSize=16]]

08/04/2016 08:07:53: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 08:07:53: Commands: Train Test
08/04/2016 08:07:53: Precision = "float"
08/04/2016 08:07:53: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56
08/04/2016 08:07:53: CNTKCommandTrainInfo: Train : 1
08/04/2016 08:07:53: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

08/04/2016 08:07:53: ##############################################################################
08/04/2016 08:07:53: #                                                                            #
08/04/2016 08:07:53: # Action "train"                                                             #
08/04/2016 08:07:53: #                                                                            #
08/04/2016 08:07:53: ##############################################################################

08/04/2016 08:07:53: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/04/2016 08:07:54: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]

OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 08:07:56: Created model with 949 nodes on GPU 0.

08/04/2016 08:07:56: Training criterion node(s):
08/04/2016 08:07:56: 	CE = CrossEntropyWithSoftmax

08/04/2016 08:07:56: Evaluation criterion node(s):

08/04/2016 08:07:56: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[Err Gradient[1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] }
00000076AB06F9A0: {[features Value[32 x 32 x 3 x *]] }
00000076AC20BA30: {[conv1.c.c.isd Value[16 x 1]] }
00000076AC20BAD0: {[rn1_1.c1.c.c.b Value[16 x 1]] }
00000076AC20BFD0: {[conv1.c.c.b Value[16 x 1]] }
00000076AC20C1B0: {[rn1_1.c1.c.W Value[16 x 144]] }
00000076AC20C7F0: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
00000076AC20C9D0: {[conv1.c.c.m Value[16 x 1]] }
00000076AC20CCF0: {[conv1.c.W Value[16 x 27]] }
00000076AC20CED0: {[rn1_1.c1.c.c.m Value[16 x 1]] }
00000076AC20D0B0: {[labels Value[10 x *]] }
00000076AC20D3D0: {[conv1.c.c.sc Value[16 x 1]] }
00000076ACCD9CF0: {[rn1_2.c2.c.m Value[16 x 1]] }
00000076ACCDA0B0: {[rn1_1.c2.c.isd Value[16 x 1]] }
00000076ACCDA330: {[rn1_1.c2.c.sc Value[16 x 1]] }
00000076ACCDA470: {[rn1_1.c2.W Value[16 x 144]] }
00000076ACCDAA10: {[rn1_2.c2.c.isd Value[16 x 1]] }
00000076ACCDAB50: {[rn1_3.c1.c.c.b Value[16 x 1]] }
00000076ACCDAD30: {[rn1_2.c1.c.c.m Value[16 x 1]] }
00000076ACCDADD0: {[rn1_3.c1.c.W Value[16 x 144]] }
00000076ACCDAE70: {[rn1_1.c2.c.b Value[16 x 1]] }
00000076ACCDAF10: {[rn1_1.c2.c.m Value[16 x 1]] }
00000076ACCDB050: {[rn1_2.c1.c.W Value[16 x 144]] }
00000076ACCDB230: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
00000076ACCDB2D0: {[rn1_2.c2.c.b Value[16 x 1]] }
00000076ACCDB370: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
00000076ACCDB5F0: {[rn1_2.c2.c.sc Value[16 x 1]] }
00000076ACCDB7D0: {[rn1_2.c1.c.c.b Value[16 x 1]] }
00000076ACCDB870: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
00000076ACCDBA50: {[rn1_2.c2.W Value[16 x 144]] }
00000076ACE4B490: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
00000076ACE4B530: {[rn1_4.c2.W Value[16 x 144]] }
00000076ACE4B670: {[rn1_4.c2.c.b Value[16 x 1]] }
00000076ACE4B710: {[rn1_3.c2.c.isd Value[16 x 1]] }
00000076ACE4BAD0: {[rn1_4.c2.c.isd Value[16 x 1]] }
00000076ACE4BDF0: {[rn1_3.c2.W Value[16 x 144]] }
00000076ACE4BE90: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
00000076ACE4BFD0: {[rn1_4.c2.c.m Value[16 x 1]] }
00000076ACE4C390: {[rn1_3.c2.c.sc Value[16 x 1]] }
00000076ACE4C430: {[rn1_4.c1.c.c.b Value[16 x 1]] }
00000076ACE4C570: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
00000076ACE4C610: {[rn1_3.c1.c.c.m Value[16 x 1]] }
00000076ACE4C6B0: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
00000076ACE4C930: {[rn1_4.c1.c.c.m Value[16 x 1]] }
00000076ACE4CA70: {[rn1_4.c2.c.sc Value[16 x 1]] }
00000076ACE4CB10: {[rn1_4.c1.c.W Value[16 x 144]] }
00000076ACE4CF70: {[rn1_3.c2.c.m Value[16 x 1]] }
00000076ACE4D150: {[rn1_3.c2.c.b Value[16 x 1]] }
00000076ACE54AA0: {[rn1_6.c2.c.isd Value[16 x 1]] }
00000076ACE54C80: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
00000076ACE54D20: {[rn1_5.c2.c.b Value[16 x 1]] }
00000076ACE54F00: {[rn1_6.c2.c.b Value[16 x 1]] }
00000076ACE54FA0: {[rn1_6.c2.c.m Value[16 x 1]] }
00000076ACE55040: {[rn1_5.c2.c.m Value[16 x 1]] }
00000076ACE55360: {[rn1_6.c1.c.c.b Value[16 x 1]] }
00000076ACE554A0: {[rn1_6.c1.c.c.m Value[16 x 1]] }
00000076ACE55680: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
00000076ACE55720: {[rn1_5.c1.c.c.b Value[16 x 1]] }
00000076ACE557C0: {[rn1_5.c2.W Value[16 x 144]] }
00000076ACE55900: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
00000076ACE55FE0: {[rn1_5.c2.c.isd Value[16 x 1]] }
00000076ACE56080: {[rn1_6.c2.W Value[16 x 144]] }
00000076ACE56300: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
00000076ACE563A0: {[rn1_5.c1.c.c.m Value[16 x 1]] }
00000076ACE564E0: {[rn1_6.c1.c.W Value[16 x 144]] }
00000076ACE56580: {[rn1_6.c2.c.sc Value[16 x 1]] }
00000076ACE566C0: {[rn1_5.c2.c.sc Value[16 x 1]] }
00000076ACE56760: {[rn1_5.c1.c.W Value[16 x 144]] }
00000076ACE5BBD0: {[rn1_8.c2.W Value[16 x 144]] }
00000076ACE5BEF0: {[rn1_7.c1.c.c.m Value[16 x 1]] }
00000076ACE5C2B0: {[rn1_7.c1.c.W Value[16 x 144]] }
00000076ACE5C3F0: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
00000076ACE5C5D0: {[rn1_8.c1.c.c.m Value[16 x 1]] }
00000076ACE5C850: {[rn1_7.c2.W Value[16 x 144]] }
00000076ACE5C8F0: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
00000076ACE5CA30: {[rn1_8.c2.c.b Value[16 x 1]] }
00000076ACE5CB70: {[rn1_7.c1.c.c.b Value[16 x 1]] }
00000076ACE5CC10: {[rn1_8.c2.c.sc Value[16 x 1]] }
00000076ACE5CCB0: {[rn1_8.c1.c.W Value[16 x 144]] }
00000076ACE5D070: {[rn1_7.c2.c.m Value[16 x 1]] }
00000076ACE5D110: {[rn1_7.c2.c.b Value[16 x 1]] }
00000076ACE5D1B0: {[rn1_7.c2.c.isd Value[16 x 1]] }
00000076ACE5D2F0: {[rn1_8.c1.c.c.b Value[16 x 1]] }
00000076ACE5D570: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
00000076ACE5D6B0: {[rn1_7.c2.c.sc Value[16 x 1]] }
00000076ACE5D750: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
00000076B3C43DE0: {[rn1_9.c2.c.m Value[16 x 1]] }
00000076B3C43E80: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
00000076B3C43F20: {[rn1_9.c2.W Value[16 x 144]] }
00000076B3C441A0: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
00000076B3C44240: {[rn1_9.c1.c.c.b Value[16 x 1]] }
00000076B3C44420: {[rn1_9.c1.c.W Value[16 x 144]] }
00000076B3C446A0: {[rn1_10.c1.c.c.b Value[16 x 1]] }
00000076B3C44A60: {[rn1_9.c2.c.isd Value[16 x 1]] }
00000076B3C44CE0: {[rn1_8.c2.c.m Value[16 x 1]] }
00000076B3C44D80: {[rn1_9.c1.c.c.m Value[16 x 1]] }
00000076B3C44F60: {[rn1_10.c1.c.W Value[16 x 144]] }
00000076B3C451E0: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
00000076B3C453C0: {[rn1_10.c1.c.c.m Value[16 x 1]] }
00000076B3C45460: {[rn1_9.c2.c.b Value[16 x 1]] }
00000076B3C455A0: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
00000076B3C45820: {[rn1_8.c2.c.isd Value[16 x 1]] }
00000076B3C45960: {[rn1_9.c2.c.sc Value[16 x 1]] }
00000076B3C45BE0: {[rn1_10.c2.W Value[16 x 144]] }
00000076B3C572F0: {[rn1_10.c2.c.sc Value[16 x 1]] }
00000076B3C57390: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
00000076B3C57430: {[rn1_11.c2.c.sc Value[16 x 1]] }
00000076B3C577F0: {[rn1_12.c1.c.c.b Value[16 x 1]] }
00000076B3C57930: {[rn1_10.c2.c.isd Value[16 x 1]] }
00000076B3C57B10: {[rn1_11.c2.c.b Value[16 x 1]] }
00000076B3C57BB0: {[rn1_11.c2.c.m Value[16 x 1]] }
00000076B3C57C50: {[rn1_11.c1.c.c.m Value[16 x 1]] }
00000076B3C58010: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
00000076B3C583D0: {[rn1_10.c2.c.m Value[16 x 1]] }
00000076B3C58470: {[rn1_11.c2.W Value[16 x 144]] }
00000076B3C58510: {[rn1_12.c1.c.W Value[16 x 144]] }
00000076B3C58650: {[rn1_12.c1.c.c.m Value[16 x 1]] }
00000076B3C58790: {[rn1_11.c1.c.c.b Value[16 x 1]] }
00000076B3C58970: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
00000076B3C58B50: {[rn1_11.c1.c.W Value[16 x 144]] }
00000076B3C58BF0: {[rn1_11.c2.c.isd Value[16 x 1]] }
00000076B3C58E70: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
00000076B3C59050: {[rn1_10.c2.c.b Value[16 x 1]] }
00000076B3C73730: {[rn1_14.c1.c.c.b Value[16 x 1]] }
00000076B3C73910: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
00000076B3C73E10: {[rn1_13.c2.c.sc Value[16 x 1]] }
00000076B3C73F50: {[rn1_13.c1.c.c.m Value[16 x 1]] }
00000076B3C74090: {[rn1_12.c2.c.m Value[16 x 1]] }
00000076B3C74130: {[rn1_14.c1.c.W Value[16 x 144]] }
00000076B3C74270: {[rn1_14.c1.c.c.m Value[16 x 1]] }
00000076B3C74310: {[rn1_12.c2.c.b Value[16 x 1]] }
00000076B3C74450: {[rn1_13.c2.W Value[16 x 144]] }
00000076B3C74770: {[rn1_12.c2.c.isd Value[16 x 1]] }
00000076B3C74950: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
00000076B3C74B30: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
00000076B3C74DB0: {[rn1_13.c2.c.b Value[16 x 1]] }
00000076B3C74E50: {[rn1_13.c1.c.W Value[16 x 144]] }
00000076B3C75030: {[rn1_12.c2.W Value[16 x 144]] }
00000076B3C750D0: {[rn1_12.c2.c.sc Value[16 x 1]] }
00000076B3C75170: {[rn1_13.c2.c.m Value[16 x 1]] }
00000076B3C752B0: {[rn1_13.c2.c.isd Value[16 x 1]] }
00000076B3C75490: {[rn1_13.c1.c.c.b Value[16 x 1]] }
00000076B3C7B810: {[rn1_16.c1.c.W Value[16 x 144]] }
00000076B3C7B950: {[rn1_15.c2.c.b Value[16 x 1]] }
00000076B3C7B9F0: {[rn1_14.c2.c.b Value[16 x 1]] }
00000076B3C7BA90: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
00000076B3C7BD10: {[rn1_15.c1.c.W Value[16 x 144]] }
00000076B3C7BDB0: {[rn1_14.c2.W Value[16 x 144]] }
00000076B3C7C030: {[rn1_15.c2.c.sc Value[16 x 1]] }
00000076B3C7C210: {[rn1_15.c2.c.m Value[16 x 1]] }
00000076B3C7C5D0: {[rn1_16.c1.c.c.b Value[16 x 1]] }
00000076B3C7C670: {[rn1_14.c2.c.sc Value[16 x 1]] }
00000076B3C7C850: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
00000076B3C7CA30: {[rn1_15.c1.c.c.m Value[16 x 1]] }
00000076B3C7CF30: {[rn1_15.c2.c.isd Value[16 x 1]] }
00000076B3C7CFD0: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
00000076B3C7D250: {[rn1_15.c1.c.c.b Value[16 x 1]] }
00000076B3C7D2F0: {[rn1_14.c2.c.isd Value[16 x 1]] }
00000076B3C7D390: {[rn1_15.c2.W Value[16 x 144]] }
00000076B3C7D4D0: {[rn1_14.c2.c.m Value[16 x 1]] }
00000076B3C8B910: {[rn1_17.c2.W Value[16 x 144]] }
00000076B3C8B9B0: {[rn1_17.c2.c.sc Value[16 x 1]] }
00000076B3C8BA50: {[rn1_17.c2.c.b Value[16 x 1]] }
00000076B3C8BAF0: {[rn1_17.c1.c.c.m Value[16 x 1]] }
00000076B3C8BB90: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
00000076B3C8BD70: {[rn1_16.c2.W Value[16 x 144]] }
00000076B3C8BEB0: {[rn1_17.c2.c.m Value[16 x 1]] }
00000076B3C8C1D0: {[rn1_17.c2.c.isd Value[16 x 1]] }
00000076B3C8C310: {[rn1_16.c2.c.sc Value[16 x 1]] }
00000076B3C8C3B0: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
00000076B3C8C4F0: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
00000076B3C8C590: {[rn1_17.c1.c.W Value[16 x 144]] }
00000076B3C8C6D0: {[rn1_16.c1.c.c.m Value[16 x 1]] }
00000076B3C8C8B0: {[rn1_17.c1.c.c.b Value[16 x 1]] }
00000076B3C8CB30: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
00000076B3C8CC70: {[rn1_16.c2.c.b Value[16 x 1]] }
00000076B3C8CF90: {[rn1_16.c2.c.isd Value[16 x 1]] }
00000076B3C8D530: {[rn1_16.c2.c.m Value[16 x 1]] }
00000076B3C93D60: {[rn2_7.c1.c.W Value[32 x 288]] }
00000076B3C93FE0: {[rn2_5.c1.c.W Value[32 x 288]] }
00000076B3C94080: {[rn2_4.c2.c.m Value[32 x 1]] }
00000076B3C94300: {[rn2_5.c2.W Value[32 x 288]] }
00000076B3C94440: {[rn2_5.c2.c.b Value[32 x 1]] }
00000076B3C944E0: {[rn2_5.c2.c.sc Value[32 x 1]] }
00000076B3C948A0: {[rn2_5.c1.c.c.b Value[32 x 1]] }
00000076B3C94A80: {[rn2_5.c2.c.isd Value[32 x 1]] }
00000076B3C94BC0: {[rn2_5.c1.c.c.m Value[32 x 1]] }
00000076B3C94DA0: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
00000076B3C94EE0: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
00000076B3C94F80: {[rn2_6.c1.c.c.b Value[32 x 1]] }
00000076B3C95020: {[rn2_6.c2.W Value[32 x 288]] }
00000076B3C950C0: {[rn2_6.c2.c.b Value[32 x 1]] }
00000076B3C95200: {[rn2_5.c2.c.m Value[32 x 1]] }
00000076B3C952A0: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
00000076B3C953E0: {[rn2_6.c1.c.W Value[32 x 288]] }
00000076B3C95480: {[rn2_6.c1.c.c.m Value[32 x 1]] }
00000076B3C95660: {[rn2_4.c2.c.isd Value[32 x 1]] }
00000076B3C95D40: {[rn2_6.c2.c.sc Value[32 x 1]] }
00000076B3C95F20: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
00000076B3C96060: {[rn2_6.c2.c.m Value[32 x 1]] }
00000076B3C961A0: {[rn2_6.c2.c.isd Value[32 x 1]] }
00000076B3C966A0: {[rn1_18.c1.c.c.b Value[16 x 1]] }
00000076B3C96740: {[rn1_18.c2.W Value[16 x 144]] }
00000076B3C96920: {[rn2_1.c2.c.sc Value[32 x 1]] }
00000076B3C96B00: {[rn2_1_Wproj Value[32 x 16]] }
00000076B3C96C40: {[rn1_18.c2.c.b Value[16 x 1]] }
00000076B3C96D80: {[rn1_18.c2.c.m Value[16 x 1]] }
00000076B3C97000: {[rn2_1.c2.c.m Value[32 x 1]] }
00000076B3C97280: {[rn1_18.c2.c.isd Value[16 x 1]] }
00000076B3C975A0: {[rn2_1.c2.c.isd Value[32 x 1]] }
00000076B3C97640: {[rn2_1.c2.W Value[32 x 288]] }
00000076B3C97820: {[rn2_1.c_proj.b Value[32 x 1]] }
00000076B3C97960: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
00000076B3C97AA0: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
00000076B3C97DC0: {[rn2_1.c_proj.sc Value[32 x 1]] }
00000076B3C97F00: {[rn1_18.c2.c.sc Value[16 x 1]] }
00000076B3C97FA0: {[rn2_1.c1.c.c.b Value[32 x 1]] }
00000076B3C980E0: {[rn2_1.c_proj.m Value[32 x 1]] }
00000076B3C98220: {[rn2_1.c_proj.isd Value[32 x 1]] }
00000076B3C982C0: {[rn2_1.c1.c.W Value[32 x 144]] }
00000076B3C98400: {[rn2_1.c2.c.b Value[32 x 1]] }
00000076B3C98680: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
00000076B3C98720: {[rn1_18.c1.c.W Value[16 x 144]] }
00000076B3C98860: {[rn1_18.c1.c.c.m Value[16 x 1]] }
00000076B3C98900: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
00000076B3C98AE0: {[rn2_1.c1.c.c.m Value[32 x 1]] }
00000076B3C98CC0: {[rn2_4.c1.c.c.m Value[32 x 1]] }
00000076B3C99080: {[rn2_2.c1.c.c.b Value[32 x 1]] }
00000076B3C99260: {[rn2_3.c2.c.b Value[32 x 1]] }
00000076B3C99300: {[rn2_3.c2.c.sc Value[32 x 1]] }
00000076B3C994E0: {[rn2_2.c2.c.b Value[32 x 1]] }
00000076B3C99580: {[rn2_2.c1.c.W Value[32 x 288]] }
00000076B3C99620: {[rn2_2.c2.c.isd Value[32 x 1]] }
00000076B3C996C0: {[rn2_2.c2.c.m Value[32 x 1]] }
00000076B3C998A0: {[rn2_3.c1.c.c.b Value[32 x 1]] }
00000076B3C99940: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
00000076B3C99A80: {[rn2_3.c2.c.isd Value[32 x 1]] }
00000076B3C99BC0: {[rn2_4.c1.c.c.b Value[32 x 1]] }
00000076B3C99C60: {[rn2_3.c1.c.W Value[32 x 288]] }
00000076B3C99D00: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
00000076B3C99E40: {[rn2_2.c2.c.sc Value[32 x 1]] }
00000076B3C9A480: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
00000076B3C9A840: {[rn2_3.c1.c.c.m Value[32 x 1]] }
00000076B3C9A8E0: {[rn2_2.c1.c.c.m Value[32 x 1]] }
00000076B3C9AB60: {[rn2_2.c2.W Value[32 x 288]] }
00000076B3C9ADE0: {[rn2_3.c2.c.m Value[32 x 1]] }
00000076B3C9AF20: {[rn2_4.c1.c.W Value[32 x 288]] }
00000076B3C9B060: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
00000076B3C9B1A0: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
00000076B3C9B240: {[rn2_3.c2.W Value[32 x 288]] }
00000076B3C9B4C0: {[rn2_4.c2.W Value[32 x 288]] }
00000076B3C9B6A0: {[rn2_4.c2.c.b Value[32 x 1]] }
00000076B3C9B7E0: {[rn2_4.c2.c.sc Value[32 x 1]] }
00000076B3C9B880: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
00000076B3CFB670: {[rn2_8.c2.c.isd Value[32 x 1]] }
00000076B3CFB710: {[rn2_7.c2.W Value[32 x 288]] }
00000076B3CFB850: {[rn2_7.c2.c.sc Value[32 x 1]] }
00000076B3CFB8F0: {[rn2_7.c2.c.isd Value[32 x 1]] }
00000076B3CFBD50: {[rn2_7.c2.c.b Value[32 x 1]] }
00000076B3CFBE90: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
00000076B3CFBFD0: {[rn2_9.c1.c.W Value[32 x 288]] }
00000076B3CFC110: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
00000076B3CFC250: {[rn2_9.c1.c.c.b Value[32 x 1]] }
00000076B3CFC610: {[rn2_7.c1.c.c.m Value[32 x 1]] }
00000076B3CFC6B0: {[rn2_8.c2.c.b Value[32 x 1]] }
00000076B3CFC7F0: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
00000076B3CFC890: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
00000076B3CFCBB0: {[rn2_8.c2.c.sc Value[32 x 1]] }
00000076B3CFCCF0: {[rn2_9.c1.c.c.m Value[32 x 1]] }
00000076B3CFD1F0: {[rn2_8.c2.c.m Value[32 x 1]] }
00000076B3CFD330: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
00000076B3CFD3D0: {[rn2_8.c1.c.c.b Value[32 x 1]] }
00000076B3CFD5B0: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
00000076B3CFD650: {[rn2_7.c2.c.m Value[32 x 1]] }
00000076B3CFD830: {[rn2_8.c2.W Value[32 x 288]] }
00000076B3CFDA10: {[rn2_8.c1.c.c.m Value[32 x 1]] }
00000076B3CFDAB0: {[rn2_8.c1.c.W Value[32 x 288]] }
00000076B3CFDBF0: {[rn2_7.c1.c.c.b Value[32 x 1]] }
00000076B3CFDDD0: {[rn2_11.c2.c.isd Value[32 x 1]] }
00000076B3CFE050: {[rn2_11.c1.c.W Value[32 x 288]] }
00000076B3CFE230: {[rn2_9.c2.c.sc Value[32 x 1]] }
00000076B3CFE4B0: {[rn2_10.c2.c.b Value[32 x 1]] }
00000076B3CFE690: {[rn2_9.c2.c.b Value[32 x 1]] }
00000076B3CFEA50: {[rn2_11.c2.W Value[32 x 288]] }
00000076B3CFEAF0: {[rn2_11.c2.c.sc Value[32 x 1]] }
00000076B3CFEC30: {[rn2_11.c1.c.c.m Value[32 x 1]] }
00000076B3CFED70: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
00000076B3CFEE10: {[rn2_9.c2.c.m Value[32 x 1]] }
00000076B3CFEEB0: {[rn2_10.c2.c.m Value[32 x 1]] }
00000076B3CFEF50: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
00000076B3CFF270: {[rn2_10.c1.c.W Value[32 x 288]] }
00000076B3CFF630: {[rn2_10.c1.c.c.b Value[32 x 1]] }
00000076B3CFF770: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
00000076B3CFF9F0: {[rn2_10.c1.c.c.m Value[32 x 1]] }
00000076B3CFFA90: {[rn2_11.c1.c.c.b Value[32 x 1]] }
00000076B3CFFBD0: {[rn2_9.c2.W Value[32 x 288]] }
00000076B3CFFDB0: {[rn2_11.c2.c.b Value[32 x 1]] }
00000076B3CFFE50: {[rn2_10.c2.c.isd Value[32 x 1]] }
00000076B3CFFF90: {[rn2_10.c2.W Value[32 x 288]] }
00000076B3D000D0: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
00000076B3D00210: {[rn2_9.c2.c.isd Value[32 x 1]] }
00000076B3D00350: {[rn2_10.c2.c.sc Value[32 x 1]] }
00000076B3D00490: {[rn2_11.c2.c.m Value[32 x 1]] }
00000076B3D00670: {[rn2_13.c1.c.W Value[32 x 288]] }
00000076B3D00850: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
00000076B3D00AD0: {[rn2_13.c2.c.isd Value[32 x 1]] }
00000076B3D00C10: {[rn2_12.c1.c.c.m Value[32 x 1]] }
00000076B3D00D50: {[rn2_13.c2.c.sc Value[32 x 1]] }
00000076B3D00E90: {[rn2_14.c1.c.W Value[32 x 288]] }
00000076B3D00F30: {[rn2_14.c1.c.c.b Value[32 x 1]] }
00000076B3D00FD0: {[rn2_13.c1.c.c.b Value[32 x 1]] }
00000076B3D01110: {[rn2_12.c2.c.b Value[32 x 1]] }
00000076B3D01250: {[rn2_13.c2.c.m Value[32 x 1]] }
00000076B3D01570: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
00000076B3D01610: {[rn2_12.c2.W Value[32 x 288]] }
00000076B3D017F0: {[rn2_12.c2.c.sc Value[32 x 1]] }
00000076B3D01890: {[rn2_13.c1.c.c.m Value[32 x 1]] }
00000076B3D01ED0: {[rn2_12.c2.c.isd Value[32 x 1]] }
00000076B3D02010: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
00000076B3D021F0: {[rn2_12.c2.c.m Value[32 x 1]] }
00000076B3D02510: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
00000076B3D025B0: {[rn2_13.c2.W Value[32 x 288]] }
00000076B3D02650: {[rn2_12.c1.c.c.b Value[32 x 1]] }
00000076B3D02790: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
00000076B3D02A10: {[rn2_12.c1.c.W Value[32 x 288]] }
00000076B3D02AB0: {[rn2_13.c2.c.b Value[32 x 1]] }
00000076B3D02F10: {[rn2_14.c2.W Value[32 x 288]] }
00000076B3D032D0: {[rn2_14.c2.c.b Value[32 x 1]] }
00000076B3D03370: {[rn2_14.c1.c.c.m Value[32 x 1]] }
00000076B3D03410: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
00000076B3D410C0: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
00000076B3D41200: {[rn2_18.c1.c.c.m Value[32 x 1]] }
00000076B3D412A0: {[rn2_17.c1.c.W Value[32 x 288]] }
00000076B3D41340: {[rn2_17.c1.c.c.b Value[32 x 1]] }
00000076B3D413E0: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
00000076B3D41520: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
00000076B3D41840: {[rn2_16.c1.c.c.m Value[32 x 1]] }
00000076B3D41C00: {[rn2_17.c2.c.b Value[32 x 1]] }
00000076B3D41E80: {[rn2_16.c2.c.sc Value[32 x 1]] }
00000076B3D41F20: {[rn2_16.c2.c.m Value[32 x 1]] }
00000076B3D41FC0: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
00000076B3D42100: {[rn2_16.c2.W Value[32 x 288]] }
00000076B3D42560: {[rn2_17.c2.c.m Value[32 x 1]] }
00000076B3D42880: {[rn2_18.c1.c.W Value[32 x 288]] }
00000076B3D42920: {[rn2_16.c2.c.b Value[32 x 1]] }
00000076B3D42B00: {[rn2_16.c2.c.isd Value[32 x 1]] }
00000076B3D42BA0: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
00000076B3D42CE0: {[rn2_18.c1.c.c.b Value[32 x 1]] }
00000076B3D42D80: {[rn2_17.c2.W Value[32 x 288]] }
00000076B3D42EC0: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
00000076B3D430A0: {[rn2_16.c1.c.c.b Value[32 x 1]] }
00000076B3D43140: {[rn2_16.c1.c.W Value[32 x 288]] }
00000076B3D43320: {[rn2_17.c1.c.c.m Value[32 x 1]] }
00000076B3D43500: {[rn2_17.c2.c.sc Value[32 x 1]] }
00000076B3D43820: {[rn2_17.c2.c.isd Value[32 x 1]] }
00000076B3D43960: {[rn2_15.c1.c.c.b Value[32 x 1]] }
00000076B3D43A00: {[rn2_15.c2.W Value[32 x 288]] }
00000076B3D43B40: {[rn2_15.c1.c.c.m Value[32 x 1]] }
00000076B3D43DC0: {[rn2_14.c2.c.isd Value[32 x 1]] }
00000076B3D43F00: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
00000076B3D44180: {[rn2_14.c2.c.m Value[32 x 1]] }
00000076B3D442C0: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
00000076B3D44360: {[rn2_15.c2.c.sc Value[32 x 1]] }
00000076B3D44540: {[rn2_14.c2.c.sc Value[32 x 1]] }
00000076B3D445E0: {[rn2_15.c2.c.b Value[32 x 1]] }
00000076B3D44860: {[rn2_15.c2.c.isd Value[32 x 1]] }
00000076B3D44CC0: {[rn2_15.c1.c.W Value[32 x 288]] }
00000076B3D44D60: {[rn2_15.c2.c.m Value[32 x 1]] }
00000076B3D6B650: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
00000076B3D6B6F0: {[rn3_1_Wproj Value[64 x 32]] }
00000076B3D6B830: {[rn3_1.c1.c.c.b Value[64 x 1]] }
00000076B3D6B8D0: {[rn3_1.c2.c.b Value[64 x 1]] }
00000076B3D6B970: {[rn3_1.c2.c.isd Value[64 x 1]] }
00000076B3D6C0F0: {[rn3_1.c_proj.b Value[64 x 1]] }
00000076B3D6C190: {[rn3_2.c1.c.W Value[64 x 576]] }
00000076B3D6C2D0: {[rn3_1.c1.c.c.m Value[64 x 1]] }
00000076B3D6C370: {[rn3_2.c2.W Value[64 x 576]] }
00000076B3D6C410: {[rn3_2.c2.c.b Value[64 x 1]] }
00000076B3D6C550: {[rn3_2.c2.c.sc Value[64 x 1]] }
00000076B3D6C690: {[rn3_2.c2.c.m Value[64 x 1]] }
00000076B3D6C7D0: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
00000076B3D6C910: {[rn3_1.c2.W Value[64 x 576]] }
00000076B3D6D090: {[rn3_1.c_proj.isd Value[64 x 1]] }
00000076B3D6D130: {[rn3_1.c1.c.W Value[64 x 288]] }
00000076B3D6D270: {[rn3_1.c_proj.sc Value[64 x 1]] }
00000076B3D6D310: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
00000076B3D6D4F0: {[rn3_1.c2.c.m Value[64 x 1]] }
00000076B3D6D590: {[rn3_1.c_proj.m Value[64 x 1]] }
00000076B3D6D630: {[rn3_1.c2.c.sc Value[64 x 1]] }
00000076B3D6D9F0: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
00000076B3D6DA90: {[rn3_2.c1.c.c.b Value[64 x 1]] }
00000076B3D6DB30: {[rn3_2.c1.c.c.m Value[64 x 1]] }
00000076B3D6DDB0: {[rn3_3.c1.c.c.m Value[64 x 1]] }
00000076B3D6DEF0: {[rn3_4.c2.c.sc Value[64 x 1]] }
00000076B3D6DF90: {[rn3_4.c2.c.isd Value[64 x 1]] }
00000076B3D6E350: {[rn3_4.c1.c.W Value[64 x 576]] }
00000076B3D6E490: {[rn3_3.c2.W Value[64 x 576]] }
00000076B3D6E5D0: {[rn3_3.c1.c.c.b Value[64 x 1]] }
00000076B3D6E7B0: {[rn3_4.c2.c.b Value[64 x 1]] }
00000076B3D6E850: {[rn3_5.c1.c.c.b Value[64 x 1]] }
00000076B3D6E8F0: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
00000076B3D6EA30: {[rn3_4.c1.c.c.b Value[64 x 1]] }
00000076B3D6EC10: {[rn3_4.c2.c.m Value[64 x 1]] }
00000076B3D6EDF0: {[rn3_3.c2.c.b Value[64 x 1]] }
00000076B3D6F070: {[rn3_2.c2.c.isd Value[64 x 1]] }
00000076B3D6F250: {[rn3_4.c1.c.c.m Value[64 x 1]] }
00000076B3D6F390: {[rn3_3.c2.c.isd Value[64 x 1]] }
00000076B3D6F6B0: {[rn3_3.c1.c.W Value[64 x 576]] }
00000076B3D6F890: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
00000076B3D6FB10: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
00000076B3D6FC50: {[rn3_4.c2.W Value[64 x 576]] }
00000076B3D6FD90: {[rn3_3.c2.c.sc Value[64 x 1]] }
00000076B3D700B0: {[rn3_3.c2.c.m Value[64 x 1]] }
00000076B3D70290: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
00000076B3D70470: {[rn3_5.c1.c.W Value[64 x 576]] }
00000076B3D70510: {[rn3_6.c2.W Value[64 x 576]] }
00000076B3D70AB0: {[rn3_5.c2.c.b Value[64 x 1]] }
00000076B3D70E70: {[rn3_5.c2.W Value[64 x 576]] }
00000076B3D70FB0: {[rn3_5.c1.c.c.m Value[64 x 1]] }
00000076B3D71230: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
00000076B3D712D0: {[rn3_6.c2.c.isd Value[64 x 1]] }
00000076B3D71410: {[rn3_7.c1.c.W Value[64 x 576]] }
00000076B3D714B0: {[rn3_7.c1.c.c.b Value[64 x 1]] }
00000076B3D71690: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
00000076B3D71730: {[rn3_7.c1.c.c.m Value[64 x 1]] }
00000076B3D71870: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
00000076B3D71AF0: {[rn3_6.c2.c.b Value[64 x 1]] }
00000076B3D71EB0: {[rn3_6.c2.c.sc Value[64 x 1]] }
00000076B3D71FF0: {[rn3_6.c2.c.m Value[64 x 1]] }
00000076B3D72130: {[rn3_5.c2.c.sc Value[64 x 1]] }
00000076B3D72310: {[rn3_6.c1.c.c.m Value[64 x 1]] }
00000076B3D724F0: {[rn3_5.c2.c.isd Value[64 x 1]] }
00000076B3D726D0: {[rn3_6.c1.c.W Value[64 x 576]] }
00000076B3D72770: {[rn3_6.c1.c.c.b Value[64 x 1]] }
00000076B3D72810: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
00000076B3D728B0: {[rn3_5.c2.c.m Value[64 x 1]] }
00000076B3D72A90: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
00000076B3D72BD0: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
00000076B3D72D10: {[rn2_18.c2.W Value[32 x 288]] }
00000076B3D72DB0: {[rn2_18.c2.c.m Value[32 x 1]] }
00000076B3D72E50: {[rn2_18.c2.c.sc Value[32 x 1]] }
00000076B3D73030: {[rn2_18.c2.c.b Value[32 x 1]] }
00000076B3D73350: {[rn2_18.c2.c.isd Value[32 x 1]] }
00000076B3D9D6E0: {[rn3_11.c1.c.c.b Value[64 x 1]] }
00000076B3D9D780: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
00000076B3D9D960: {[rn3_10.c2.c.sc Value[64 x 1]] }
00000076B3D9DAA0: {[rn3_11.c2.W Value[64 x 576]] }
00000076B3D9DB40: {[rn3_11.c2.c.sc Value[64 x 1]] }
00000076B3D9DC80: {[rn3_12.c1.c.W Value[64 x 576]] }
00000076B3D9DE60: {[rn3_10.c2.c.b Value[64 x 1]] }
00000076B3D9DF00: {[rn3_10.c2.W Value[64 x 576]] }
00000076B3D9E220: {[rn3_10.c2.c.isd Value[64 x 1]] }
00000076B3D9E2C0: {[rn3_11.c1.c.W Value[64 x 576]] }
00000076B3D9E400: {[rn3_12.c1.c.c.m Value[64 x 1]] }
00000076B3D9E540: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
00000076B3D9E7C0: {[rn3_11.c2.c.isd Value[64 x 1]] }
00000076B3D9EAE0: {[rn3_12.c2.W Value[64 x 576]] }
00000076B3D9ECC0: {[rn3_12.c2.c.b Value[64 x 1]] }
00000076B3D9ED60: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
00000076B3D9EEA0: {[rn3_12.c1.c.c.b Value[64 x 1]] }
00000076B3D9EF40: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
00000076B3D9F080: {[rn3_11.c1.c.c.m Value[64 x 1]] }
00000076B3D9F1C0: {[rn3_12.c2.c.sc Value[64 x 1]] }
00000076B3D9F260: {[rn3_10.c2.c.m Value[64 x 1]] }
00000076B3D9F3A0: {[rn3_11.c2.c.b Value[64 x 1]] }
00000076B3D9F440: {[rn3_11.c2.c.m Value[64 x 1]] }
00000076B3D9FB20: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
00000076B3DA0020: {[rn3_13.c1.c.c.m Value[64 x 1]] }
00000076B3DA0160: {[rn3_13.c1.c.W Value[64 x 576]] }
00000076B3DA02A0: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
00000076B3DA0520: {[rn3_12.c2.c.isd Value[64 x 1]] }
00000076B3DA0660: {[rn3_13.c2.W Value[64 x 576]] }
00000076B3DA0700: {[rn3_14.c1.c.c.b Value[64 x 1]] }
00000076B3DA07A0: {[rn3_14.c2.W Value[64 x 576]] }
00000076B3DA0980: {[rn3_13.c2.c.isd Value[64 x 1]] }
00000076B3DA0AC0: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
00000076B3DA0C00: {[rn3_14.c1.c.W Value[64 x 576]] }
00000076B3DA0E80: {[rn3_13.c2.c.sc Value[64 x 1]] }
00000076B3DA0FC0: {[rn3_14.c2.c.sc Value[64 x 1]] }
00000076B3DA1060: {[rn3_14.c2.c.isd Value[64 x 1]] }
00000076B3DA1420: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
00000076B3DA14C0: {[rn3_15.c1.c.W Value[64 x 576]] }
00000076B3DA17E0: {[rn3_13.c1.c.c.b Value[64 x 1]] }
00000076B3DA1920: {[rn3_14.c1.c.c.m Value[64 x 1]] }
00000076B3DA19C0: {[rn3_12.c2.c.m Value[64 x 1]] }
00000076B3DA1A60: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
00000076B3DA1BA0: {[rn3_13.c2.c.b Value[64 x 1]] }
00000076B3DA20A0: {[rn3_14.c2.c.b Value[64 x 1]] }
00000076B3DA2280: {[rn3_14.c2.c.m Value[64 x 1]] }
00000076B3DA2500: {[rn3_13.c2.c.m Value[64 x 1]] }
00000076B3DA2640: {[rn3_7.c2.c.sc Value[64 x 1]] }
00000076B3DA26E0: {[rn3_7.c2.W Value[64 x 576]] }
00000076B3DA2820: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
00000076B3DA28C0: {[rn3_8.c2.c.isd Value[64 x 1]] }
00000076B3DA2A00: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
00000076B3DA2E60: {[rn3_9.c2.W Value[64 x 576]] }
00000076B3DA3040: {[rn3_9.c2.c.sc Value[64 x 1]] }
00000076B3DA3180: {[rn3_9.c2.c.m Value[64 x 1]] }
00000076B3DA32C0: {[rn3_9.c2.c.isd Value[64 x 1]] }
00000076B3DA3360: {[rn3_8.c1.c.W Value[64 x 576]] }
00000076B3DA3540: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
00000076B3DA35E0: {[rn3_7.c2.c.b Value[64 x 1]] }
00000076B3DA3860: {[rn3_8.c1.c.c.b Value[64 x 1]] }
00000076B3DA3900: {[rn3_8.c1.c.c.m Value[64 x 1]] }
00000076B3DA3AE0: {[rn3_8.c2.W Value[64 x 576]] }
00000076B3DA3C20: {[rn3_8.c2.c.m Value[64 x 1]] }
00000076B3DA3F40: {[rn3_7.c2.c.m Value[64 x 1]] }
00000076B3DA3FE0: {[rn3_9.c1.c.W Value[64 x 576]] }
00000076B3DA4080: {[rn3_8.c2.c.sc Value[64 x 1]] }
00000076B3DA4120: {[rn3_8.c2.c.b Value[64 x 1]] }
00000076B3DA41C0: {[rn3_9.c1.c.c.b Value[64 x 1]] }
00000076B3DA4300: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
00000076B3DA43A0: {[rn3_7.c2.c.isd Value[64 x 1]] }
00000076B3DA49E0: {[rn3_9.c2.c.b Value[64 x 1]] }
00000076B3DA4C60: {[rn3_9.c1.c.c.m Value[64 x 1]] }
00000076B3DA4DA0: {[rn3_10.c1.c.c.m Value[64 x 1]] }
00000076B3DA4EE0: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
00000076B3DA5160: {[rn3_10.c1.c.W Value[64 x 576]] }
00000076B3DA5340: {[rn3_10.c1.c.c.b Value[64 x 1]] }
00000076B3E49400: {[rn3_18.c2.W Value[64 x 576]] }
00000076B3E49FE0: {[rn3_18.c2.c.m Value[64 x 1]] }
00000076B3E4A580: {[rn3_18.c2.c.b Value[64 x 1]] }
00000076B3E4AA80: {[rn3_18.c2.c.isd Value[64 x 1]] }
00000076B3E4AE40: {[rn3_18.c2.c.sc Value[64 x 1]] }
00000076B3E4AF80: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
00000076B3E4B3E0: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
00000076B3E4B840: {[OutputNodes.b Value[10]] }
00000076B3E55AC0: {[rn3_16.c2.c.b Value[64 x 1]] }
00000076B3E55CA0: {[rn3_15.c1.c.c.m Value[64 x 1]] }
00000076B3E55DE0: {[rn3_15.c2.c.isd Value[64 x 1]] }
00000076B3E55F20: {[rn3_16.c1.c.W Value[64 x 576]] }
00000076B3E56060: {[rn3_17.c1.c.c.b Value[64 x 1]] }
00000076B3E56240: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
00000076B3E56380: {[rn3_16.c2.c.sc Value[64 x 1]] }
00000076B3E56420: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
00000076B3E56880: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
00000076B3E569C0: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
00000076B3E56A60: {[rn3_15.c1.c.c.b Value[64 x 1]] }
00000076B3E56C40: {[rn3_16.c1.c.c.b Value[64 x 1]] }
00000076B3E56EC0: {[rn3_15.c2.c.b Value[64 x 1]] }
00000076B3E57000: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
00000076B3E57460: {[rn3_16.c2.c.m Value[64 x 1]] }
00000076B3E57500: {[rn3_16.c2.c.isd Value[64 x 1]] }
00000076B3E57820: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
00000076B3E57960: {[rn3_17.c1.c.W Value[64 x 576]] }
00000076B3E57AA0: {[rn3_15.c2.c.m Value[64 x 1]] }
00000076B3E57B40: {[rn3_17.c1.c.c.m Value[64 x 1]] }
00000076B3E57C80: {[rn3_16.c1.c.c.m Value[64 x 1]] }
00000076B3E57D20: {[rn3_15.c2.c.sc Value[64 x 1]] }
00000076B3E57E60: {[rn3_15.c2.W Value[64 x 576]] }
00000076B3E57F00: {[rn3_16.c2.W Value[64 x 576]] }
00000076B3E580E0: {[rn3_18.c1.c.c.m Value[64 x 1]] }
00000076B3E582C0: {[rn3_17.c2.c.b Value[64 x 1]] }
00000076B3E58400: {[rn3_17.c2.c.m Value[64 x 1]] }
00000076B3E58860: {[rn3_17.c2.W Value[64 x 576]] }
00000076B3E58900: {[rn3_17.c2.c.isd Value[64 x 1]] }
00000076B3E58AE0: {[rn3_18.c1.c.c.b Value[64 x 1]] }
00000076B3E58B80: {[rn3_17.c2.c.sc Value[64 x 1]] }
00000076B3E58E00: {[rn3_18.c1.c.W Value[64 x 576]] }
00000076B3E58EA0: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
00000076BE2D88C0: {[rn2_3.c1.c.c.b Gradient[32 x 1]] }
00000076BE2D8960: {[rn2_3.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Value[16 x 16 x 32 x *]] }
00000076BE2D8AA0: {[rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Gradient[16 x 16 x 32 x *]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.c1.y Value[16 x 16 x 32 x *]] }
00000076BE2D8B40: {[rn2_6.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Value[16 x 16 x 32 x *]] }
00000076BE2D8BE0: {[rn2_4.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Value[16 x 16 x 32 x *]] }
00000076BE2D8C80: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076BE2D8DC0: {[rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.p Gradient[16 x 16 x 32 x *]] }
00000076BE2D8E60: {[rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076BE2D8F00: {[rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.p Value[16 x 16 x 32 x *]] }
00000076BE2D8FA0: {[rn2_5.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Value[16 x 16 x 32 x *]] }
00000076BE2D9040: {[rn2_5.c2.W Gradient[32 x 288]] [rn2_6.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076BE2D90E0: {[rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.p Value[16 x 16 x 32 x *]] }
00000076BE2D9180: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076BE2D9220: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *]] }
00000076BE2D92C0: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *]] }
00000076BE2D9360: {[rn2_3.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Value[16 x 16 x 32 x *]] }
00000076BE2D9400: {[rn2_5.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Value[16 x 16 x 32 x *]] }
00000076BE2D94A0: {[rn2_6.c1.c.c.b Gradient[32 x 1]] }
00000076BE2D95E0: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *]] }
00000076BE2D9680: {[rn2_4.c1.c.c.b Gradient[32 x 1]] }
00000076BE2D9720: {[rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.p Value[16 x 16 x 32 x *]] }
00000076BE2D97C0: {[rn2_5.c1.c.c.b Gradient[32 x 1]] }
00000076BE2D9900: {[rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Gradient[16 x 16 x 32 x *]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.c1.y Value[16 x 16 x 32 x *]] }
00000076BE2D99A0: {[rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.p Gradient[16 x 16 x 32 x *]] }
00000076BE2D9AE0: {[rn2_4.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Value[16 x 16 x 32 x *]] }
00000076BE2D9B80: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *]] }
00000076BE2D9C20: {[rn2_6.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Value[16 x 16 x 32 x *]] }
00000076BE2D9CC0: {[rn2_6.c2.W Gradient[32 x 288]] [rn2_7.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076BE2D9E00: {[rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.p Gradient[16 x 16 x 32 x *]] }
00000076BE2D9EA0: {[rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076BE2D9FE0: {[rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076BE2DA120: {[rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.p Gradient[16 x 16 x 32 x *]] }
00000076BE2DA1C0: {[rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.p Value[16 x 16 x 32 x *]] }
00000076BE2DA260: {[rn2_7.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Value[16 x 16 x 32 x *]] }
00000076BE2DA300: {[rn2_7.c2.W Gradient[32 x 288]] [rn2_8.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076BE2DA3A0: {[rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Gradient[16 x 16 x 32 x *]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.c1.y Value[16 x 16 x 32 x *]] }
00000076BE2DA440: {[rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.p Gradient[16 x 16 x 32 x *]] }
00000076BE2DA4E0: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076BE2DA6C0: {[rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Gradient[16 x 16 x 32 x *]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.c1.y Value[16 x 16 x 32 x *]] }
00000076BE2DA760: {[rn2_7.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Value[16 x 16 x 32 x *]] }
00000076BE2DA800: {[rn2_7.c1.c.c.b Gradient[32 x 1]] }
00000076BE2DA8A0: {[rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076BE2DA940: {[rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076BE2DA9E0: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *]] }
00000076BE2DAA80: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076BE2DAB20: {[rn2_3.c2.W Gradient[32 x 288]] [rn2_4.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076BE2DAC60: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076BE2DAE40: {[rn2_4.c2.W Gradient[32 x 288]] [rn2_5.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076BE2DAEE0: {[rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.p Value[16 x 16 x 32 x *]] }
00000076BE2DAF80: {[rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Gradient[16 x 16 x 32 x *]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.c1.y Value[16 x 16 x 32 x *]] }
00000076BE2DB200: {[Err Value[1]] }
00000076BE2DB2A0: {[CE Value[1]] }
00000076BE2DBE80: {[OutputNodes.z Value[10 x *]] }
00000076BE2DBF20: {[conv1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DD8C0: {[rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2DDA00: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DDAA0: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DDB40: {[conv1.c.W Gradient[16 x 27]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2DDBE0: {[rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.p Value[32 x 32 x 16 x *]] }
00000076BE2DDC80: {[conv1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2DDDC0: {[rn1_1.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DDE60: {[rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.p Value[32 x 32 x 16 x *]] }
00000076BE2DDF00: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DDFA0: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DE220: {[conv1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DE2C0: {[rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Gradient[32 x 32 x 16 x *]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2DE360: {[rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2DE4A0: {[rn1_3.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Value[32 x 32 x 16 x *]] }
00000076BE2DE540: {[rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.p Gradient[32 x 32 x 16 x *]] }
00000076BE2DE5E0: {[rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Gradient[32 x 32 x 16 x *]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2DE680: {[conv1.c.c.c Gradient[32 x 32 x 16 x *]] [conv1.y Value[32 x 32 x 16 x *]] }
00000076BE2DE720: {[rn1_1.c1.c.c.b Gradient[16 x 1]] }
00000076BE2DE7C0: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[32 x 32 x 16 x *]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2DE900: {[rn1_1.c2.W Gradient[16 x 144]] [rn1_2.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DE9A0: {[rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2DEA40: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DEAE0: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DEB80: {[rn1_3.c2.W Gradient[16 x 144]] [rn1_4.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DEC20: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DED60: {[rn1_2.c2.W Gradient[16 x 144]] [rn1_3.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DEEA0: {[rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.p Value[32 x 32 x 16 x *]] }
00000076BE2DEFE0: {[rn1_3.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DF080: {[rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2DF1C0: {[rn1_4.c1.c.c.b Gradient[16 x 1]] }
00000076BE2DF260: {[rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.p Value[32 x 32 x 16 x *]] }
00000076BE2DF300: {[rn1_4.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Value[32 x 32 x 16 x *]] }
00000076BE2DF440: {[rn1_4.c2.W Gradient[16 x 144]] [rn1_5.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DF4E0: {[rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.p Gradient[32 x 32 x 16 x *]] }
00000076BE2DF620: {[rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.p Gradient[32 x 32 x 16 x *]] }
00000076BE2DF8A0: {[conv1.c.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DF940: {[rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Gradient[32 x 32 x 16 x *]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2DF9E0: {[rn1_4.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DFA80: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DFB20: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2DFBC0: {[rn1_2.c1.c.c.b Gradient[16 x 1]] }
00000076BE2DFD00: {[rn1_2.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Value[32 x 32 x 16 x *]] }
00000076BE2DFDA0: {[rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.p Gradient[32 x 32 x 16 x *]] }
00000076BE2DFE40: {[rn1_2.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2DFEE0: {[rn1_1.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Value[32 x 32 x 16 x *]] }
00000076BE2DFF80: {[rn1_3.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E0020: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E00C0: {[rn1_6.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E0160: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E0200: {[rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E02A0: {[rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E03E0: {[rn1_6.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E0480: {[rn1_5.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Value[32 x 32 x 16 x *]] }
00000076BE2E05C0: {[rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Gradient[32 x 32 x 16 x *]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E0660: {[rn1_7.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E0700: {[rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E07A0: {[rn1_5.c2.W Gradient[16 x 144]] [rn1_6.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E08E0: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E0980: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E0A20: {[rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E0B60: {[rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Gradient[32 x 32 x 16 x *]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E0C00: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E0CA0: {[rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.p Value[32 x 32 x 16 x *]] }
00000076BE2E0D40: {[rn1_8.c2.W Gradient[16 x 144]] [rn1_9.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E0E80: {[rn1_5.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E1100: {[rn1_6.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Value[32 x 32 x 16 x *]] }
00000076BE2E11A0: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E1240: {[rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.p Value[32 x 32 x 16 x *]] }
00000076BE2E12E0: {[rn1_7.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E1380: {[rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E1420: {[rn1_8.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Value[32 x 32 x 16 x *]] }
00000076BE2E14C0: {[rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E1560: {[rn1_7.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Value[32 x 32 x 16 x *]] }
00000076BE2E1600: {[rn1_8.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E16A0: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E17E0: {[rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Gradient[32 x 32 x 16 x *]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E1880: {[rn1_8.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E1920: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E1A60: {[rn1_9.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E1B00: {[rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.p Value[32 x 32 x 16 x *]] }
00000076BE2E1BA0: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E1C40: {[rn1_9.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Value[32 x 32 x 16 x *]] }
00000076BE2E1CE0: {[rn1_6.c2.W Gradient[16 x 144]] [rn1_7.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E1D80: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E1E20: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.W Gradient[16 x 144]] }
00000076BE2E1EC0: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E2000: {[rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E21E0: {[rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.c1.y Value[32 x 32 x 16 x *]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E2280: {[rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E2320: {[rn1_5.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E2460: {[rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E2500: {[rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.p Value[32 x 32 x 16 x *]] }
00000076BE2E25A0: {[rn1_7.c2.W Gradient[16 x 144]] [rn1_8.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E2640: {[rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Gradient[32 x 32 x 16 x *]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E26E0: {[rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.p Value[32 x 32 x 16 x *]] }
00000076BE2E2820: {[rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E28C0: {[rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Gradient[32 x 32 x 16 x *]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E2960: {[rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E2A00: {[rn1_14.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Value[32 x 32 x 16 x *]] }
00000076BE2E2AA0: {[rn1_12.c2.W Gradient[16 x 144]] [rn1_13.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E2B40: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E2C80: {[rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.p Value[32 x 32 x 16 x *]] }
00000076BE2E2D20: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E2F00: {[rn1_11.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E2FA0: {[rn1_10.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Value[32 x 32 x 16 x *]] }
00000076BE2E3040: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E30E0: {[rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E3180: {[rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E3220: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.c.b Gradient[16 x 1]] }
00000076BE2E3400: {[rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E34A0: {[rn1_13.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E3540: {[rn1_13.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Value[32 x 32 x 16 x *]] }
00000076BE2E3720: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E3860: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E3900: {[rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.p Value[32 x 32 x 16 x *]] }
00000076BE2E39A0: {[rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E3A40: {[rn1_10.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E3AE0: {[rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Gradient[32 x 32 x 16 x *]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E3B80: {[rn1_12.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E3C20: {[rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.p Value[32 x 32 x 16 x *]] }
00000076BE2E3CC0: {[rn1_13.c2.W Gradient[16 x 144]] [rn1_14.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E3D60: {[rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.p Value[32 x 32 x 16 x *]] }
00000076BE2E3EA0: {[rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E3F40: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E4080: {[rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Gradient[32 x 32 x 16 x *]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E4120: {[rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E41C0: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E4300: {[rn1_14.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E43A0: {[rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E4440: {[rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.p Value[32 x 32 x 16 x *]] }
00000076BE2E44E0: {[rn1_11.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Value[32 x 32 x 16 x *]] }
00000076BE2E4580: {[rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E4620: {[rn1_14.c2.W Gradient[16 x 144]] [rn1_15.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E46C0: {[rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E4760: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E4800: {[rn1_10.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E4A80: {[rn1_11.c2.W Gradient[16 x 144]] [rn1_12.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E4B20: {[rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.c1.y Value[32 x 32 x 16 x *]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E4BC0: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E4C60: {[rn1_10.c2.W Gradient[16 x 144]] [rn1_11.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E4D00: {[rn1_12.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E4DA0: {[rn1_12.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Value[32 x 32 x 16 x *]] }
00000076BE2E4EE0: {[rn1_11.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E4F80: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E5020: {[rn1_13.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E5160: {[rn1_17.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Value[32 x 32 x 16 x *]] }
00000076BE2E5200: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *]] }
00000076BE2E52A0: {[rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.p Value[32 x 32 x 16 x *]] }
00000076BE2E5340: {[rn1_15.c2.W Gradient[16 x 144]] [rn1_16.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E53E0: {[rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E5520: {[rn1_16.c2.W Gradient[16 x 144]] [rn1_17.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E55C0: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E5660: {[rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E57A0: {[rn1_15.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E5840: {[rn1_17.c2.W Gradient[16 x 144]] [rn1_18.c1.c.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E58E0: {[rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Gradient[32 x 32 x 16 x *]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E5980: {[rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Gradient[32 x 32 x 16 x *]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E5A20: {[rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E5AC0: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E5B60: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E5C00: {[rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Gradient[32 x 32 x 16 x *]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E5CA0: {[rn1_18.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E5D40: {[rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E5DE0: {[rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Gradient[32 x 32 x 16 x *]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_1.c1.y Value[16 x 16 x 32 x *]] }
00000076BE2E5E80: {[rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E5F20: {[rn1_15.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E5FC0: {[rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E6060: {[rn1_14.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E61A0: {[rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Gradient[32 x 32 x 16 x *]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.c1.y Value[32 x 32 x 16 x *]] }
00000076BE2E6240: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E64C0: {[rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.p Value[32 x 32 x 16 x *]] }
00000076BE2E6600: {[rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E66A0: {[rn1_18.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Value[32 x 32 x 16 x *]] }
00000076BE2E6740: {[rn1_18.c2.W Gradient[16 x 144]] [rn2_1.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076BE2E67E0: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076BE2E6920: {[rn1_18.c2.c.b Gradient[16 x 1]] [rn2_1.c2.c.c Value[16 x 16 x 32 x *]] }
00000076BE2E69C0: {[rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076BE2E6B00: {[rn2_1.c1.c.c.b Gradient[32 x 1]] }
00000076BE2E6BA0: {[rn1_15.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Value[32 x 32 x 16 x *]] }
00000076BE2E6C40: {[rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c_proj.c Value[16 x 16 x 32 x *]] }
00000076BE2E6CE0: {[rn1_16.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E6D80: {[rn1_16.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Value[32 x 32 x 16 x *]] }
00000076BE2E6E20: {[rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *]] }
00000076BE2E6EC0: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *]] }
00000076BE2E70A0: {[rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.p Gradient[32 x 32 x 16 x *]] }
00000076BE2E71E0: {[rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *]] [rn2_1.p Value[16 x 16 x 32 x *]] }
00000076BE2E7280: {[rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.p Value[32 x 32 x 16 x *]] }
00000076BE2E73C0: {[rn1_16.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E7460: {[rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.p Value[32 x 32 x 16 x *]] }
00000076BE2E7500: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E75A0: {[rn1_17.c1.c.c.b Gradient[16 x 1]] }
00000076BE2E7640: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E76E0: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *]] }
00000076BE2E7780: {[rn1_17.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Value[32 x 32 x 16 x *]] }
00000076BE2E78C0: {[rn2_2.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Value[16 x 16 x 32 x *]] }
00000076BE2E7960: {[rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076BE2E7A00: {[rn2_1.c_proj.b Gradient[32 x 1]] }
00000076BE2E7AA0: {[rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.p Gradient[16 x 16 x 32 x *]] }
00000076BE2E7B40: {[rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Gradient[32 x 32 x 16 x *]] }
00000076BE2E7BE0: {[rn2_1.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Value[16 x 16 x 32 x *]] }
00000076BE2E7D20: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *]] }
00000076BE2E7DC0: {[rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.p Gradient[16 x 16 x 32 x *]] }
00000076BE2E7E60: {[rn2_1.c2.W Gradient[32 x 288]] [rn2_2.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076BE2E7F00: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076BE2E7FA0: {[rn2_2.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Value[16 x 16 x 32 x *]] }
00000076BE2E8040: {[rn2_2.c2.W Gradient[32 x 288]] [rn2_3.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076BE2E8180: {[rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076BE2E82C0: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *]] }
00000076BE2E8400: {[rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.p Value[16 x 16 x 32 x *]] }
00000076BE2E84A0: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *]] }
00000076BE2E8540: {[rn2_2.c1.c.c.b Gradient[32 x 1]] }
00000076BE2E85E0: {[rn2_1.c_proj.y Gradient[16 x 16 x 32 x *]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.c1.y Value[16 x 16 x 32 x *]] }
00000076BE2E8680: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076BE2E8720: {[rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Gradient[16 x 16 x 32 x *]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.c1.y Value[16 x 16 x 32 x *]] }
00000076C01130D0: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C0113210: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C01132B0: {[rn2_11.c1.c.c.b Gradient[32 x 1]] }
00000076C0113350: {[rn2_8.c1.c.c.b Gradient[32 x 1]] }
00000076C01133F0: {[rn2_8.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C0113490: {[rn2_8.c2.W Gradient[32 x 288]] [rn2_9.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0113530: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C0113670: {[rn2_12.c2.W Gradient[32 x 288]] [rn2_13.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0113850: {[rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Gradient[16 x 16 x 32 x *]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.c1.y Value[16 x 16 x 32 x *]] }
00000076C01138F0: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C0113990: {[rn2_9.c1.c.c.b Gradient[32 x 1]] }
00000076C0113AD0: {[rn2_10.c2.W Gradient[32 x 288]] [rn2_11.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0113B70: {[rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C0113C10: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C0113D50: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.W Gradient[32 x 288]] }
00000076C0113DF0: {[rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C0113E90: {[rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.c1.y Value[16 x 16 x 32 x *]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Gradient[16 x 16 x 32 x *]] }
00000076C0113F30: {[rn2_10.c1.c.c.b Gradient[32 x 1]] }
00000076C0113FD0: {[rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.p Value[16 x 16 x 32 x *]] }
00000076C0114070: {[rn2_11.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Value[16 x 16 x 32 x *]] }
00000076C0114110: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C01141B0: {[rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Gradient[16 x 16 x 32 x *]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.c1.y Value[16 x 16 x 32 x *]] }
00000076C01142F0: {[rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C0114390: {[rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.p Gradient[16 x 16 x 32 x *]] }
00000076C0114430: {[rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Gradient[16 x 16 x 32 x *]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.c1.y Value[16 x 16 x 32 x *]] }
00000076C01144D0: {[rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.p Gradient[16 x 16 x 32 x *]] }
00000076C0114570: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C0114610: {[rn2_12.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C01146B0: {[rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C0114750: {[rn2_8.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Value[16 x 16 x 32 x *]] }
00000076C01149D0: {[rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.p Value[16 x 16 x 32 x *]] }
00000076C0114A70: {[rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.p Gradient[16 x 16 x 32 x *]] }
00000076C0114B10: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C0114D90: {[rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C0114E30: {[rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.p Gradient[16 x 16 x 32 x *]] }
00000076C0114ED0: {[rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.p Value[16 x 16 x 32 x *]] }
00000076C0114F70: {[rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.c1.y Value[16 x 16 x 32 x *]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Gradient[16 x 16 x 32 x *]] }
00000076C0115010: {[rn2_10.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C01150B0: {[rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.p Value[16 x 16 x 32 x *]] }
00000076C0115150: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C01151F0: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.c.b Gradient[32 x 1]] }
00000076C0115290: {[rn2_10.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Value[16 x 16 x 32 x *]] }
00000076C0115330: {[rn2_9.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Value[16 x 16 x 32 x *]] }
00000076C0115470: {[rn2_11.c2.W Gradient[32 x 288]] [rn2_12.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0115510: {[rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.p Value[16 x 16 x 32 x *]] }
00000076C01155B0: {[rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.p Gradient[16 x 16 x 32 x *]] }
00000076C0115650: {[rn2_11.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C01156F0: {[rn2_12.c1.c.c.b Gradient[32 x 1]] }
00000076C0115790: {[rn2_12.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Value[16 x 16 x 32 x *]] }
00000076C01158D0: {[rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C0115A10: {[rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.p Value[16 x 16 x 32 x *]] }
00000076C0115B50: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C0115C90: {[rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.p Value[16 x 16 x 32 x *]] }
00000076C0115D30: {[rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C0115DD0: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C0115E70: {[rn2_17.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Value[16 x 16 x 32 x *]] }
00000076C0115F10: {[rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.p Gradient[16 x 16 x 32 x *]] }
00000076C0115FB0: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C01160F0: {[rn2_13.c2.W Gradient[32 x 288]] [rn2_14.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0116230: {[rn2_16.c1.c.c.b Gradient[32 x 1]] }
00000076C01162D0: {[rn2_15.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Value[16 x 16 x 32 x *]] }
00000076C0116370: {[rn2_13.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C0116410: {[rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C01164B0: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C0116550: {[rn2_14.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Value[16 x 16 x 32 x *]] }
00000076C01165F0: {[rn2_14.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C01167D0: {[rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.p Value[16 x 16 x 32 x *]] }
00000076C0116910: {[rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.p Gradient[16 x 16 x 32 x *]] }
00000076C01169B0: {[rn2_16.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C0116A50: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C0116B90: {[rn2_15.c2.W Gradient[32 x 288]] [rn2_16.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0116CD0: {[rn2_17.c2.W Gradient[32 x 288]] [rn2_18.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0116D70: {[rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.p Gradient[16 x 16 x 32 x *]] }
00000076C0116E10: {[rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Gradient[16 x 16 x 32 x *]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.c1.y Value[16 x 16 x 32 x *]] }
00000076C0116EB0: {[rn2_17.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C0116F50: {[rn2_13.c1.c.c.b Gradient[32 x 1]] }
00000076C0116FF0: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C0117090: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C0117130: {[rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.p Gradient[16 x 16 x 32 x *]] }
00000076C0117270: {[rn2_14.c2.W Gradient[32 x 288]] [rn2_15.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0117310: {[rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.p Gradient[16 x 16 x 32 x *]] }
00000076C01173B0: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *]] }
00000076C0117590: {[rn2_15.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Value[16 x 16 x 32 x *]] }
00000076C0117630: {[rn2_13.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Value[16 x 16 x 32 x *]] }
00000076C01176D0: {[rn2_14.c1.c.c.b Gradient[32 x 1]] }
00000076C0117810: {[rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Gradient[16 x 16 x 32 x *]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.c1.y Value[16 x 16 x 32 x *]] }
00000076C01178B0: {[rn2_15.c1.c.c.b Gradient[32 x 1]] }
00000076C0117950: {[rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C01179F0: {[rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Gradient[16 x 16 x 32 x *]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.c1.y Value[16 x 16 x 32 x *]] }
00000076C0117A90: {[rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.p Value[16 x 16 x 32 x *]] }
00000076C0117B30: {[rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Gradient[16 x 16 x 32 x *]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.c1.y Value[16 x 16 x 32 x *]] }
00000076C0117BD0: {[rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.p Value[16 x 16 x 32 x *]] }
00000076C0117C70: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C0117D10: {[rn2_16.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Value[16 x 16 x 32 x *]] }
00000076C0117DB0: {[rn2_16.c2.W Gradient[32 x 288]] [rn2_17.c1.c.c.c Value[16 x 16 x 32 x *]] }
00000076C0117E50: {[rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Gradient[16 x 16 x 32 x *]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.c1.y Value[16 x 16 x 32 x *]] }
00000076C0117F90: {[rn2_17.c1.c.c.b Gradient[32 x 1]] }
00000076C0118030: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C01180D0: {[rn3_4.c1.c.c.b Gradient[64 x 1]] }
00000076C0118170: {[rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.p Value[8 x 8 x 64 x *]] }
00000076C0118210: {[rn3_4.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Value[8 x 8 x 64 x *]] }
00000076C01182B0: {[rn3_4.c2.W Gradient[64 x 576]] [rn3_5.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C0118350: {[rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
00000076C0118490: {[rn2_18.c1.c.c.b Gradient[32 x 1]] }
00000076C0118530: {[rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Gradient[8 x 8 x 64 x *]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.c1.y Value[8 x 8 x 64 x *]] }
00000076C01185D0: {[rn3_1.c_proj.b Gradient[64 x 1]] }
00000076C0118710: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C01187B0: {[rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *]] [rn3_1.p Value[8 x 8 x 64 x *]] }
00000076C0118850: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C01188F0: {[rn2_18.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Value[16 x 16 x 32 x *]] }
00000076C0118990: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C0118A30: {[rn3_2.c2.W Gradient[64 x 576]] [rn3_3.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C0118AD0: {[rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.p Gradient[8 x 8 x 64 x *]] }
00000076C0118B70: {[rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Gradient[16 x 16 x 32 x *]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_1.c1.y Value[8 x 8 x 64 x *]] }
00000076C0118C10: {[rn2_18.c2.c.b Gradient[32 x 1]] [rn3_1.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C0118D50: {[rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c_proj.c Value[8 x 8 x 64 x *]] }
00000076C0118F30: {[rn3_2.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C0118FD0: {[rn3_1.c2.W Gradient[64 x 576]] [rn3_2.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C0119070: {[rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Gradient[16 x 16 x 32 x *]] }
00000076C0119110: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *]] }
00000076C01191B0: {[rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C0119250: {[rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.p Value[8 x 8 x 64 x *]] }
00000076C01192F0: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C0119430: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C01194D0: {[rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.p Value[8 x 8 x 64 x *]] }
00000076C0119570: {[rn3_1.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Value[8 x 8 x 64 x *]] }
00000076C0119610: {[rn3_2.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Value[8 x 8 x 64 x *]] }
00000076C01196B0: {[rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.p Gradient[8 x 8 x 64 x *]] }
00000076C01197F0: {[rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C0119890: {[rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.p Gradient[16 x 16 x 32 x *]] }
00000076C0119930: {[rn2_18.c2.W Gradient[32 x 288]] [rn3_1.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C01199D0: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *]] }
00000076C0119A70: {[rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *]] }
00000076C0119B10: {[rn3_2.c1.c.c.b Gradient[64 x 1]] }
00000076C0119BB0: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C0119CF0: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C0119E30: {[rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.p Value[16 x 16 x 32 x *]] }
00000076C011A010: {[rn3_3.c2.W Gradient[64 x 576]] [rn3_4.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011A0B0: {[rn3_3.c1.c.c.b Gradient[64 x 1]] }
00000076C011A150: {[rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Gradient[8 x 8 x 64 x *]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.c1.y Value[8 x 8 x 64 x *]] }
00000076C011A1F0: {[rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011A290: {[rn3_1.c_proj.y Gradient[8 x 8 x 64 x *]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.c1.y Value[8 x 8 x 64 x *]] }
00000076C011A3D0: {[rn3_1.c1.c.c.b Gradient[64 x 1]] }
00000076C011A470: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011A510: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011A5B0: {[rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.p Gradient[8 x 8 x 64 x *]] }
00000076C011A650: {[rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011A6F0: {[rn3_3.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Value[8 x 8 x 64 x *]] }
00000076C011A790: {[rn3_3.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011A8D0: {[rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011A970: {[rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Gradient[8 x 8 x 64 x *]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.c1.y Value[8 x 8 x 64 x *]] }
00000076C011AA10: {[rn3_9.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Value[8 x 8 x 64 x *]] }
00000076C011AAB0: {[rn3_4.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011AB50: {[rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011ABF0: {[rn3_5.c2.W Gradient[64 x 576]] [rn3_6.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011AD30: {[rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Gradient[8 x 8 x 64 x *]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.c1.y Value[8 x 8 x 64 x *]] }
00000076C011ADD0: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011AE70: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011AF10: {[rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.p Gradient[8 x 8 x 64 x *]] }
00000076C011B050: {[rn3_6.c2.W Gradient[64 x 576]] [rn3_7.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011B0F0: {[rn3_7.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Value[8 x 8 x 64 x *]] }
00000076C011B230: {[rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.p Value[8 x 8 x 64 x *]] }
00000076C011B410: {[rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011B4B0: {[rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.p Gradient[8 x 8 x 64 x *]] }
00000076C011B550: {[rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011B5F0: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011B690: {[rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.p Value[8 x 8 x 64 x *]] }
00000076C011B730: {[rn3_5.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Value[8 x 8 x 64 x *]] }
00000076C011B7D0: {[rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.p Value[8 x 8 x 64 x *]] }
00000076C011B910: {[rn3_5.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011B9B0: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011BA50: {[rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Gradient[8 x 8 x 64 x *]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.c1.y Value[8 x 8 x 64 x *]] }
00000076C011BAF0: {[rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011BC30: {[rn3_5.c1.c.c.b Gradient[64 x 1]] }
00000076C011BCD0: {[rn3_7.c2.W Gradient[64 x 576]] [rn3_8.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011BEB0: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011BF50: {[rn3_6.c1.c.c.b Gradient[64 x 1]] }
00000076C011BFF0: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011C090: {[rn3_7.c1.c.c.b Gradient[64 x 1]] }
00000076C011C130: {[rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.p Gradient[8 x 8 x 64 x *]] }
00000076C011C1D0: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011C270: {[rn3_8.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Value[8 x 8 x 64 x *]] }
00000076C011C310: {[rn3_8.c2.W Gradient[64 x 576]] [rn3_9.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011C3B0: {[rn3_7.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011C450: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011C630: {[rn3_8.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011C6D0: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011C810: {[rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.p Value[8 x 8 x 64 x *]] }
00000076C011C8B0: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011C950: {[rn3_9.c1.c.c.b Gradient[64 x 1]] }
00000076C011C9F0: {[rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.p Value[8 x 8 x 64 x *]] }
00000076C011CB30: {[rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.p Gradient[8 x 8 x 64 x *]] }
00000076C011CD10: {[rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Gradient[8 x 8 x 64 x *]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.c1.y Value[8 x 8 x 64 x *]] }
00000076C011CDB0: {[rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.p Gradient[8 x 8 x 64 x *]] }
00000076C011CE50: {[rn3_6.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Value[8 x 8 x 64 x *]] }
00000076C011CEF0: {[rn3_6.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011CF90: {[rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Gradient[8 x 8 x 64 x *]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.c1.y Value[8 x 8 x 64 x *]] }
00000076C011D030: {[rn3_8.c1.c.c.b Gradient[64 x 1]] }
00000076C011D0D0: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.c.b Gradient[64 x 1]] }
00000076C011D210: {[rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.p Value[8 x 8 x 64 x *]] }
00000076C011D2B0: {[rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.c1.y Value[8 x 8 x 64 x *]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Gradient[8 x 8 x 64 x *]] }
00000076C011D350: {[rn3_12.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011D3F0: {[rn3_10.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Value[8 x 8 x 64 x *]] }
00000076C011D490: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011D5D0: {[rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.p Gradient[8 x 8 x 64 x *]] }
00000076C011D670: {[rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011D710: {[rn3_11.c2.W Gradient[64 x 576]] [rn3_12.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011D7B0: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011D850: {[rn3_11.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Value[8 x 8 x 64 x *]] }
00000076C011D8F0: {[rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.p Value[8 x 8 x 64 x *]] }
00000076C011D990: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011DA30: {[rn3_12.c1.c.c.b Gradient[64 x 1]] }
00000076C011DB70: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011DC10: {[rn3_11.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011DCB0: {[rn3_13.c2.W Gradient[64 x 576]] [rn3_14.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011DD50: {[rn3_13.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011DDF0: {[rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011DE90: {[rn3_10.c1.c.c.b Gradient[64 x 1]] }
00000076C011DF30: {[rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.p Value[8 x 8 x 64 x *]] }
00000076C011DFD0: {[rn3_11.c1.c.c.b Gradient[64 x 1]] }
00000076C011E110: {[rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.c1.y Value[8 x 8 x 64 x *]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Gradient[8 x 8 x 64 x *]] }
00000076C011E1B0: {[rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.p Gradient[8 x 8 x 64 x *]] }
00000076C011E2F0: {[rn3_10.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011E390: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011E4D0: {[rn3_12.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Value[8 x 8 x 64 x *]] }
00000076C011E610: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011E6B0: {[rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.p Gradient[8 x 8 x 64 x *]] }
00000076C011E7F0: {[rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011E930: {[rn3_12.c2.W Gradient[64 x 576]] [rn3_13.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011E9D0: {[rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.p Gradient[8 x 8 x 64 x *]] }
00000076C011EA70: {[rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.p Value[8 x 8 x 64 x *]] }
00000076C011EB10: {[rn3_13.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Value[8 x 8 x 64 x *]] }
00000076C011EBB0: {[rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Gradient[8 x 8 x 64 x *]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.c1.y Value[8 x 8 x 64 x *]] }
00000076C011EC50: {[rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.p Gradient[8 x 8 x 64 x *]] }
00000076C011ECF0: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011EE30: {[rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Gradient[8 x 8 x 64 x *]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.c1.y Value[8 x 8 x 64 x *]] }
00000076C011EED0: {[rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011EF70: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C011F010: {[rn3_13.c1.c.c.b Gradient[64 x 1]] }
00000076C011F0B0: {[rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C011F1F0: {[rn3_14.c1.c.c.b Gradient[64 x 1]] }
00000076C011F290: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011F330: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.W Gradient[64 x 576]] }
00000076C011F470: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C011F5B0: {[rn3_10.c2.W Gradient[64 x 576]] [rn3_11.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011F650: {[rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.p Value[8 x 8 x 64 x *]] }
00000076C011F6F0: {[rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Gradient[8 x 8 x 64 x *]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.c1.y Value[8 x 8 x 64 x *]] }
00000076C011F8D0: {[rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Gradient[8 x 8 x 64 x *]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.c1.y Value[8 x 8 x 64 x *]] }
00000076C011FA10: {[OutputNodes.b Gradient[10]] }
00000076C011FBF0: {[rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.p Value[8 x 8 x 64 x *]] }
00000076C011FC90: {[rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.p Gradient[8 x 8 x 64 x *]] }
00000076C011FDD0: {[rn3_14.c2.W Gradient[64 x 576]] [rn3_15.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C011FE70: {[rn3_14.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C011FF10: {[rn3_16.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Value[8 x 8 x 64 x *]] }
00000076C011FFB0: {[rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C0120050: {[rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.p Value[8 x 8 x 64 x *]] }
00000076C0120190: {[rn3_17.c2.W Gradient[64 x 576]] [rn3_18.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C0120230: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C01202D0: {[rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.p Gradient[8 x 8 x 64 x *]] }
00000076C0120370: {[rn3_17.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C01204B0: {[rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.p Value[8 x 8 x 64 x *]] }
00000076C01205F0: {[rn3_15.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C0120730: {[rn3_15.c1.c.c.b Gradient[64 x 1]] }
00000076C0120870: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C01209B0: {[rn3_16.c2.W Gradient[64 x 576]] [rn3_17.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C0120AF0: {[rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Gradient[8 x 8 x 64 x *]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.c1.y Value[8 x 8 x 64 x *]] }
00000076C0120B90: {[rn3_16.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Value[8 x 8 x 64 x *]] }
00000076C0120C30: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C0120CD0: {[rn3_17.c1.c.c.b Gradient[64 x 1]] }
00000076C0120D70: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C0120E10: {[rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C0120EB0: {[rn3_15.c2.W Gradient[64 x 576]] [rn3_16.c1.c.c.c Value[8 x 8 x 64 x *]] }
00000076C0120F50: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C0120FF0: {[rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Gradient[8 x 8 x 64 x *]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.c1.y Value[8 x 8 x 64 x *]] }
00000076C0121090: {[rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C0121130: {[rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.p Value[8 x 8 x 64 x *]] }
00000076C01211D0: {[rn3_17.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Value[8 x 8 x 64 x *]] }
00000076C0121310: {[rn3_18.c1.c.c.b Gradient[64 x 1]] }
00000076C0121450: {[rn3_18.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Value[8 x 8 x 64 x *]] }
00000076C01214F0: {[pool Value[1 x 1 x 64 x *]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.p Gradient[8 x 8 x 64 x *]] }
00000076C0121590: {[OutputNodes.t Value[10 x *]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Gradient[8 x 8 x 64 x *]] }
00000076C0121770: {[CE Gradient[1]] }
00000076C0121810: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *]] }
00000076C01218B0: {[rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Gradient[8 x 8 x 64 x *]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.c1.y Value[8 x 8 x 64 x *]] }
00000076C0121950: {[OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.z Gradient[10 x *]] }
00000076C01219F0: {[OutputNodes.t Gradient[10 x *]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Gradient[8 x 8 x 64 x *]] }
00000076C0121A90: {[rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.p Gradient[8 x 8 x 64 x *]] }
00000076C0121B30: {[rn3_14.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Value[8 x 8 x 64 x *]] }
00000076C0121BD0: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C0121C70: {[rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.p Gradient[8 x 8 x 64 x *]] }
00000076C0121DB0: {[rn3_15.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Value[8 x 8 x 64 x *]] }
00000076C0121E50: {[rn3_16.c1.c.c.b Gradient[64 x 1]] }
00000076C0121EF0: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *]] }
00000076C0121F90: {[rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
00000076C01228F0: {[rn3_18.c2.c.b Gradient[64 x 1]] }
00000076C0122DF0: {[pool Gradient[1 x 1 x 64 x *]] [rn3_18.c2.W Gradient[64 x 576]] }

08/04/2016 08:07:57: No PreCompute nodes found, skipping PreCompute step.

08/04/2016 08:07:57: Starting Epoch 1: learning rate per sample = 0.006250  effective momentum = 0.900000  momentum as time constant = 151.9 samples

08/04/2016 08:07:57: Starting minibatch loop.
08/04/2016 08:08:05: Finished Epoch[ 1 of 1]: [Training] CE = 2.60893202 * 128; Err = 0.91406250 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.0062500001; epochTime=7.99867s
08/04/2016 08:08:05: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\Miscellaneous\CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56'
08/04/2016 08:08:06: CNTKCommandTrainEnd: Train

08/04/2016 08:08:06: Action "train" complete.


08/04/2016 08:08:06: ##############################################################################
08/04/2016 08:08:06: #                                                                            #
08/04/2016 08:08:06: # Action "test"                                                              #
08/04/2016 08:08:06: #                                                                            #
08/04/2016 08:08:06: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *1] -> [32 x 32 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *1] -> [1 x 1 x 64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[16 x 27]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[32 x 32 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[32 x 32 x 16 x *1]] [conv1.y Gradient[32 x 32 x 16 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool Gradient[1 x 1 x 64 x *1]] [rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c1.c.c.b Gradient[16 x 1]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.W Gradient[16 x 144]] [rn1_1.c2.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.p Gradient[32 x 32 x 16 x *1]] [rn1_1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c1.c.c.b Gradient[16 x 1]] [rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.W Gradient[16 x 144]] [rn1_10.c2.c.b Gradient[16 x 1]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.p Gradient[32 x 32 x 16 x *1]] [rn1_10.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c1.c.c.b Gradient[16 x 1]] [rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.W Gradient[16 x 144]] [rn1_11.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.p Gradient[32 x 32 x 16 x *1]] [rn1_11.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c1.c.c.b Gradient[16 x 1]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.W Gradient[16 x 144]] [rn1_12.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.p Gradient[32 x 32 x 16 x *1]] [rn1_12.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c1.c.c.b Gradient[16 x 1]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.W Gradient[16 x 144]] [rn1_13.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.p Gradient[32 x 32 x 16 x *1]] [rn1_13.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c1.c.c.b Gradient[16 x 1]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.W Gradient[16 x 144]] [rn1_14.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.p Gradient[32 x 32 x 16 x *1]] [rn1_14.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c1.c.c.b Gradient[16 x 1]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.W Gradient[16 x 144]] [rn1_15.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.p Gradient[32 x 32 x 16 x *1]] [rn1_15.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c1.c.c.b Gradient[16 x 1]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.W Gradient[16 x 144]] [rn1_16.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.p Gradient[32 x 32 x 16 x *1]] [rn1_16.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c1.c.c.b Gradient[16 x 1]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.W Gradient[16 x 144]] [rn1_17.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.p Gradient[32 x 32 x 16 x *1]] [rn1_17.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c1.c.c.b Gradient[16 x 1]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.W Gradient[16 x 144]] [rn1_18.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.p Gradient[32 x 32 x 16 x *1]] [rn1_18.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c1.c.c.b Gradient[16 x 1]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.W Gradient[16 x 144]] [rn1_2.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.p Gradient[32 x 32 x 16 x *1]] [rn1_2.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c1.c.c.b Gradient[16 x 1]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.W Gradient[16 x 144]] [rn1_3.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.p Gradient[32 x 32 x 16 x *1]] [rn1_3.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c1.c.c.b Gradient[16 x 1]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.W Gradient[16 x 144]] [rn1_4.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.p Gradient[32 x 32 x 16 x *1]] [rn1_4.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c1.c.c.b Gradient[16 x 1]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.W Gradient[16 x 144]] [rn1_5.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.p Gradient[32 x 32 x 16 x *1]] [rn1_5.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c1.c.c.b Gradient[16 x 1]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.W Gradient[16 x 144]] [rn1_6.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.p Gradient[32 x 32 x 16 x *1]] [rn1_6.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c1.c.c.b Gradient[16 x 1]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.W Gradient[16 x 144]] [rn1_7.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.p Gradient[32 x 32 x 16 x *1]] [rn1_7.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c1.c.c.b Gradient[16 x 1]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.W Gradient[16 x 144]] [rn1_8.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.p Gradient[32 x 32 x 16 x *1]] [rn1_8.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c1.c.c.b Gradient[16 x 1]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.W Gradient[16 x 144]] [rn1_9.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.p Gradient[32 x 32 x 16 x *1]] [rn1_9.y Gradient[32 x 32 x 16 x *1]] [rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c1.c.c.b Gradient[32 x 1]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.W Gradient[32 x 288]] [rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.c_proj.y Gradient[16 x 16 x 32 x *1]] [rn2_1.p Gradient[16 x 16 x 32 x *1]] [rn2_1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c1.c.c.b Gradient[32 x 1]] [rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.W Gradient[32 x 288]] [rn2_10.c2.c.b Gradient[32 x 1]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.p Gradient[16 x 16 x 32 x *1]] [rn2_10.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c1.c.c.b Gradient[32 x 1]] [rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.W Gradient[32 x 288]] [rn2_11.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.p Gradient[16 x 16 x 32 x *1]] [rn2_11.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c1.c.c.b Gradient[32 x 1]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.W Gradient[32 x 288]] [rn2_12.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.p Gradient[16 x 16 x 32 x *1]] [rn2_12.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c1.c.c.b Gradient[32 x 1]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.W Gradient[32 x 288]] [rn2_13.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.p Gradient[16 x 16 x 32 x *1]] [rn2_13.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c1.c.c.b Gradient[32 x 1]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.W Gradient[32 x 288]] [rn2_14.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.p Gradient[16 x 16 x 32 x *1]] [rn2_14.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c1.c.c.b Gradient[32 x 1]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.W Gradient[32 x 288]] [rn2_15.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.p Gradient[16 x 16 x 32 x *1]] [rn2_15.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c1.c.c.b Gradient[32 x 1]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.W Gradient[32 x 288]] [rn2_16.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.p Gradient[16 x 16 x 32 x *1]] [rn2_16.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c1.c.c.b Gradient[32 x 1]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.W Gradient[32 x 288]] [rn2_17.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.p Gradient[16 x 16 x 32 x *1]] [rn2_17.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c1.c.c.b Gradient[32 x 1]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.W Gradient[32 x 288]] [rn2_18.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.p Gradient[16 x 16 x 32 x *1]] [rn2_18.y Gradient[16 x 16 x 32 x *1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c1.c.c.b Gradient[32 x 1]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.W Gradient[32 x 288]] [rn2_2.c2.c.b Gradient[32 x 1]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.p Gradient[16 x 16 x 32 x *1]] [rn2_2.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c1.c.c.b Gradient[32 x 1]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.W Gradient[32 x 288]] [rn2_3.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.p Gradient[16 x 16 x 32 x *1]] [rn2_3.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c1.c.c.b Gradient[32 x 1]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.W Gradient[32 x 288]] [rn2_4.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.p Gradient[16 x 16 x 32 x *1]] [rn2_4.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c1.c.c.b Gradient[32 x 1]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.W Gradient[32 x 288]] [rn2_5.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.p Gradient[16 x 16 x 32 x *1]] [rn2_5.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c1.c.c.b Gradient[32 x 1]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.W Gradient[32 x 288]] [rn2_6.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.p Gradient[16 x 16 x 32 x *1]] [rn2_6.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c1.c.c.b Gradient[32 x 1]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.W Gradient[32 x 288]] [rn2_7.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.p Gradient[16 x 16 x 32 x *1]] [rn2_7.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c1.c.c.b Gradient[32 x 1]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.W Gradient[32 x 288]] [rn2_8.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.p Gradient[16 x 16 x 32 x *1]] [rn2_8.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c1.c.c.b Gradient[32 x 1]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.W Gradient[32 x 288]] [rn2_9.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.p Gradient[16 x 16 x 32 x *1]] [rn2_9.y Gradient[16 x 16 x 32 x *1]] [rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c1.c.c.b Gradient[64 x 1]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.W Gradient[64 x 576]] [rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.c_proj.y Gradient[8 x 8 x 64 x *1]] [rn3_1.p Gradient[8 x 8 x 64 x *1]] [rn3_1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c1.c.c.b Gradient[64 x 1]] [rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.W Gradient[64 x 576]] [rn3_10.c2.c.b Gradient[64 x 1]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.p Gradient[8 x 8 x 64 x *1]] [rn3_10.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c1.c.c.b Gradient[64 x 1]] [rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.W Gradient[64 x 576]] [rn3_11.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.p Gradient[8 x 8 x 64 x *1]] [rn3_11.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c1.c.c.b Gradient[64 x 1]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.W Gradient[64 x 576]] [rn3_12.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.p Gradient[8 x 8 x 64 x *1]] [rn3_12.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c1.c.c.b Gradient[64 x 1]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.W Gradient[64 x 576]] [rn3_13.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.p Gradient[8 x 8 x 64 x *1]] [rn3_13.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c1.c.c.b Gradient[64 x 1]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.W Gradient[64 x 576]] [rn3_14.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.p Gradient[8 x 8 x 64 x *1]] [rn3_14.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c1.c.c.b Gradient[64 x 1]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.W Gradient[64 x 576]] [rn3_15.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.p Gradient[8 x 8 x 64 x *1]] [rn3_15.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c1.c.c.b Gradient[64 x 1]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.W Gradient[64 x 576]] [rn3_16.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.p Gradient[8 x 8 x 64 x *1]] [rn3_16.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c1.c.c.b Gradient[64 x 1]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.W Gradient[64 x 576]] [rn3_17.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.p Gradient[8 x 8 x 64 x *1]] [rn3_17.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c1.c.c.b Gradient[64 x 1]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.W Gradient[64 x 576]] [rn3_18.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.p Gradient[8 x 8 x 64 x *1]] [rn3_18.y Gradient[8 x 8 x 64 x *1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c1.c.c.b Gradient[64 x 1]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.W Gradient[64 x 576]] [rn3_2.c2.c.b Gradient[64 x 1]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.p Gradient[8 x 8 x 64 x *1]] [rn3_2.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c1.c.c.b Gradient[64 x 1]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.W Gradient[64 x 576]] [rn3_3.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.p Gradient[8 x 8 x 64 x *1]] [rn3_3.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c1.c.c.b Gradient[64 x 1]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.W Gradient[64 x 576]] [rn3_4.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.p Gradient[8 x 8 x 64 x *1]] [rn3_4.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c1.c.c.b Gradient[64 x 1]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.W Gradient[64 x 576]] [rn3_5.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.p Gradient[8 x 8 x 64 x *1]] [rn3_5.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c1.c.c.b Gradient[64 x 1]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.W Gradient[64 x 576]] [rn3_6.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.p Gradient[8 x 8 x 64 x *1]] [rn3_6.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c1.c.c.b Gradient[64 x 1]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.W Gradient[64 x 576]] [rn3_7.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.p Gradient[8 x 8 x 64 x *1]] [rn3_7.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c1.c.c.b Gradient[64 x 1]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.W Gradient[64 x 576]] [rn3_8.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.p Gradient[8 x 8 x 64 x *1]] [rn3_8.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c1.c.c.b Gradient[64 x 1]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.W Gradient[64 x 576]] [rn3_9.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] [rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.p Gradient[8 x 8 x 64 x *1]] [rn3_9.y Gradient[8 x 8 x 64 x *1]] }
0000007698DA80F0: {[rn1_9.c1.c.c.m Value[16 x 1]] }
00000076A252FA10: {[rn3_9.c1.c.W Value[64 x 576]] }
00000076A252FBF0: {[rn3_9.c2.c.isd Value[64 x 1]] }
00000076A252FC90: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
00000076A252FE70: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
00000076A252FF10: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
00000076A2530190: {[rn3_9.c2.W Value[64 x 576]] }
00000076A25304B0: {[rn3_9.c2.c.b Value[64 x 1]] }
00000076A2530730: {[rn3_8.c1.c.W Value[64 x 576]] }
00000076A25307D0: {[rn3_8.c2.c.sc Value[64 x 1]] }
00000076A25309B0: {[rn3_9.c1.c.c.m Value[64 x 1]] }
00000076A2530B90: {[rn3_8.c2.c.b Value[64 x 1]] }
00000076A2531090: {[rn3_8.c2.c.isd Value[64 x 1]] }
00000076A2531130: {[conv1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076A25311D0: {[rn3_7.c2.W Value[64 x 576]] }
00000076A25314F0: {[rn3_8.c1.c.c.b Value[64 x 1]] }
00000076A2531630: {[rn3_8.c2.W Value[64 x 576]] }
00000076A2531810: {[rn3_8.c1.c.c.m Value[64 x 1]] }
00000076A25318B0: {[rn3_9.c1.c.c.b Value[64 x 1]] }
00000076A2531950: {[rn3_9.c2.c.sc Value[64 x 1]] }
00000076A25319F0: {[rn3_8.c2.c.m Value[64 x 1]] }
00000076A2531C70: {[rn3_9.c2.c.m Value[64 x 1]] }
00000076A2531DB0: {[CE Value[1]] }
00000076A2531E50: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
00000076A2532170: {[Err Value[1]] }
00000076A25322B0: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
00000076A25325D0: {[rn3_13.c1.c.c.m Value[64 x 1]] }
00000076A2532670: {[rn3_14.c1.c.c.b Value[64 x 1]] }
00000076A25327B0: {[rn3_14.c2.c.b Value[64 x 1]] }
00000076A2532850: {[rn3_12.c2.c.isd Value[64 x 1]] }
00000076A25328F0: {[rn3_12.c2.W Value[64 x 576]] }
00000076A2532CB0: {[rn3_14.c1.c.W Value[64 x 576]] }
00000076A2532DF0: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
00000076A2532E90: {[rn3_13.c1.c.W Value[64 x 576]] }
00000076A2532FD0: {[rn3_12.c1.c.W Value[64 x 576]] }
00000076A2533110: {[rn3_12.c1.c.c.m Value[64 x 1]] }
00000076A2533250: {[rn3_13.c1.c.c.b Value[64 x 1]] }
00000076A25332F0: {[rn3_12.c2.c.sc Value[64 x 1]] }
00000076A2533570: {[rn3_13.c2.c.sc Value[64 x 1]] }
00000076A2533890: {[rn3_13.c2.c.m Value[64 x 1]] }
00000076A2533D90: {[rn3_12.c2.c.m Value[64 x 1]] }
00000076A2533F70: {[rn3_13.c2.c.b Value[64 x 1]] }
00000076A25340B0: {[rn3_13.c2.W Value[64 x 576]] }
00000076A2534150: {[rn3_14.c1.c.c.m Value[64 x 1]] }
00000076A2534290: {[rn3_12.c2.c.b Value[64 x 1]] }
00000076A2534330: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
00000076A2534470: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
00000076A2534650: {[rn3_13.c2.c.isd Value[64 x 1]] }
00000076A2534830: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
00000076A2534AB0: {[rn3_15.c2.c.b Value[64 x 1]] }
00000076A2535050: {[rn3_15.c1.c.c.m Value[64 x 1]] }
00000076A25350F0: {[rn3_16.c1.c.c.m Value[64 x 1]] }
00000076A2535230: {[rn3_16.c1.c.c.b Value[64 x 1]] }
00000076A25352D0: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
00000076A2535410: {[rn3_16.c1.c.W Value[64 x 576]] }
00000076A25355F0: {[rn3_16.c2.c.m Value[64 x 1]] }
00000076A25357D0: {[rn3_16.c2.W Value[64 x 576]] }
00000076A25359B0: {[rn3_15.c1.c.W Value[64 x 576]] }
00000076A2535A50: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
00000076A2535AF0: {[rn3_14.c2.c.sc Value[64 x 1]] }
00000076A2535B90: {[rn3_14.c2.c.isd Value[64 x 1]] }
00000076A2535D70: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
00000076A2535EB0: {[rn3_15.c2.c.isd Value[64 x 1]] }
00000076A2535F50: {[rn3_15.c2.c.m Value[64 x 1]] }
00000076A2536310: {[rn3_15.c2.W Value[64 x 576]] }
00000076A25364F0: {[rn3_14.c2.W Value[64 x 576]] }
00000076A2536590: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
00000076A2536770: {[rn3_14.c2.c.m Value[64 x 1]] }
00000076A2536810: {[rn3_15.c2.c.sc Value[64 x 1]] }
00000076A25369F0: {[rn3_16.c2.c.isd Value[64 x 1]] }
00000076A2536B30: {[rn3_16.c2.c.sc Value[64 x 1]] }
00000076A2536F90: {[rn3_15.c1.c.c.b Value[64 x 1]] }
00000076A2537030: {[rn3_16.c2.c.b Value[64 x 1]] }
00000076A25372B0: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
00000076A2537350: {[rn3_18.c2.c.sc Value[64 x 1]] }
00000076A2537490: {[rn3_17.c1.c.W Value[64 x 576]] }
00000076A2537710: {[rn3_17.c1.c.c.m Value[64 x 1]] }
00000076A25377B0: {[rn3_18.c1.c.c.m Value[64 x 1]] }
00000076A2537850: {[rn3_18.c2.c.b Value[64 x 1]] }
00000076A25378F0: {[rn3_18.c2.c.m Value[64 x 1]] }
00000076A2537A30: {[rn3_1_Wproj Value[64 x 32]] }
00000076A2537CB0: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
00000076A2537D50: {[rn3_17.c1.c.c.b Value[64 x 1]] }
00000076A2537F30: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
00000076A2537FD0: {[rn3_18.c2.c.isd Value[64 x 1]] }
00000076A2538070: {[rn3_18.c2.W Value[64 x 576]] }
00000076A2538250: {[rn3_18.c1.c.c.b Value[64 x 1]] }
00000076A25382F0: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
00000076A2538610: {[rn3_2.c1.c.c.b Value[64 x 1]] }
00000076A2538C50: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
00000076A2538ED0: {[rn3_17.c2.c.b Value[64 x 1]] }
00000076A2538F70: {[rn3_17.c2.c.m Value[64 x 1]] }
00000076A2539010: {[rn3_17.c2.W Value[64 x 576]] }
00000076A25393D0: {[rn3_18.c1.c.W Value[64 x 576]] }
00000076A2539650: {[rn3_17.c2.c.isd Value[64 x 1]] }
00000076A2539790: {[rn3_17.c2.c.sc Value[64 x 1]] }
00000076A2539A10: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
00000076A2539AB0: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
00000076A2539C90: {[rn3_4.c2.c.b Value[64 x 1]] }
00000076A2539DD0: {[rn3_3.c2.c.sc Value[64 x 1]] }
00000076A2539E70: {[rn3_2.c1.c.c.m Value[64 x 1]] }
00000076A253A050: {[rn3_3.c2.W Value[64 x 576]] }
00000076A253A0F0: {[rn3_4.c1.c.c.b Value[64 x 1]] }
00000076A253A230: {[rn3_4.c1.c.W Value[64 x 576]] }
00000076A253A410: {[rn3_2.c2.c.sc Value[64 x 1]] }
00000076A253A5F0: {[rn3_2.c2.c.isd Value[64 x 1]] }
00000076A253A910: {[rn3_2.c2.c.m Value[64 x 1]] }
00000076A253AA50: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
00000076A253B270: {[rn3_3.c2.c.isd Value[64 x 1]] }
00000076A253B310: {[rn3_2.c2.c.b Value[64 x 1]] }
00000076A253B3B0: {[rn3_3.c1.c.c.b Value[64 x 1]] }
00000076A253B590: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
00000076A253B6D0: {[rn3_2.c1.c.W Value[64 x 576]] }
00000076A253B770: {[rn3_2.c2.W Value[64 x 576]] }
00000076A253B8B0: {[rn3_3.c1.c.c.m Value[64 x 1]] }
00000076A253BA90: {[rn3_4.c1.c.c.m Value[64 x 1]] }
00000076A253BB30: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
00000076A253BBD0: {[rn3_3.c2.c.b Value[64 x 1]] }
00000076A253BC70: {[rn3_3.c2.c.m Value[64 x 1]] }
00000076A253BE50: {[rn3_3.c1.c.W Value[64 x 576]] }
00000076A253C350: {[rn3_4.c2.W Value[64 x 576]] }
00000076A253C3F0: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
00000076A253C490: {[rn3_5.c1.c.c.b Value[64 x 1]] }
00000076A253C8F0: {[rn3_4.c2.c.sc Value[64 x 1]] }
00000076A253CA30: {[rn3_5.c2.W Value[64 x 576]] }
00000076A253CCB0: {[rn3_6.c1.c.c.b Value[64 x 1]] }
00000076A253CE90: {[rn3_5.c1.c.W Value[64 x 576]] }
00000076A253CFD0: {[rn3_6.c2.c.m Value[64 x 1]] }
00000076A253D110: {[rn3_6.c2.W Value[64 x 576]] }
00000076A253D570: {[rn3_6.c2.c.sc Value[64 x 1]] }
00000076A253D6B0: {[rn3_4.c2.c.m Value[64 x 1]] }
00000076A253D7F0: {[rn3_5.c2.c.m Value[64 x 1]] }
00000076A253D930: {[rn3_5.c2.c.isd Value[64 x 1]] }
00000076A253D9D0: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
00000076A253DBB0: {[rn3_5.c2.c.b Value[64 x 1]] }
00000076A253DCF0: {[rn3_5.c2.c.sc Value[64 x 1]] }
00000076A253DE30: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
00000076A253DED0: {[rn3_6.c1.c.c.m Value[64 x 1]] }
00000076A253DF70: {[rn3_6.c1.c.W Value[64 x 576]] }
00000076A253E330: {[rn3_6.c2.c.isd Value[64 x 1]] }
00000076A253E470: {[rn3_4.c2.c.isd Value[64 x 1]] }
00000076A253E5B0: {[rn3_5.c1.c.c.m Value[64 x 1]] }
00000076A253E8D0: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
00000076A253E970: {[rn3_6.c2.c.b Value[64 x 1]] }
00000076A253EAB0: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
00000076A253EB50: {[rn3_7.c2.c.isd Value[64 x 1]] }
00000076A253EBF0: {[rn3_7.c2.c.m Value[64 x 1]] }
00000076A253ED30: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
00000076A253EE70: {[rn3_7.c2.c.b Value[64 x 1]] }
00000076A253F370: {[rn3_7.c1.c.W Value[64 x 576]] }
00000076A253F5F0: {[rn3_7.c1.c.c.m Value[64 x 1]] }
00000076A253F730: {[rn3_7.c2.c.sc Value[64 x 1]] }
00000076A253F870: {[rn3_7.c1.c.c.b Value[64 x 1]] }
00000076AB06F9A0: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
00000076AB7C4130: {[rn2_18.c1.c.c.b Value[32 x 1]] }
00000076AB7C4450: {[rn2_16.c1.c.c.b Value[32 x 1]] }
00000076AB7C4590: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
00000076AB7C4630: {[rn2_16.c1.c.W Value[32 x 288]] }
00000076AB7C46D0: {[rn2_17.c1.c.c.m Value[32 x 1]] }
00000076AB7C4810: {[rn2_18.c1.c.c.m Value[32 x 1]] }
00000076AB7C4A90: {[rn2_16.c1.c.c.m Value[32 x 1]] }
00000076AB7C4B30: {[rn2_17.c2.c.b Value[32 x 1]] }
00000076AB7C4D10: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
00000076AB7C5030: {[rn2_17.c1.c.W Value[32 x 288]] }
00000076AB7C5170: {[rn2_16.c2.c.sc Value[32 x 1]] }
00000076AB7C5210: {[rn2_16.c2.c.isd Value[32 x 1]] }
00000076AB7C53F0: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
00000076AB7C58F0: {[rn2_17.c2.c.isd Value[32 x 1]] }
00000076AB7C5C10: {[rn2_16.c2.W Value[32 x 288]] }
00000076AB7C5CB0: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
00000076AB7C5DF0: {[rn2_16.c2.c.m Value[32 x 1]] }
00000076AB7C5E90: {[rn2_17.c2.c.m Value[32 x 1]] }
00000076AB7C5FD0: {[rn2_17.c2.c.sc Value[32 x 1]] }
00000076AB7C6110: {[rn2_16.c2.c.b Value[32 x 1]] }
00000076AB7C61B0: {[rn2_17.c2.W Value[32 x 288]] }
00000076AB7C6250: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
00000076AB7C6570: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
00000076AB7C66B0: {[rn2_17.c1.c.c.b Value[32 x 1]] }
00000076AB7C6890: {[rn2_2.c2.c.m Value[32 x 1]] }
00000076AB7C6930: {[rn2_2.c2.c.sc Value[32 x 1]] }
00000076AB7C69D0: {[rn2_3.c1.c.W Value[32 x 288]] }
00000076AB7C6BB0: {[rn2_18.c2.W Value[32 x 288]] }
00000076AB7C6C50: {[rn2_2.c2.c.isd Value[32 x 1]] }
00000076AB7C6CF0: {[rn2_2.c1.c.c.m Value[32 x 1]] }
00000076AB7C7150: {[rn2_3.c2.c.b Value[32 x 1]] }
00000076AB7C7470: {[rn2_18.c2.c.b Value[32 x 1]] }
00000076AB7C7650: {[rn2_18.c2.c.m Value[32 x 1]] }
00000076AB7C7C90: {[rn2_2.c2.W Value[32 x 288]] }
00000076AB7C7DD0: {[rn2_2.c1.c.W Value[32 x 288]] }
00000076AB7C7F10: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
00000076AB7C7FB0: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
00000076AB7C80F0: {[rn2_18.c2.c.isd Value[32 x 1]] }
00000076AB7C8190: {[rn2_18.c2.c.sc Value[32 x 1]] }
00000076AB7C8230: {[rn2_1_Wproj Value[32 x 16]] }
00000076AB7C85F0: {[rn2_3.c1.c.c.m Value[32 x 1]] }
00000076AB7C8690: {[rn2_2.c2.c.b Value[32 x 1]] }
00000076AB7C8730: {[rn2_18.c1.c.W Value[32 x 288]] }
00000076AB7C8870: {[rn2_2.c1.c.c.b Value[32 x 1]] }
00000076AB7C8910: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
00000076AB7C8C30: {[rn2_3.c1.c.c.b Value[32 x 1]] }
00000076AB7C8CD0: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
00000076AB7C9090: {[rn2_5.c2.c.isd Value[32 x 1]] }
00000076AB7C91D0: {[rn2_3.c2.c.m Value[32 x 1]] }
00000076AB7C9270: {[rn2_3.c2.W Value[32 x 288]] }
00000076AB7C94F0: {[rn2_5.c2.c.b Value[32 x 1]] }
00000076AB7C96D0: {[rn2_5.c2.c.sc Value[32 x 1]] }
00000076AB7C9770: {[rn2_3.c2.c.isd Value[32 x 1]] }
00000076AB7C9950: {[rn2_5.c2.W Value[32 x 288]] }
00000076AB7C99F0: {[rn2_5.c1.c.c.b Value[32 x 1]] }
00000076AB7C9B30: {[rn2_5.c2.c.m Value[32 x 1]] }
00000076AB7C9C70: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
00000076AB7C9D10: {[rn2_3.c2.c.sc Value[32 x 1]] }
00000076AB7CA170: {[rn2_4.c2.c.m Value[32 x 1]] }
00000076AB7CA210: {[rn2_5.c1.c.W Value[32 x 288]] }
00000076AB7CA3F0: {[rn2_4.c1.c.c.m Value[32 x 1]] }
00000076AB7CA990: {[rn2_4.c1.c.c.b Value[32 x 1]] }
00000076AB7CAAD0: {[rn2_4.c2.W Value[32 x 288]] }
00000076AB7CAC10: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
00000076AB7CAD50: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
00000076AB7CADF0: {[rn2_4.c2.c.b Value[32 x 1]] }
00000076AB7CAE90: {[rn2_4.c2.c.sc Value[32 x 1]] }
00000076AB7CB110: {[rn2_4.c1.c.W Value[32 x 288]] }
00000076AB7CB4D0: {[rn2_4.c2.c.isd Value[32 x 1]] }
00000076AB7CB570: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
00000076AB7CB7F0: {[rn2_5.c1.c.c.m Value[32 x 1]] }
00000076AB7CB930: {[rn2_15.c2.W Value[32 x 288]] }
00000076AB7CBB10: {[rn2_15.c2.c.m Value[32 x 1]] }
00000076AB7CBC50: {[rn2_15.c2.c.sc Value[32 x 1]] }
00000076AB7CBD90: {[rn2_15.c2.c.b Value[32 x 1]] }
00000076AB7CBF70: {[rn2_15.c2.c.isd Value[32 x 1]] }
00000076ABCC30A0: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC3140: {[rn2_13.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCC31E0: {[rn2_11.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC3280: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC3320: {[rn2_9.p Value[16 x 16 x 32 x *1]] }
00000076ABCC33C0: {[rn2_13.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC3460: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC3640: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC36E0: {[rn2_13.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC3780: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC3960: {[rn2_11.p Value[16 x 16 x 32 x *1]] }
00000076ABCC3A00: {[rn2_10.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCC3AA0: {[rn2_12.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC3D20: {[rn2_11.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCC3DC0: {[rn2_9.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC3F00: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC4040: {[rn2_12.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCC42C0: {[rn2_12.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC4540: {[rn2_8.p Value[16 x 16 x 32 x *1]] }
00000076ABCC4720: {[rn2_10.p Value[16 x 16 x 32 x *1]] }
00000076ABCC47C0: {[rn2_10.y Value[16 x 16 x 32 x *1]] }
00000076ABCC4860: {[rn2_8.y Value[16 x 16 x 32 x *1]] }
00000076ABCC4A40: {[rn2_9.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCC4AE0: {[rn2_9.y Value[16 x 16 x 32 x *1]] }
00000076ABCC4B80: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC4CC0: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC4D60: {[rn2_11.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC4EA0: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC4FE0: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC51C0: {[rn2_11.y Value[16 x 16 x 32 x *1]] }
00000076ABCC5260: {[rn2_12.p Value[16 x 16 x 32 x *1]] }
00000076ABCC5300: {[rn2_12.y Value[16 x 16 x 32 x *1]] }
00000076ABCC53A0: {[rn2_9.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCC5800: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCC58A0: {[rn1_2.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC59E0: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC5A80: {[conv1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC5C60: {[rn1_3.y Value[32 x 32 x 16 x *1]] }
00000076ABCC5D00: {[rn1_4.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC5DA0: {[rn1_5.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC5E40: {[rn1_2.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC5EE0: {[rn1_3.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC6020: {[rn1_4.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC60C0: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC6160: {[conv1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC6340: {[rn1_5.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC63E0: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC65C0: {[rn1_1.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC6700: {[rn1_1.p Value[32 x 32 x 16 x *1]] }
00000076ABCC6F20: {[rn1_2.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC6FC0: {[rn1_1.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7060: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC72E0: {[rn1_3.p Value[32 x 32 x 16 x *1]] }
00000076ABCC7420: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC74C0: {[rn1_4.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7560: {[rn1_4.p Value[32 x 32 x 16 x *1]] }
00000076ABCC7740: {[rn1_2.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7880: {[rn1_3.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC7920: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC79C0: {[rn1_1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7A60: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7B00: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7BA0: {[rn1_2.p Value[32 x 32 x 16 x *1]] }
00000076ABCC7C40: {[rn1_4.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7D80: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7E20: {[rn1_3.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC7EC0: {[rn1_5.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC8000: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC8140: {[rn1_9.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC81E0: {[rn1_9.y Value[32 x 32 x 16 x *1]] }
00000076ABCC8460: {[rn1_8.p Value[32 x 32 x 16 x *1]] }
00000076ABCC8500: {[rn1_9.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC8640: {[rn1_6.y Value[32 x 32 x 16 x *1]] }
00000076ABCC86E0: {[rn1_7.y Value[32 x 32 x 16 x *1]] }
00000076ABCC8780: {[rn1_9.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC8820: {[rn1_8.y Value[32 x 32 x 16 x *1]] }
00000076ABCC8AA0: {[rn1_5.y Value[32 x 32 x 16 x *1]] }
00000076ABCC8C80: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC8D20: {[rn1_10.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC8E60: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC9040: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC90E0: {[rn1_6.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC9180: {[rn1_7.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC9220: {[rn1_8.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC92C0: {[rn1_8.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC9360: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC9400: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC94A0: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC9540: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC95E0: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC9720: {[rn1_7.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCC9860: {[rn1_6.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC9A40: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCC9E00: {[rn1_7.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCC9F40: {[rn1_6.p Value[32 x 32 x 16 x *1]] }
00000076ABCC9FE0: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCA080: {[rn1_7.p Value[32 x 32 x 16 x *1]] }
00000076ABCCA120: {[rn1_5.p Value[32 x 32 x 16 x *1]] }
00000076ABCCA300: {[rn1_8.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCA4E0: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCA580: {[rn1_6.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCA6C0: {[rn1_9.p Value[32 x 32 x 16 x *1]] }
00000076ABCCA940: {[rn1_14.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCA9E0: {[rn1_14.p Value[32 x 32 x 16 x *1]] }
00000076ABCCAA80: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCAB20: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCABC0: {[rn1_15.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCADA0: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCAE40: {[rn1_11.p Value[32 x 32 x 16 x *1]] }
00000076ABCCAEE0: {[rn1_12.p Value[32 x 32 x 16 x *1]] }
00000076ABCCAF80: {[rn1_13.y Value[32 x 32 x 16 x *1]] }
00000076ABCCB020: {[rn1_13.p Value[32 x 32 x 16 x *1]] }
00000076ABCCB0C0: {[rn1_14.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCB200: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCB2A0: {[rn1_10.p Value[32 x 32 x 16 x *1]] }
00000076ABCCB3E0: {[rn1_12.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCB700: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCB7A0: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCB840: {[rn1_14.y Value[32 x 32 x 16 x *1]] }
00000076ABCCB980: {[rn1_11.y Value[32 x 32 x 16 x *1]] }
00000076ABCCBA20: {[rn1_12.y Value[32 x 32 x 16 x *1]] }
00000076ABCCBAC0: {[rn1_13.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCBE80: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCBFC0: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCC060: {[rn1_10.y Value[32 x 32 x 16 x *1]] }
00000076ABCCC100: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCC1A0: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCC380: {[rn1_11.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCC420: {[rn1_14.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCC600: {[rn1_12.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCC6A0: {[rn1_11.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCCA60: {[rn1_13.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCCC40: {[rn1_13.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCCD80: {[rn1_11.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCCF60: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCD000: {[rn1_12.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCD320: {[rn1_18.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCD460: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCD500: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCCD5A0: {[rn2_1.p Value[16 x 16 x 32 x *1]] }
00000076ABCCDA00: {[rn2_1.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCCDC80: {[rn1_18.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCDD20: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *1]] }
00000076ABCCDE60: {[rn1_16.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCDF00: {[rn1_16.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCDFA0: {[rn1_18.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCE0E0: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCE360: {[rn2_1.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCCE400: {[rn1_18.y Value[32 x 32 x 16 x *1]] }
00000076ABCCE4A0: {[rn2_1.c_proj.c Value[16 x 16 x 32 x *1]] }
00000076ABCCE540: {[rn1_17.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCE5E0: {[rn1_16.y Value[32 x 32 x 16 x *1]] }
00000076ABCCE680: {[rn1_15.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCE720: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCE7C0: {[rn1_16.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCE900: {[rn1_17.c2.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCE9A0: {[rn2_1.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCCEA40: {[rn1_17.y Value[32 x 32 x 16 x *1]] }
00000076ABCCEC20: {[rn1_18.p Value[32 x 32 x 16 x *1]] }
00000076ABCCEEA0: {[rn1_15.p Value[32 x 32 x 16 x *1]] }
00000076ABCCEF40: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCEFE0: {[rn1_15.y Value[32 x 32 x 16 x *1]] }
00000076ABCCF080: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCF120: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCF260: {[rn1_17.p Value[32 x 32 x 16 x *1]] }
00000076ABCCF300: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *1]] }
00000076ABCCF4E0: {[rn1_15.c1.y Value[32 x 32 x 16 x *1]] }
00000076ABCCF6C0: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCCF760: {[rn1_17.c1.c.c.c Value[32 x 32 x 16 x *1]] }
00000076ABCCF800: {[rn1_16.p Value[32 x 32 x 16 x *1]] }
00000076ABCCF8A0: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCCFA80: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCCFB20: {[rn2_5.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCCFC60: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD00C0: {[rn2_5.p Value[16 x 16 x 32 x *1]] }
00000076ABCD0340: {[rn2_6.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD03E0: {[rn2_3.p Value[16 x 16 x 32 x *1]] }
00000076ABCD0480: {[rn2_4.y Value[16 x 16 x 32 x *1]] }
00000076ABCD05C0: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD0660: {[rn2_2.y Value[16 x 16 x 32 x *1]] }
00000076ABCD0700: {[rn2_3.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD0B60: {[rn2_5.y Value[16 x 16 x 32 x *1]] }
00000076ABCD0C00: {[rn2_5.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD0CA0: {[rn2_6.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCD0D40: {[rn2_3.y Value[16 x 16 x 32 x *1]] }
00000076ABCD0DE0: {[rn2_3.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD0E80: {[rn2_2.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD1100: {[rn2_4.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD11A0: {[rn2_6.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD1240: {[rn2_4.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD1380: {[rn2_2.p Value[16 x 16 x 32 x *1]] }
00000076ABCD1420: {[rn2_5.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCD14C0: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD16A0: {[rn2_2.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCD1740: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD17E0: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD1880: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD1920: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD1A60: {[rn2_4.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCD1C40: {[rn2_4.p Value[16 x 16 x 32 x *1]] }
00000076ABCD1CE0: {[rn2_1.y Value[16 x 16 x 32 x *1]] }
00000076ABCD1E20: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD1EC0: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD2000: {[rn2_3.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCD21E0: {[rn2_8.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD2320: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD23C0: {[rn2_7.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD2460: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD25A0: {[rn2_7.p Value[16 x 16 x 32 x *1]] }
00000076ABCD2640: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD26E0: {[rn2_7.y Value[16 x 16 x 32 x *1]] }
00000076ABCD2820: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCD28C0: {[rn2_6.y Value[16 x 16 x 32 x *1]] }
00000076ABCD2A00: {[rn2_7.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCD2B40: {[rn2_8.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCD2D20: {[rn2_7.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCD2DC0: {[rn2_6.p Value[16 x 16 x 32 x *1]] }
00000076ABCD2F00: {[rn2_8.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE58D0: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE5970: {[rn2_15.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE5BF0: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE5D30: {[rn2_15.p Value[16 x 16 x 32 x *1]] }
00000076ABCE5DD0: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE5E70: {[rn2_14.y Value[16 x 16 x 32 x *1]] }
00000076ABCE5FB0: {[rn2_18.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE6050: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE6190: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE6230: {[rn2_13.y Value[16 x 16 x 32 x *1]] }
00000076ABCE62D0: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE6410: {[rn2_15.y Value[16 x 16 x 32 x *1]] }
00000076ABCE65F0: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE6730: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE6910: {[rn2_14.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCE6B90: {[rn2_14.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE6D70: {[rn2_16.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE6E10: {[rn2_17.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE6EB0: {[rn2_17.y Value[16 x 16 x 32 x *1]] }
00000076ABCE6FF0: {[rn2_18.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCE7090: {[rn2_18.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE7130: {[rn2_13.p Value[16 x 16 x 32 x *1]] }
00000076ABCE71D0: {[rn2_14.p Value[16 x 16 x 32 x *1]] }
00000076ABCE7270: {[rn2_15.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCE7310: {[rn2_16.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCE73B0: {[rn2_17.c1.y Value[16 x 16 x 32 x *1]] }
00000076ABCE74F0: {[rn2_14.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE7590: {[rn2_15.c2.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE7630: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE7770: {[rn2_16.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE7950: {[rn2_16.p Value[16 x 16 x 32 x *1]] }
00000076ABCE7A90: {[rn2_17.p Value[16 x 16 x 32 x *1]] }
00000076ABCE7E50: {[rn2_17.c1.c.c.c Value[16 x 16 x 32 x *1]] }
00000076ABCE7EF0: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCE8030: {[rn2_16.y Value[16 x 16 x 32 x *1]] }
00000076ABCE8170: {[rn3_3.y Value[8 x 8 x 64 x *1]] }
00000076ABCE8210: {[rn3_2.p Value[8 x 8 x 64 x *1]] }
00000076ABCE82B0: {[rn3_3.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCE8350: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCE83F0: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCE8530: {[rn3_1.y Value[8 x 8 x 64 x *1]] }
00000076ABCE8670: {[rn3_4.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCE8710: {[rn3_4.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCE8850: {[rn3_1.c_proj.c Value[8 x 8 x 64 x *1]] }
00000076ABCE8A30: {[rn2_18.p Value[16 x 16 x 32 x *1]] }
00000076ABCE8DF0: {[rn3_2.y Value[8 x 8 x 64 x *1]] }
00000076ABCE8E90: {[rn3_3.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCE9070: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCE91B0: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCE92F0: {[rn3_3.p Value[8 x 8 x 64 x *1]] }
00000076ABCE9390: {[rn3_1.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCE94D0: {[rn3_1.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCE9610: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCE96B0: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCE9890: {[rn3_3.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCE9BB0: {[rn3_4.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCE9C50: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *1]] }
00000076ABCE9CF0: {[rn2_18.y Value[16 x 16 x 32 x *1]] }
00000076ABCE9D90: {[rn3_1.p Value[8 x 8 x 64 x *1]] }
00000076ABCE9E30: {[rn3_2.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEA010: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEA290: {[rn3_4.p Value[8 x 8 x 64 x *1]] }
00000076ABCEA330: {[rn3_4.y Value[8 x 8 x 64 x *1]] }
00000076ABCEA3D0: {[rn3_5.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEA470: {[rn3_1.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEA510: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEA650: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEA790: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *1]] }
00000076ABCEA830: {[rn3_2.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEA8D0: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEAAB0: {[rn3_7.p Value[8 x 8 x 64 x *1]] }
00000076ABCEABF0: {[rn3_9.p Value[8 x 8 x 64 x *1]] }
00000076ABCEADD0: {[rn3_9.y Value[8 x 8 x 64 x *1]] }
00000076ABCEAFB0: {[rn3_6.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEB0F0: {[rn3_6.y Value[8 x 8 x 64 x *1]] }
00000076ABCEB230: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEB2D0: {[rn3_6.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEB410: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEB5F0: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEB690: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEB730: {[rn3_7.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEB7D0: {[rn3_7.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEB870: {[rn3_8.y Value[8 x 8 x 64 x *1]] }
00000076ABCEB9B0: {[rn3_5.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEBA50: {[rn3_5.p Value[8 x 8 x 64 x *1]] }
00000076ABCEBAF0: {[rn3_7.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEBCD0: {[rn3_9.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEBD70: {[rn3_9.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEBE10: {[rn3_9.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEBEB0: {[rn3_8.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEBFF0: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEC310: {[rn3_5.y Value[8 x 8 x 64 x *1]] }
00000076ABCEC3B0: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEC450: {[rn3_6.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEC630: {[rn3_8.p Value[8 x 8 x 64 x *1]] }
00000076ABCEC810: {[rn3_8.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEC8B0: {[rn3_8.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEC950: {[rn3_5.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEC9F0: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCECB30: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCECBD0: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCECDB0: {[rn3_7.y Value[8 x 8 x 64 x *1]] }
00000076ABCED030: {[rn3_6.p Value[8 x 8 x 64 x *1]] }
00000076ABCED210: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCED350: {[rn3_11.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCED490: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCED5D0: {[rn3_14.p Value[8 x 8 x 64 x *1]] }
00000076ABCED710: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCED8F0: {[rn3_11.p Value[8 x 8 x 64 x *1]] }
00000076ABCED990: {[rn3_13.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEDAD0: {[rn3_10.y Value[8 x 8 x 64 x *1]] }
00000076ABCEDB70: {[rn3_12.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEDCB0: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEDFD0: {[rn3_12.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEE070: {[rn3_13.p Value[8 x 8 x 64 x *1]] }
00000076ABCEE110: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEE2F0: {[rn3_11.y Value[8 x 8 x 64 x *1]] }
00000076ABCEE390: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEE430: {[rn3_11.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEE4D0: {[rn3_13.y Value[8 x 8 x 64 x *1]] }
00000076ABCEE610: {[rn3_14.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEE6B0: {[rn3_12.y Value[8 x 8 x 64 x *1]] }
00000076ABCEE750: {[rn3_12.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEE930: {[rn3_13.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEE9D0: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEEA70: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEEB10: {[rn3_10.p Value[8 x 8 x 64 x *1]] }
00000076ABCEEC50: {[rn3_11.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEECF0: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEED90: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEEF70: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEF0B0: {[rn3_13.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEF150: {[rn3_10.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCEF290: {[rn3_14.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEF5B0: {[rn3_12.p Value[8 x 8 x 64 x *1]] }
00000076ABCEF650: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEF790: {[rn3_14.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCEFB50: {[rn3_15.y Value[8 x 8 x 64 x *1]] }
00000076ABCEFD30: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEFE70: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCEFF10: {[pool Value[1 x 1 x 64 x *1]] }
00000076ABCF0050: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCF0190: {[rn3_17.p Value[8 x 8 x 64 x *1]] }
00000076ABCF0230: {[rn3_16.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCF02D0: {[rn3_15.p Value[8 x 8 x 64 x *1]] }
00000076ABCF0370: {[rn3_17.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCF0410: {[rn3_17.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCF04B0: {[rn3_18.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCF0550: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCF05F0: {[rn3_15.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCF0690: {[rn3_18.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCF0910: {[rn3_14.y Value[8 x 8 x 64 x *1]] }
00000076ABCF0AF0: {[rn3_16.p Value[8 x 8 x 64 x *1]] }
00000076ABCF0B90: {[rn3_18.c2.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCF0C30: {[rn3_16.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCF0D70: {[OutputNodes.z Value[10 x *1]] }
00000076ABCF0F50: {[rn3_16.y Value[8 x 8 x 64 x *1]] }
00000076ABCF0FF0: {[rn3_17.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCF1270: {[rn3_15.c1.y Value[8 x 8 x 64 x *1]] }
00000076ABCF13B0: {[rn3_16.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCF1630: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCF16D0: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCF1810: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076ABCF19F0: {[rn3_17.y Value[8 x 8 x 64 x *1]] }
00000076ABCF1A90: {[rn3_18.p Value[8 x 8 x 64 x *1]] }
00000076ABCF1B30: {[rn3_18.y Value[8 x 8 x 64 x *1]] }
00000076ABCF1BD0: {[rn3_15.c1.c.c.c Value[8 x 8 x 64 x *1]] }
00000076ABCF1C70: {[OutputNodes.t Value[10 x *1]] }
00000076ABCF1D10: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *1]] }
00000076AC20BA30: {[rn1_9.c1.c.c.b Value[16 x 1]] }
00000076AC20BB70: {[rn1_8.c2.c.b Value[16 x 1]] }
00000076AC20BF30: {[rn1_8.c2.c.isd Value[16 x 1]] }
00000076AC20C070: {[rn1_8.c2.c.sc Value[16 x 1]] }
00000076AC20C890: {[rn1_8.c1.c.W Value[16 x 144]] }
00000076AC20CCF0: {[rn1_8.c2.c.m Value[16 x 1]] }
00000076AC20CF70: {[rn1_8.c2.W Value[16 x 144]] }
00000076AC20D150: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
00000076AC20D830: {[rn1_8.c1.c.c.m Value[16 x 1]] }
00000076ADA6CE00: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
00000076B3E49180: {[rn1_4.c1.c.W Value[16 x 144]] }
00000076B3E49220: {[rn1_4.c2.c.isd Value[16 x 1]] }
00000076B3E49400: {[rn1_4.c2.c.m Value[16 x 1]] }
00000076B3E49FE0: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
00000076B3E4AB20: {[rn1_4.c2.c.b Value[16 x 1]] }
00000076B3E4AF80: {[rn1_3.c2.W Value[16 x 144]] }
00000076B3E4B200: {[rn1_4.c1.c.c.m Value[16 x 1]] }
00000076B3E4B2A0: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
00000076B3E4B340: {[rn1_4.c2.c.sc Value[16 x 1]] }
00000076B3E4B520: {[rn1_4.c2.W Value[16 x 144]] }
00000076B3E4B840: {[rn1_4.c1.c.c.b Value[16 x 1]] }
00000076B3E55CA0: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
00000076B3E55DE0: {[rn1_7.c1.c.c.m Value[16 x 1]] }
00000076B3E55E80: {[rn1_6.c1.c.c.m Value[16 x 1]] }
00000076B3E55FC0: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
00000076B3E56060: {[rn1_6.c2.c.m Value[16 x 1]] }
00000076B3E561A0: {[rn1_6.c2.c.sc Value[16 x 1]] }
00000076B3E562E0: {[rn1_5.c1.c.c.m Value[16 x 1]] }
00000076B3E56420: {[rn1_5.c2.c.m Value[16 x 1]] }
00000076B3E567E0: {[rn1_6.c2.W Value[16 x 144]] }
00000076B3E56880: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
00000076B3E56920: {[rn1_7.c1.c.c.b Value[16 x 1]] }
00000076B3E569C0: {[rn1_5.c1.c.W Value[16 x 144]] }
00000076B3E56A60: {[rn1_5.c2.c.b Value[16 x 1]] }
00000076B3E56C40: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
00000076B3E56E20: {[rn1_6.c1.c.c.b Value[16 x 1]] }
00000076B3E56F60: {[rn1_5.c2.c.isd Value[16 x 1]] }
00000076B3E571E0: {[rn1_6.c2.c.b Value[16 x 1]] }
00000076B3E57280: {[rn1_6.c2.c.isd Value[16 x 1]] }
00000076B3E573C0: {[rn1_5.c1.c.c.b Value[16 x 1]] }
00000076B3E57460: {[rn1_5.c2.W Value[16 x 144]] }
00000076B3E57500: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
00000076B3E57C80: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
00000076B3E57E60: {[rn1_6.c1.c.W Value[16 x 144]] }
00000076B3E57F00: {[rn1_5.c2.c.sc Value[16 x 1]] }
00000076B3E58220: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
00000076B3E58400: {[rn1_7.c2.c.sc Value[16 x 1]] }
00000076B3E585E0: {[rn1_7.c2.c.b Value[16 x 1]] }
00000076B3E587C0: {[rn1_7.c2.c.isd Value[16 x 1]] }
00000076B3E589A0: {[rn1_7.c2.c.m Value[16 x 1]] }
00000076B3E58CC0: {[rn1_7.c2.W Value[16 x 144]] }
00000076B3E58D60: {[rn1_8.c1.c.c.b Value[16 x 1]] }
00000076B3E58F40: {[rn1_7.c1.c.W Value[16 x 144]] }
00000076BE2D8960: {[rn1_3.c2.c.b Value[16 x 1]] }
00000076BE2D8B40: {[rn1_3.c2.c.isd Value[16 x 1]] }
00000076BE2D8BE0: {[rn1_3.c2.c.m Value[16 x 1]] }
00000076BE2D8D20: {[rn1_2.c1.c.c.b Value[16 x 1]] }
00000076BE2D8DC0: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
00000076BE2D8F00: {[rn1_3.c2.c.sc Value[16 x 1]] }
00000076BE2D8FA0: {[rn1_18.c2.c.sc Value[16 x 1]] }
00000076BE2D9040: {[rn1_2.c2.c.sc Value[16 x 1]] }
00000076BE2D9180: {[rn1_2.c2.W Value[16 x 144]] }
00000076BE2D92C0: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
00000076BE2D9C20: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
00000076BE2D9CC0: {[rn1_3.c1.c.W Value[16 x 144]] }
00000076BE2D9D60: {[rn1_18.c2.c.m Value[16 x 1]] }
00000076BE2DA080: {[rn1_18.c2.c.b Value[16 x 1]] }
00000076BE2DA260: {[rn1_2.c2.c.isd Value[16 x 1]] }
00000076BE2DA3A0: {[rn1_2.c2.c.m Value[16 x 1]] }
00000076BE2DA580: {[rn1_3.c1.c.c.b Value[16 x 1]] }
00000076BE2DA760: {[rn1_3.c1.c.c.m Value[16 x 1]] }
00000076BE2DA800: {[rn1_18.c2.W Value[16 x 144]] }
00000076BE2DA8A0: {[rn1_2.c1.c.c.m Value[16 x 1]] }
00000076BE2DA940: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
00000076BE2DAA80: {[rn1_2.c1.c.W Value[16 x 144]] }
00000076BE2DAB20: {[rn1_18.c2.c.isd Value[16 x 1]] }
00000076BE2DADA0: {[rn1_2.c2.c.b Value[16 x 1]] }
00000076BE2DDAA0: {[rn1_1.c2.W Value[16 x 144]] }
00000076BE2DDBE0: {[rn1_1.c1.c.c.b Value[16 x 1]] }
00000076BE2DDF00: {[rn1_1.c2.c.b Value[16 x 1]] }
00000076BE2DE040: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
00000076BE2DE180: {[rn1_10.c1.c.c.m Value[16 x 1]] }
00000076BE2DE2C0: {[features Value[32 x 32 x 3 x *1]] }
00000076BE2DE540: {[rn1_1.c2.c.isd Value[16 x 1]] }
00000076BE2DE680: {[rn1_10.c1.c.W Value[16 x 144]] }
00000076BE2DE720: {[conv1.c.c.sc Value[16 x 1]] }
00000076BE2DEA40: {[labels Value[10 x *1]] }
00000076BE2DECC0: {[rn1_1.c1.c.c.m Value[16 x 1]] }
00000076BE2DF080: {[rn1_1.c2.c.sc Value[16 x 1]] }
00000076BE2DF4E0: {[rn1_10.c1.c.c.b Value[16 x 1]] }
00000076BE2DF6C0: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
00000076BE2DF760: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
00000076BE2DF800: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
00000076BE2DF940: {[conv1.c.W Value[16 x 27]] }
00000076BE2DF9E0: {[conv1.c.c.isd Value[16 x 1]] }
00000076BE2DFA80: {[OutputNodes.b Value[10]] }
00000076BE2DFB20: {[conv1.c.c.b Value[16 x 1]] }
00000076BE2DFBC0: {[conv1.c.c.m Value[16 x 1]] }
00000076BE2DFDA0: {[rn1_1.c1.c.W Value[16 x 144]] }
00000076BE2DFEE0: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
00000076BE2E0020: {[rn1_1.c2.c.m Value[16 x 1]] }
00000076BE2E00C0: {[rn1_11.c2.c.b Value[16 x 1]] }
00000076BE2E0160: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
00000076BE2E0200: {[rn1_12.c2.c.b Value[16 x 1]] }
00000076BE2E0480: {[rn1_12.c2.c.isd Value[16 x 1]] }
00000076BE2E05C0: {[rn1_12.c2.c.m Value[16 x 1]] }
00000076BE2E07A0: {[rn1_12.c2.c.sc Value[16 x 1]] }
00000076BE2E0A20: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
00000076BE2E0E80: {[rn1_12.c1.c.c.m Value[16 x 1]] }
00000076BE2E0FC0: {[rn1_10.c2.c.m Value[16 x 1]] }
00000076BE2E1060: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
00000076BE2E1240: {[rn1_11.c1.c.c.m Value[16 x 1]] }
00000076BE2E1420: {[rn1_10.c2.W Value[16 x 144]] }
00000076BE2E1600: {[rn1_10.c2.c.isd Value[16 x 1]] }
00000076BE2E1920: {[rn1_10.c2.c.sc Value[16 x 1]] }
00000076BE2E1B00: {[rn1_12.c1.c.c.b Value[16 x 1]] }
00000076BE2E1C40: {[rn1_11.c1.c.c.b Value[16 x 1]] }
00000076BE2E2000: {[rn1_11.c2.c.m Value[16 x 1]] }
00000076BE2E21E0: {[rn1_12.c1.c.W Value[16 x 144]] }
00000076BE2E2460: {[rn1_11.c1.c.W Value[16 x 144]] }
00000076BE2E2500: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
00000076BE2E25A0: {[rn1_11.c2.c.sc Value[16 x 1]] }
00000076BE2E26E0: {[rn1_11.c2.c.isd Value[16 x 1]] }
00000076BE2E2780: {[rn1_10.c2.c.b Value[16 x 1]] }
00000076BE2E2820: {[rn1_11.c2.W Value[16 x 144]] }
00000076BE2E2A00: {[rn1_15.c1.c.c.b Value[16 x 1]] }
00000076BE2E2B40: {[rn1_13.c2.c.sc Value[16 x 1]] }
00000076BE2E2C80: {[rn1_14.c1.c.c.m Value[16 x 1]] }
00000076BE2E3040: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
00000076BE2E3220: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
00000076BE2E3400: {[rn1_14.c2.c.b Value[16 x 1]] }
00000076BE2E3680: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
00000076BE2E39A0: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
00000076BE2E3A40: {[rn1_14.c1.c.W Value[16 x 144]] }
00000076BE2E3AE0: {[rn1_12.c2.W Value[16 x 144]] }
00000076BE2E3EA0: {[rn1_13.c2.c.isd Value[16 x 1]] }
00000076BE2E3FE0: {[rn1_13.c1.c.c.m Value[16 x 1]] }
00000076BE2E4080: {[rn1_13.c2.W Value[16 x 144]] }
00000076BE2E41C0: {[rn1_13.c2.c.m Value[16 x 1]] }
00000076BE2E4300: {[rn1_14.c1.c.c.b Value[16 x 1]] }
00000076BE2E43A0: {[rn1_13.c1.c.W Value[16 x 144]] }
00000076BE2E4440: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
00000076BE2E46C0: {[rn1_14.c2.c.sc Value[16 x 1]] }
00000076BE2E49E0: {[rn1_13.c1.c.c.b Value[16 x 1]] }
00000076BE2E4B20: {[rn1_13.c2.c.b Value[16 x 1]] }
00000076BE2E4D00: {[rn1_14.c2.c.isd Value[16 x 1]] }
00000076BE2E4F80: {[rn1_14.c2.c.m Value[16 x 1]] }
00000076BE2E5020: {[rn1_14.c2.W Value[16 x 144]] }
00000076BE2E50C0: {[rn1_15.c2.c.m Value[16 x 1]] }
00000076BE2E5160: {[rn1_16.c2.c.b Value[16 x 1]] }
00000076BE2E5340: {[rn1_16.c2.c.sc Value[16 x 1]] }
00000076BE2E5520: {[rn1_15.c2.W Value[16 x 144]] }
00000076BE2E5660: {[rn1_16.c2.W Value[16 x 144]] }
00000076BE2E58E0: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
00000076BE2E5D40: {[rn1_16.c1.c.c.m Value[16 x 1]] }
00000076BE2E5DE0: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
00000076BE2E6060: {[rn1_15.c2.c.sc Value[16 x 1]] }
00000076BE2E61A0: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
00000076BE2E6240: {[rn1_17.c1.c.W Value[16 x 144]] }
00000076BE2E62E0: {[rn1_16.c1.c.c.b Value[16 x 1]] }
00000076BE2E6420: {[rn1_16.c2.c.m Value[16 x 1]] }
00000076BE2E64C0: {[rn1_17.c1.c.c.b Value[16 x 1]] }
00000076BE2E6880: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
00000076BE2E6BA0: {[rn1_15.c2.c.isd Value[16 x 1]] }
00000076BE2E6C40: {[rn1_16.c2.c.isd Value[16 x 1]] }
00000076BE2E6CE0: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
00000076BE2E6E20: {[rn1_17.c1.c.c.m Value[16 x 1]] }
00000076BE2E7000: {[rn1_17.c2.c.b Value[16 x 1]] }
00000076BE2E7320: {[rn1_15.c1.c.W Value[16 x 144]] }
00000076BE2E73C0: {[rn1_16.c1.c.W Value[16 x 144]] }
00000076BE2E7500: {[rn1_15.c1.c.c.m Value[16 x 1]] }
00000076BE2E7640: {[rn1_15.c2.c.b Value[16 x 1]] }
00000076BE2E7960: {[rn1_18.c1.c.c.m Value[16 x 1]] }
00000076BE2E7A00: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
00000076BE2E7F00: {[rn1_17.c2.c.isd Value[16 x 1]] }
00000076BE2E8220: {[rn1_18.c1.c.c.b Value[16 x 1]] }
00000076BE2E82C0: {[rn1_17.c2.c.m Value[16 x 1]] }
00000076BE2E8400: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
00000076BE2E84A0: {[rn1_18.c1.c.W Value[16 x 144]] }
00000076BE2E8680: {[rn1_17.c2.c.sc Value[16 x 1]] }
00000076BE2E8720: {[rn1_17.c2.W Value[16 x 144]] }
00000076BEA5C880: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
00000076BEA5C9C0: {[rn1_9.c2.c.isd Value[16 x 1]] }
00000076BEA5CB00: {[rn2_1.c2.W Value[32 x 288]] }
00000076BEA5D0A0: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
00000076BEA5D280: {[rn2_1.c2.c.m Value[32 x 1]] }
00000076BEA5D320: {[rn2_1.c2.c.isd Value[32 x 1]] }
00000076BEA5D3C0: {[rn2_1.c_proj.m Value[32 x 1]] }
00000076BEA5D460: {[rn2_1.c_proj.b Value[32 x 1]] }
00000076BEA5D780: {[rn2_1.c1.c.c.m Value[32 x 1]] }
00000076BEA5D8C0: {[rn1_9.c1.c.W Value[16 x 144]] }
00000076BEA5DA00: {[rn1_9.c2.c.sc Value[16 x 1]] }
00000076BEA5DB40: {[rn2_1.c2.c.sc Value[32 x 1]] }
00000076BEA5DDC0: {[rn2_1.c_proj.sc Value[32 x 1]] }
00000076BEA5DE60: {[rn2_1.c1.c.W Value[32 x 144]] }
00000076BEA5E040: {[rn1_9.c2.W Value[16 x 144]] }
00000076BEA5E2C0: {[rn1_9.c2.c.m Value[16 x 1]] }
00000076BEA5E4A0: {[rn1_9.c2.c.b Value[16 x 1]] }
00000076BEA5E5E0: {[rn2_1.c1.c.c.b Value[32 x 1]] }
00000076BEA5E860: {[rn2_1.c2.c.b Value[32 x 1]] }
00000076BEA5E900: {[rn2_10.c1.c.c.b Value[32 x 1]] }
00000076BEA5EA40: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
00000076BEA5EAE0: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
00000076BEA5ECC0: {[rn2_1.c_proj.isd Value[32 x 1]] }
00000076BEA5EF40: {[rn2_10.c1.c.c.m Value[32 x 1]] }
00000076BEA5F260: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
00000076BEA5F580: {[rn2_11.c2.c.b Value[32 x 1]] }
00000076BEA5F6C0: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
00000076BEA5F9E0: {[rn2_11.c1.c.c.m Value[32 x 1]] }
00000076BEA5FA80: {[rn2_11.c2.c.isd Value[32 x 1]] }
00000076BEA5FB20: {[rn2_12.c1.c.W Value[32 x 288]] }
00000076BEA5FD00: {[rn2_11.c2.c.sc Value[32 x 1]] }
00000076BEA5FE40: {[rn2_10.c2.c.isd Value[32 x 1]] }
00000076BEA5FEE0: {[rn2_12.c1.c.c.m Value[32 x 1]] }
00000076BEA60020: {[rn2_12.c2.c.isd Value[32 x 1]] }
00000076BEA60200: {[rn2_12.c2.c.b Value[32 x 1]] }
00000076BEA60340: {[rn2_10.c2.c.sc Value[32 x 1]] }
00000076BEA60480: {[rn2_11.c2.c.m Value[32 x 1]] }
00000076BEA60520: {[rn2_11.c2.W Value[32 x 288]] }
00000076BEA60700: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
00000076BEA608E0: {[rn2_10.c2.W Value[32 x 288]] }
00000076BEA60A20: {[rn2_12.c1.c.c.b Value[32 x 1]] }
00000076BEA60CA0: {[rn2_10.c1.c.W Value[32 x 288]] }
00000076BEA60E80: {[rn2_10.c2.c.m Value[32 x 1]] }
00000076BEA60FC0: {[rn2_10.c2.c.b Value[32 x 1]] }
00000076BEA61240: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
00000076BEA61380: {[rn2_11.c1.c.W Value[32 x 288]] }
00000076BEA61420: {[rn2_11.c1.c.c.b Value[32 x 1]] }
00000076BEA617E0: {[rn2_13.c1.c.W Value[32 x 288]] }
00000076BEA61920: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
00000076BEA619C0: {[rn2_12.c2.c.m Value[32 x 1]] }
00000076BEA61A60: {[rn2_14.c2.c.sc Value[32 x 1]] }
00000076BEA61BA0: {[rn2_13.c2.c.sc Value[32 x 1]] }
00000076BEA61CE0: {[rn2_14.c1.c.c.m Value[32 x 1]] }
00000076BEA61EC0: {[rn2_14.c2.W Value[32 x 288]] }
00000076BEA623C0: {[rn2_15.c1.c.c.b Value[32 x 1]] }
00000076BEA62460: {[rn2_12.c2.c.sc Value[32 x 1]] }
00000076BEA62820: {[rn2_13.c2.c.b Value[32 x 1]] }
00000076BEA628C0: {[rn2_13.c2.W Value[32 x 288]] }
00000076BEA62B40: {[rn2_12.c2.W Value[32 x 288]] }
00000076BEA62E60: {[rn2_13.c2.c.m Value[32 x 1]] }
00000076BEA62F00: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
00000076BEA62FA0: {[rn2_13.c1.c.c.m Value[32 x 1]] }
00000076BEA63180: {[rn2_14.c1.c.c.b Value[32 x 1]] }
00000076BEA63360: {[rn2_13.c1.c.c.b Value[32 x 1]] }
00000076BEA634A0: {[rn2_13.c2.c.isd Value[32 x 1]] }
00000076BEA63900: {[rn2_14.c2.c.b Value[32 x 1]] }
00000076BEA639A0: {[rn2_14.c2.c.isd Value[32 x 1]] }
00000076BEA63AE0: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
00000076BEA63C20: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
00000076BEA63E00: {[rn2_14.c1.c.W Value[32 x 288]] }
00000076BEA63F40: {[rn2_14.c2.c.m Value[32 x 1]] }
00000076BEA64120: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
00000076BEA643A0: {[rn2_15.c1.c.c.m Value[32 x 1]] }
00000076BEA644E0: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
00000076BEA64620: {[rn2_15.c1.c.W Value[32 x 288]] }
00000076C00A3120: {[rn2_8.c1.c.c.m Value[32 x 1]] }
00000076C00A3300: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
00000076C00A33A0: {[rn2_7.c2.c.sc Value[32 x 1]] }
00000076C00A3440: {[rn2_6.c2.c.sc Value[32 x 1]] }
00000076C00A34E0: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
00000076C00A36C0: {[rn2_6.c2.W Value[32 x 288]] }
00000076C00A3760: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
00000076C00A3800: {[rn2_6.c1.c.c.m Value[32 x 1]] }
00000076C00A38A0: {[rn2_6.c1.c.W Value[32 x 288]] }
00000076C00A3C60: {[rn2_7.c2.c.b Value[32 x 1]] }
00000076C00A3DA0: {[rn2_7.c2.c.isd Value[32 x 1]] }
00000076C00A4200: {[rn2_6.c2.c.b Value[32 x 1]] }
00000076C00A4340: {[rn2_6.c2.c.isd Value[32 x 1]] }
00000076C00A4480: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
00000076C00A45C0: {[rn2_6.c1.c.c.b Value[32 x 1]] }
00000076C00A4840: {[rn2_7.c1.c.c.b Value[32 x 1]] }
00000076C00A48E0: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
00000076C00A4980: {[rn2_7.c2.W Value[32 x 288]] }
00000076C00A4B60: {[rn2_6.c2.c.m Value[32 x 1]] }
00000076C00A4CA0: {[rn2_7.c1.c.c.m Value[32 x 1]] }
00000076C00A4D40: {[rn2_7.c2.c.m Value[32 x 1]] }
00000076C00A5060: {[rn2_8.c1.c.c.b Value[32 x 1]] }
00000076C00A5420: {[rn2_7.c1.c.W Value[32 x 288]] }
00000076C00A5740: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
00000076C00A5880: {[rn3_1.c1.c.W Value[64 x 288]] }
00000076C00A59C0: {[rn2_9.c2.c.m Value[32 x 1]] }
00000076C00A5CE0: {[rn2_9.c1.c.c.m Value[32 x 1]] }
00000076C00A5D80: {[rn2_8.c2.c.isd Value[32 x 1]] }
00000076C00A5E20: {[rn2_9.c2.c.isd Value[32 x 1]] }
00000076C00A6280: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
00000076C00A6320: {[rn2_9.c2.W Value[32 x 288]] }
00000076C00A6460: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
00000076C00A6500: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
00000076C00A6A00: {[rn3_1.c1.c.c.m Value[64 x 1]] }
00000076C00A6AA0: {[rn2_8.c2.c.b Value[32 x 1]] }
00000076C00A6C80: {[rn3_1.c2.c.b Value[64 x 1]] }
00000076C00A6D20: {[rn2_9.c1.c.W Value[32 x 288]] }
00000076C00A7040: {[rn2_8.c2.c.m Value[32 x 1]] }
00000076C00A70E0: {[rn2_8.c2.W Value[32 x 288]] }
00000076C00A74A0: {[rn2_9.c1.c.c.b Value[32 x 1]] }
00000076C00A7540: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
00000076C00A77C0: {[rn3_1.c2.c.isd Value[64 x 1]] }
00000076C00A7900: {[rn3_1.c2.c.m Value[64 x 1]] }
00000076C00A7A40: {[rn2_8.c1.c.W Value[32 x 288]] }
00000076C00A7AE0: {[rn2_8.c2.c.sc Value[32 x 1]] }
00000076C00A7D60: {[rn2_9.c2.c.b Value[32 x 1]] }
00000076C00A7F40: {[rn2_9.c2.c.sc Value[32 x 1]] }
00000076C00A7FE0: {[rn3_1.c1.c.c.b Value[64 x 1]] }
00000076C00A8120: {[rn3_10.c2.c.sc Value[64 x 1]] }
00000076C00A8440: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
00000076C00A88A0: {[rn3_11.c2.c.isd Value[64 x 1]] }
00000076C00A8BC0: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
00000076C00A8C60: {[rn3_11.c2.c.m Value[64 x 1]] }
00000076C00A8E40: {[rn3_1.c_proj.isd Value[64 x 1]] }
00000076C00A8F80: {[rn3_1.c2.c.sc Value[64 x 1]] }
00000076C00A90C0: {[rn3_10.c2.c.b Value[64 x 1]] }
00000076C00A92A0: {[rn3_10.c2.c.isd Value[64 x 1]] }
00000076C00A9340: {[rn3_11.c1.c.c.b Value[64 x 1]] }
00000076C00A93E0: {[rn3_1.c2.W Value[64 x 576]] }
00000076C00A9520: {[rn3_1.c_proj.sc Value[64 x 1]] }
00000076C00A95C0: {[rn3_11.c1.c.W Value[64 x 576]] }
00000076C00A9660: {[rn3_10.c2.W Value[64 x 576]] }
00000076C00A9700: {[rn3_10.c1.c.c.b Value[64 x 1]] }
00000076C00A97A0: {[rn3_1.c_proj.m Value[64 x 1]] }
00000076C00A9840: {[rn3_1.c_proj.b Value[64 x 1]] }
00000076C00A9D40: {[rn3_10.c1.c.W Value[64 x 576]] }
00000076C00A9F20: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
00000076C00AA060: {[rn3_11.c1.c.c.m Value[64 x 1]] }
00000076C00AA240: {[rn3_11.c2.c.b Value[64 x 1]] }
00000076C00AA420: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
00000076C00AA560: {[rn3_10.c2.c.m Value[64 x 1]] }
00000076C00AA6A0: {[rn3_10.c1.c.c.m Value[64 x 1]] }
00000076C00AA880: {[rn3_11.c2.W Value[64 x 576]] }
00000076C00AAC40: {[rn3_12.c1.c.c.b Value[64 x 1]] }
00000076C00AAE20: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
00000076C00AAF60: {[rn3_11.c2.c.sc Value[64 x 1]] }

08/04/2016 08:08:17: Minibatch[1-200]: Err = 0.90156250 * 3200; CE = 2.30263074 * 3200
08/04/2016 08:08:22: Minibatch[201-400]: Err = 0.89187500 * 3200; CE = 2.30247148 * 3200
08/04/2016 08:08:28: Minibatch[401-600]: Err = 0.90625000 * 3200; CE = 2.30264824 * 3200
08/04/2016 08:08:29: Minibatch[601-625]: Err = 0.90250000 * 400; CE = 2.30279175 * 400
08/04/2016 08:08:29: Final Results: Minibatch[1-625]: Err = 0.90000000 * 10000; CE = 2.30259181 * 10000; perplexity = 10.00006721

08/04/2016 08:08:29: Action "test" complete.

08/04/2016 08:08:29: __COMPLETED__