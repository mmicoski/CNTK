CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
Looking for data in: /home/philly/data/CNTKTestData
Copying test data to local directory
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.cntk currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=1]] Train=[SGD=[epochSize=128]] Train=[reader=[randomize=none]] Train=[SGD=[minibatchSize=16]] Test=[minibatchSize=16] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
08/04/2016 14:35:56: Redirecting stderr to file -_Train_Test.log
08/04/2016 14:35:56: -------------------------------------------------------------------
08/04/2016 14:35:56: Build info: 

08/04/2016 14:35:56: 		Built time: Aug  4 2016 13:05:36
08/04/2016 14:35:56: 		Last modified date: Thu Aug  4 12:33:33 2016
08/04/2016 14:35:56: 		Build type: release
08/04/2016 14:35:56: 		Build target: GPU
08/04/2016 14:35:56: 		With 1bit-SGD: no
08/04/2016 14:35:56: 		Math lib: mkl
08/04/2016 14:35:56: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 14:35:56: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 14:35:56: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 14:35:56: 		Build Branch: HEAD
08/04/2016 14:35:56: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 14:35:56: 		Built by philly on 643085f7f8c2
08/04/2016 14:35:56: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 14:35:56: -------------------------------------------------------------------
08/04/2016 14:35:57: -------------------------------------------------------------------
08/04/2016 14:35:57: GPU info:

08/04/2016 14:35:57: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:35:57: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:35:57: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:35:57: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:35:57: -------------------------------------------------------------------

08/04/2016 14:35:57: Running on localhost at 2016/08/04 14:35:57
08/04/2016 14:35:57: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.cntk  currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData  RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu  DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=1]]  Train=[SGD=[epochSize=128]]  Train=[reader=[randomize=none]]  Train=[SGD=[minibatchSize=16]]  Test=[minibatchSize=16]  stderr=-



08/04/2016 14:35:57: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 14:35:57: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros="$ConfigDir$/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="$OutputDir$/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "$ConfigDir$/16to32.txt"
Proj32to64Filename = "$ConfigDir$/32to64.txt"
Train=[
    action="train"
    modelPath="$ModelDir$/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="$ModelDir$/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="$DataDir$/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="$DataDir$/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

08/04/2016 14:35:57: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 14:35:57: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 14:35:57: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models"
ndlMacros="/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision="float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch="true"
parallelTrain="false"
command=Train:Test
stderr="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/04_ResNet_56"
traceLevel=1
numMBsToShowResult=200
Proj16to32Filename = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/16to32.txt"
Proj32to64Filename = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/32to64.txt"
Train=[
    action="train"
    modelPath="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
Test=[
    action="test"
    modelPath="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
]
currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=1]]
Train=[SGD=[epochSize=128]]
Train=[reader=[randomize=none]]
Train=[SGD=[minibatchSize=16]]
Test=[minibatchSize=16]
stderr=-

08/04/2016 14:35:57: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 14:35:57: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 04_ResNet_56.cntk:command=Train:Test
configparameters: 04_ResNet_56.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 04_ResNet_56.cntk:currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
configparameters: 04_ResNet_56.cntk:DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData
configparameters: 04_ResNet_56.cntk:deviceId=0
configparameters: 04_ResNet_56.cntk:imageLayout=cudnn
configparameters: 04_ResNet_56.cntk:initOnCPUOnly=true
configparameters: 04_ResNet_56.cntk:ModelDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models
configparameters: 04_ResNet_56.cntk:ndlMacros=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 04_ResNet_56.cntk:numMBsToShowResult=200
configparameters: 04_ResNet_56.cntk:OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:parallelTrain=false
configparameters: 04_ResNet_56.cntk:precision=float
configparameters: 04_ResNet_56.cntk:prefetch=true
configparameters: 04_ResNet_56.cntk:Proj16to32Filename=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/16to32.txt
configparameters: 04_ResNet_56.cntk:Proj32to64Filename=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/32to64.txt
configparameters: 04_ResNet_56.cntk:RootDir=.
configparameters: 04_ResNet_56.cntk:RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu
configparameters: 04_ResNet_56.cntk:stderr=-
configparameters: 04_ResNet_56.cntk:Test=[
    action="test"
    modelPath="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
    minibatchSize=512
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/test_map.txt"
        randomize="none"
        features=[
            width=32
            height=32
            channels=3
            cropType="center"
            cropRatio=1
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [minibatchSize=16]

configparameters: 04_ResNet_56.cntk:timestamping=true
configparameters: 04_ResNet_56.cntk:traceLevel=1
configparameters: 04_ResNet_56.cntk:Train=[
    action="train"
    modelPath="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56"
     NDLNetworkBuilder=[
        networkDescription="/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56/../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/04_ResNet_56.ndl"
    ]
    SGD=[
        epochSize=0
        minibatchSize=128
        learningRatesPerMB=0.1*1:1.0*80:0.1*40:0.01
        momentumPerMB=0.9
        maxEpochs=160
        L2RegWeight=0.0001
        dropoutRate=0
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
    ]
    reader=[
        readerType="ImageReader"
        file="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/train_map.txt"
        randomize="auto"
        features=[
            width=32
            height=32
            channels=3
            cropType="random"
            cropRatio=0.8
            jitterType="uniRatio"
            interpolations="linear"
            meanFile="/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/TestData/cifar-10-batches-py/CIFAR-10_mean.xml"
        ]
        labels=[
            labelDim=10
        ]
    ]    
] [SGD=[maxEpochs=1]] [SGD=[epochSize=128]] [reader=[randomize=none]] [SGD=[minibatchSize=16]]

08/04/2016 14:35:57: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 14:35:57: Commands: Train Test
08/04/2016 14:35:57: Precision = "float"
08/04/2016 14:35:57: CNTKModelPath: /tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56
08/04/2016 14:35:57: CNTKCommandTrainInfo: Train : 1
08/04/2016 14:35:57: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 1

08/04/2016 14:35:57: ##############################################################################
08/04/2016 14:35:57: #                                                                            #
08/04/2016 14:35:57: # Action "train"                                                             #
08/04/2016 14:35:57: #                                                                            #
08/04/2016 14:35:57: ##############################################################################

08/04/2016 14:35:57: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/04/2016 14:35:57: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *] -> [32 x 32 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *], [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *] -> [32 x 32 x 16 x *]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *], [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *] -> [16 x 16 x 32 x *]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *], [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *] -> [8 x 8 x 64 x *]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *] -> [1 x 1 x 64 x *]

OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 14:35:58: Created model with 949 nodes on GPU 0.

08/04/2016 14:35:58: Training criterion node(s):
08/04/2016 14:35:58: 	CE = CrossEntropyWithSoftmax

08/04/2016 14:35:58: Evaluation criterion node(s):

08/04/2016 14:35:58: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] }
0x17eda98: {[features Value[32 x 32 x 3 x *]] }
0x7f6eb7300208: {[rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Gradient[16 x 16 x 32 x *]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb73003c8: {[rn2_5.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7300588: {[rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7300748: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7300ac8: {[rn2_6.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb7300c88: {[rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_6.p Value[16 x 16 x 32 x *]] }
0x7f6eb7300e48: {[rn2_6.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Value[16 x 16 x 32 x *]] }
0x7f6eb7301008: {[rn2_6.c2.W Gradient[32 x 288]] [rn2_7.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb73011c8: {[rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb7301388: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb73018c8: {[rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Gradient[16 x 16 x 32 x *]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb7301a88: {[rn2_6.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7301c48: {[rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7301e08: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7302188: {[rn2_7.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb7302348: {[rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_7.p Value[16 x 16 x 32 x *]] }
0x7f6eb7302508: {[rn2_7.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Value[16 x 16 x 32 x *]] }
0x7f6eb73026c8: {[rn2_7.c2.W Gradient[32 x 288]] [rn2_8.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7302888: {[rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb7302a48: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7302f88: {[rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *]] [rn2_6.y Gradient[16 x 16 x 32 x *]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb7303148: {[rn2_7.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7303308: {[rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb73034c8: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7303848: {[rn2_8.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb7303a08: {[rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_8.p Value[16 x 16 x 32 x *]] }
0x7f6eb7303bc8: {[rn2_8.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Value[16 x 16 x 32 x *]] }
0x7f6eb7303d88: {[rn2_8.c2.W Gradient[32 x 288]] [rn2_9.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7303f48: {[rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb7304108: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7304648: {[rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *]] [rn2_7.y Gradient[16 x 16 x 32 x *]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb7304808: {[rn2_8.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb73049c8: {[rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7304b88: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7304f08: {[rn2_9.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb73050c8: {[rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_9.p Value[16 x 16 x 32 x *]] }
0x7f6eb7305288: {[rn2_9.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Value[16 x 16 x 32 x *]] }
0x7f6eb7305448: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.W Gradient[32 x 288]] }
0x7f6eb7305608: {[rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb73057c8: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7305d08: {[rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.c1.y Value[16 x 16 x 32 x *]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *]] [rn2_8.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7305ec8: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *]] [rn2_9.c2.c.b Gradient[32 x 1]] }
0x7f6eb7306088: {[rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7306248: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb73065c8: {[rn2_10.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb7306788: {[rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_10.p Value[16 x 16 x 32 x *]] }
0x7f6eb7306948: {[rn2_10.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Value[16 x 16 x 32 x *]] }
0x7f6eb7306b08: {[rn2_10.c2.W Gradient[32 x 288]] [rn2_11.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7306cc8: {[rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb7306e88: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb73073c8: {[rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.c1.y Value[16 x 16 x 32 x *]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *]] [rn2_9.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7307588: {[rn2_10.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7307748: {[rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7307908: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7307c88: {[rn2_11.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb7307e48: {[rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_11.p Value[16 x 16 x 32 x *]] }
0x7f6eb7308008: {[rn2_11.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Value[16 x 16 x 32 x *]] }
0x7f6eb73081c8: {[rn2_11.c2.W Gradient[32 x 288]] [rn2_12.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7308388: {[rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb7308548: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7308a88: {[rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *]] [rn2_10.y Gradient[16 x 16 x 32 x *]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb7308c48: {[rn2_11.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7308e08: {[rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7308fc8: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7309348: {[rn2_12.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb7309508: {[rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_12.p Value[16 x 16 x 32 x *]] }
0x7f6eb73096c8: {[rn2_12.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Value[16 x 16 x 32 x *]] }
0x7f6eb7309888: {[rn2_12.c2.W Gradient[32 x 288]] [rn2_13.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7309a48: {[rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb7309c08: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730a148: {[rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *]] [rn2_11.y Gradient[16 x 16 x 32 x *]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb730a308: {[rn2_12.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730a4c8: {[rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb730a688: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730aa08: {[rn2_13.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb730abc8: {[rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_13.p Value[16 x 16 x 32 x *]] }
0x7f6eb730ad88: {[rn2_13.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Value[16 x 16 x 32 x *]] }
0x7f6eb730af48: {[rn2_13.c2.W Gradient[32 x 288]] [rn2_14.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730b108: {[rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb730b2c8: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730b808: {[rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *]] [rn2_12.y Gradient[16 x 16 x 32 x *]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb730b9c8: {[rn2_13.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730bb88: {[rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb730bd48: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730c0c8: {[rn2_14.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb730c288: {[rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_14.p Value[16 x 16 x 32 x *]] }
0x7f6eb730c448: {[rn2_14.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Value[16 x 16 x 32 x *]] }
0x7f6eb730c608: {[rn2_14.c2.W Gradient[32 x 288]] [rn2_15.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730c7c8: {[rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb730c988: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730cec8: {[rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *]] [rn2_13.y Gradient[16 x 16 x 32 x *]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb730d088: {[rn2_14.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730d248: {[rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb730d408: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730d788: {[rn2_15.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb730d948: {[rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_15.p Value[16 x 16 x 32 x *]] }
0x7f6eb730db08: {[rn2_15.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Value[16 x 16 x 32 x *]] }
0x7f6eb730dcc8: {[rn2_15.c2.W Gradient[32 x 288]] [rn2_16.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730de88: {[rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb730e048: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730e588: {[rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *]] [rn2_14.y Gradient[16 x 16 x 32 x *]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb730e748: {[rn2_15.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730e908: {[rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb730eac8: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730ee48: {[rn2_16.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb730f008: {[rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_16.p Value[16 x 16 x 32 x *]] }
0x7f6eb730f1c8: {[rn2_16.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Value[16 x 16 x 32 x *]] }
0x7f6eb730f388: {[rn2_16.c2.W Gradient[32 x 288]] [rn2_17.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730f548: {[rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb730f708: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb730fc48: {[rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *]] [rn2_15.y Gradient[16 x 16 x 32 x *]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb730fe08: {[rn2_16.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb730ffc8: {[rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7310188: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7310508: {[rn2_17.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb73106c8: {[rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_17.p Value[16 x 16 x 32 x *]] }
0x7f6eb7310888: {[rn2_17.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Value[16 x 16 x 32 x *]] }
0x7f6eb7310a48: {[rn2_17.c2.W Gradient[32 x 288]] [rn2_18.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7310c08: {[rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb7310dc8: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7311308: {[rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *]] [rn2_16.y Gradient[16 x 16 x 32 x *]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb73114c8: {[rn2_17.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb7311688: {[rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7311848: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb7311bc8: {[rn2_18.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb7311d88: {[rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_18.p Value[16 x 16 x 32 x *]] }
0x7f6eb7311f48: {[rn2_18.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Value[16 x 16 x 32 x *]] }
0x7f6eb7312108: {[rn2_18.c2.W Gradient[32 x 288]] [rn3_1.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb73122c8: {[rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb7312488: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb73129c8: {[rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *]] [rn2_17.y Gradient[16 x 16 x 32 x *]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_1.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7312b88: {[rn2_18.c2.c.b Gradient[32 x 1]] [rn3_1.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7312d48: {[rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7312f08: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7313288: {[rn3_1.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7313448: {[rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c_proj.c Value[8 x 8 x 64 x *]] }
0x7f6eb7313608: {[rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *]] }
0x7f6eb73137c8: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *]] }
0x7f6eb7313d08: {[rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *]] [rn3_1.p Value[8 x 8 x 64 x *]] }
0x7f6eb7313ec8: {[rn3_1.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7314088: {[rn3_1.c2.W Gradient[64 x 576]] [rn3_2.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7314248: {[rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7314408: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb73145c8: {[rn3_1.c_proj.b Gradient[64 x 1]] }
0x7f6eb7314788: {[rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *]] [rn2_18.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb7314948: {[rn3_1.c_proj.y Gradient[8 x 8 x 64 x *]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7314b08: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7314cc8: {[rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7314e88: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7315208: {[rn3_2.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb73153c8: {[rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_2.p Value[8 x 8 x 64 x *]] }
0x7f6eb7315588: {[rn3_2.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Value[8 x 8 x 64 x *]] }
0x7f6eb7315748: {[rn3_2.c2.W Gradient[64 x 576]] [rn3_3.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7315908: {[rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7315ac8: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7316008: {[rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *]] [rn3_1.y Gradient[8 x 8 x 64 x *]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb73161c8: {[rn3_2.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7316388: {[rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7316548: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb73168c8: {[rn3_3.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7316a88: {[rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_3.p Value[8 x 8 x 64 x *]] }
0x7f6eb7316c48: {[rn3_3.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Value[8 x 8 x 64 x *]] }
0x7f6eb7316e08: {[rn3_3.c2.W Gradient[64 x 576]] [rn3_4.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7316fc8: {[rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7317188: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb73176c8: {[rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *]] [rn3_2.y Gradient[8 x 8 x 64 x *]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7317888: {[rn3_3.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7317a48: {[rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7317c08: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7317f88: {[rn3_4.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7318148: {[rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_4.p Value[8 x 8 x 64 x *]] }
0x7f6eb7318308: {[rn3_4.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Value[8 x 8 x 64 x *]] }
0x7f6eb73184c8: {[rn3_4.c2.W Gradient[64 x 576]] [rn3_5.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7318688: {[rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7318848: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7318d88: {[rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *]] [rn3_3.y Gradient[8 x 8 x 64 x *]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7318f48: {[rn3_4.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7319108: {[rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb73192c8: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7319648: {[rn3_5.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7319808: {[rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_5.p Value[8 x 8 x 64 x *]] }
0x7f6eb73199c8: {[rn3_5.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Value[8 x 8 x 64 x *]] }
0x7f6eb7319b88: {[rn3_5.c2.W Gradient[64 x 576]] [rn3_6.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7319d48: {[rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7319f08: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731a448: {[rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *]] [rn3_4.y Gradient[8 x 8 x 64 x *]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb731a608: {[rn3_5.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb731a7c8: {[rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb731a988: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731ad08: {[rn3_6.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb731aec8: {[rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_6.p Value[8 x 8 x 64 x *]] }
0x7f6eb731b088: {[rn3_6.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Value[8 x 8 x 64 x *]] }
0x7f6eb731b248: {[rn3_6.c2.W Gradient[64 x 576]] [rn3_7.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb731b408: {[rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb731b5c8: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731bb08: {[rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *]] [rn3_5.y Gradient[8 x 8 x 64 x *]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb731bcc8: {[rn3_6.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb731be88: {[rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb731c048: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731c3c8: {[rn3_7.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb731c588: {[rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_7.p Value[8 x 8 x 64 x *]] }
0x7f6eb731c748: {[rn3_7.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Value[8 x 8 x 64 x *]] }
0x7f6eb731c908: {[rn3_7.c2.W Gradient[64 x 576]] [rn3_8.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb731cac8: {[rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb731cc88: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731d1c8: {[rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *]] [rn3_6.y Gradient[8 x 8 x 64 x *]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb731d388: {[rn3_7.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb731d548: {[rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb731d708: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731da88: {[rn3_8.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb731dc48: {[rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_8.p Value[8 x 8 x 64 x *]] }
0x7f6eb731de08: {[rn3_8.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Value[8 x 8 x 64 x *]] }
0x7f6eb731dfc8: {[rn3_8.c2.W Gradient[64 x 576]] [rn3_9.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb731e188: {[rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb731e348: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731e888: {[rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *]] [rn3_7.y Gradient[8 x 8 x 64 x *]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb731ea48: {[rn3_8.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb731ec08: {[rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb731edc8: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731f148: {[rn3_9.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb731f308: {[rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_9.p Value[8 x 8 x 64 x *]] }
0x7f6eb731f4c8: {[rn3_9.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Value[8 x 8 x 64 x *]] }
0x7f6eb731f688: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.W Gradient[64 x 576]] }
0x7f6eb731f848: {[rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb731fa08: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb731ff48: {[rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.c1.y Value[8 x 8 x 64 x *]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *]] [rn3_8.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7320108: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *]] [rn3_9.c2.c.b Gradient[64 x 1]] }
0x7f6eb73202c8: {[rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7320488: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7320808: {[rn3_10.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb73209c8: {[rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_10.p Value[8 x 8 x 64 x *]] }
0x7f6eb7320b88: {[rn3_10.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Value[8 x 8 x 64 x *]] }
0x7f6eb7320d48: {[rn3_10.c2.W Gradient[64 x 576]] [rn3_11.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7320f08: {[rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb73210c8: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7321608: {[rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.c1.y Value[8 x 8 x 64 x *]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *]] [rn3_9.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb73217c8: {[rn3_10.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7321988: {[rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7321b48: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7321ec8: {[rn3_11.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7322088: {[rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_11.p Value[8 x 8 x 64 x *]] }
0x7f6eb7322248: {[rn3_11.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Value[8 x 8 x 64 x *]] }
0x7f6eb7322408: {[rn3_11.c2.W Gradient[64 x 576]] [rn3_12.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb73225c8: {[rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7322788: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7322cc8: {[rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *]] [rn3_10.y Gradient[8 x 8 x 64 x *]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7322e88: {[rn3_11.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7323048: {[rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7323208: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7323588: {[rn3_12.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7323748: {[rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_12.p Value[8 x 8 x 64 x *]] }
0x7f6eb7323908: {[rn3_12.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Value[8 x 8 x 64 x *]] }
0x7f6eb7323ac8: {[rn3_12.c2.W Gradient[64 x 576]] [rn3_13.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7323c88: {[rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7323e48: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7324388: {[rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *]] [rn3_11.y Gradient[8 x 8 x 64 x *]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7324548: {[rn3_12.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7324708: {[rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb73248c8: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7324c48: {[rn3_13.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7324e08: {[rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_13.p Value[8 x 8 x 64 x *]] }
0x7f6eb7324fc8: {[rn3_13.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Value[8 x 8 x 64 x *]] }
0x7f6eb7325188: {[rn3_13.c2.W Gradient[64 x 576]] [rn3_14.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7325348: {[rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7325508: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7325a48: {[rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *]] [rn3_12.y Gradient[8 x 8 x 64 x *]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7325c08: {[rn3_13.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7325dc8: {[rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7325f88: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7326308: {[rn3_14.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb73264c8: {[rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_14.p Value[8 x 8 x 64 x *]] }
0x7f6eb7326688: {[rn3_14.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Value[8 x 8 x 64 x *]] }
0x7f6eb7326848: {[rn3_14.c2.W Gradient[64 x 576]] [rn3_15.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7326a08: {[rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7326bc8: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7327108: {[rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *]] [rn3_13.y Gradient[8 x 8 x 64 x *]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb73272c8: {[rn3_14.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7327488: {[rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7327648: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb73279c8: {[rn3_15.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7327b88: {[rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_15.p Value[8 x 8 x 64 x *]] }
0x7f6eb7327d48: {[rn3_15.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Value[8 x 8 x 64 x *]] }
0x7f6eb7327f08: {[rn3_15.c2.W Gradient[64 x 576]] [rn3_16.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb73280c8: {[rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7328288: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb73287c8: {[rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *]] [rn3_14.y Gradient[8 x 8 x 64 x *]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb7328988: {[rn3_15.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7328b48: {[rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb7328d08: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7329088: {[rn3_16.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb7329248: {[rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_16.p Value[8 x 8 x 64 x *]] }
0x7f6eb7329408: {[rn3_16.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Value[8 x 8 x 64 x *]] }
0x7f6eb73295c8: {[rn3_16.c2.W Gradient[64 x 576]] [rn3_17.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb7329788: {[rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb7329948: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb7329e88: {[rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *]] [rn3_15.y Gradient[8 x 8 x 64 x *]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb732a048: {[rn3_16.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb732a208: {[rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb732a3c8: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb732a748: {[rn3_17.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb732a908: {[rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_17.p Value[8 x 8 x 64 x *]] }
0x7f6eb732aac8: {[rn3_17.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Value[8 x 8 x 64 x *]] }
0x7f6eb732ac88: {[rn3_17.c2.W Gradient[64 x 576]] [rn3_18.c1.c.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb732ae48: {[rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb732b008: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb732b548: {[rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *]] [rn3_16.y Gradient[8 x 8 x 64 x *]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.c1.y Value[8 x 8 x 64 x *]] }
0x7f6eb732b708: {[rn3_17.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Value[8 x 8 x 64 x *]] }
0x7f6eb732b8c8: {[rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb732ba88: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *]] }
0x7f6eb732be08: {[rn3_18.c1.c.c.b Gradient[64 x 1]] }
0x7f6eb732bfc8: {[rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *]] [rn3_18.p Value[8 x 8 x 64 x *]] }
0x7f6eb732c188: {[rn3_18.c2.c.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Value[8 x 8 x 64 x *]] }
0x7f6eb732c348: {[pool Value[1 x 1 x 64 x *]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.p Gradient[8 x 8 x 64 x *]] }
0x7f6eb732c508: {[OutputNodes.t Value[10 x *]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *]] [rn3_18.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb732cf88: {[CE Gradient[1]] }
0x7f6eb732d148: {[OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.z Gradient[10 x *]] }
0x7f6eb732d308: {[OutputNodes.t Gradient[10 x *]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *]] [rn3_17.y Gradient[8 x 8 x 64 x *]] }
0x7f6eb732d4c8: {[OutputNodes.b Gradient[10]] }
0x7f6eb732d688: {[pool Gradient[1 x 1 x 64 x *]] [rn3_18.c2.W Gradient[64 x 576]] }
0x7f6eb732d848: {[rn3_18.c2.c.b Gradient[64 x 1]] }
0x7f6eb75d9548: {[rn1_1.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb75d96c8: {[rn1_1.c2.W Gradient[16 x 144]] [rn1_2.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75d9848: {[rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb75d99c8: {[rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb75d9fb8: {[conv1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75da138: {[rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Gradient[32 x 32 x 16 x *]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb75da438: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75da738: {[rn1_1.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_1.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f1838: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f1af8: {[rn1_13.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb75f1c58: {[rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.p Value[32 x 32 x 16 x *]] }
0x7f6eb75f1db8: {[rn1_13.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f1f18: {[rn1_13.c2.W Gradient[16 x 144]] [rn1_14.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f2078: {[rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f21d8: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f25f8: {[rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Gradient[32 x 32 x 16 x *]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f2758: {[rn1_13.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f28b8: {[rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f2a18: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f2cd8: {[rn1_14.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb75f2e38: {[rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_14.p Value[32 x 32 x 16 x *]] }
0x7f6eb75f2f98: {[rn1_14.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f30f8: {[rn1_14.c2.W Gradient[16 x 144]] [rn1_15.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f3258: {[rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f33b8: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f37d8: {[rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *]] [rn1_13.y Gradient[32 x 32 x 16 x *]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f3938: {[rn1_14.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f3a98: {[rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f3bf8: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f3eb8: {[rn1_15.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb75f4018: {[rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_15.p Value[32 x 32 x 16 x *]] }
0x7f6eb75f4178: {[rn1_15.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f42d8: {[rn1_15.c2.W Gradient[16 x 144]] [rn1_16.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f4438: {[rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f4598: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f49b8: {[rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *]] [rn1_14.y Gradient[32 x 32 x 16 x *]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f4b18: {[rn1_15.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f4c78: {[rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f4dd8: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f5098: {[rn1_16.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb75f51f8: {[rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_16.p Value[32 x 32 x 16 x *]] }
0x7f6eb75f5358: {[rn1_16.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f54b8: {[rn1_16.c2.W Gradient[16 x 144]] [rn1_17.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f5618: {[rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f5778: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f5b98: {[rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *]] [rn1_15.y Gradient[32 x 32 x 16 x *]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f5cf8: {[rn1_16.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f5e58: {[rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f5fb8: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f6278: {[rn1_17.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb75f6438: {[rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_17.p Value[32 x 32 x 16 x *]] }
0x7f6eb75f65f8: {[rn1_17.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f67b8: {[rn1_17.c2.W Gradient[16 x 144]] [rn1_18.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f6978: {[rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f6b38: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f7078: {[rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *]] [rn1_16.y Gradient[32 x 32 x 16 x *]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f7238: {[rn1_17.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb75f73f8: {[rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f75b8: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f7938: {[rn1_18.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb75f7af8: {[rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_18.p Value[32 x 32 x 16 x *]] }
0x7f6eb75f7cb8: {[rn1_18.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Value[32 x 32 x 16 x *]] }
0x7f6eb75f7e78: {[rn1_18.c2.W Gradient[16 x 144]] [rn2_1.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75f8038: {[rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb75f81f8: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75f8738: {[rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *]] [rn1_17.y Gradient[32 x 32 x 16 x *]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_1.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb75f88f8: {[rn1_18.c2.c.b Gradient[16 x 1]] [rn2_1.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75f8ab8: {[rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb75f8c78: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75f8ff8: {[rn2_1.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb75f91b8: {[rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c_proj.c Value[16 x 16 x 32 x *]] }
0x7f6eb75f9378: {[rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *]] }
0x7f6eb75f9538: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *]] }
0x7f6eb75f9a78: {[rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *]] [rn2_1.p Value[16 x 16 x 32 x *]] }
0x7f6eb75f9c38: {[rn2_1.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Value[16 x 16 x 32 x *]] }
0x7f6eb75f9df8: {[rn2_1.c2.W Gradient[32 x 288]] [rn2_2.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75f9fb8: {[rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb75fa178: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fa338: {[rn2_1.c_proj.b Gradient[32 x 1]] }
0x7f6eb75fa4f8: {[rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *]] [rn1_18.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb75fa6b8: {[rn2_1.c_proj.y Gradient[16 x 16 x 32 x *]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fa878: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75faa38: {[rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb75fabf8: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75faf78: {[rn2_2.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb75fb138: {[rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_2.p Value[16 x 16 x 32 x *]] }
0x7f6eb75fb2f8: {[rn2_2.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fb4b8: {[rn2_2.c2.W Gradient[32 x 288]] [rn2_3.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75fb678: {[rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb75fb838: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fbd78: {[rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *]] [rn2_1.y Gradient[16 x 16 x 32 x *]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fbf38: {[rn2_2.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75fc0f8: {[rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb75fc2b8: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fc638: {[rn2_3.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb75fc7f8: {[rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_3.p Value[16 x 16 x 32 x *]] }
0x7f6eb75fc9b8: {[rn2_3.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fcb78: {[rn2_3.c2.W Gradient[32 x 288]] [rn2_4.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75fcd38: {[rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb75fcef8: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fd438: {[rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *]] [rn2_2.y Gradient[16 x 16 x 32 x *]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fd5f8: {[rn2_3.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75fd7b8: {[rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb75fd978: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fdcf8: {[rn2_4.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb75fdeb8: {[rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_4.p Value[16 x 16 x 32 x *]] }
0x7f6eb75fe078: {[rn2_4.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_4.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fe238: {[rn2_4.c2.W Gradient[32 x 288]] [rn2_5.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75fe3f8: {[rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb75fe5b8: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75feaf8: {[rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *]] [rn2_3.y Gradient[16 x 16 x 32 x *]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.c1.y Value[16 x 16 x 32 x *]] }
0x7f6eb75fecb8: {[rn2_4.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75fee78: {[rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *]] }
0x7f6eb75ff038: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb75ff3b8: {[rn2_5.c1.c.c.b Gradient[32 x 1]] }
0x7f6eb75ff578: {[rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *]] [rn2_5.p Value[16 x 16 x 32 x *]] }
0x7f6eb75ff738: {[rn2_5.c2.c.y Gradient[16 x 16 x 32 x *]] [rn2_5.y Value[16 x 16 x 32 x *]] }
0x7f6eb75ff8f8: {[rn2_5.c2.W Gradient[32 x 288]] [rn2_6.c1.c.c.c Value[16 x 16 x 32 x *]] }
0x7f6eb75ffab8: {[rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.p Gradient[16 x 16 x 32 x *]] }
0x7f6eb75ffc78: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *]] }
0x7f6eb779e2d8: {[CE Value[1]] }
0x7f6eb7b15108: {[Err Value[1]] }
0x7f6eb7f51af8: {[rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.c1.y Value[32 x 32 x 16 x *]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb7f51cb8: {[rn1_10.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb7f51e78: {[rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb7f52038: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb7f523b8: {[rn1_11.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb7f52578: {[rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_11.p Value[32 x 32 x 16 x *]] }
0x7f6eb7f52738: {[rn1_11.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Value[32 x 32 x 16 x *]] }
0x7f6eb7f528f8: {[rn1_11.c2.W Gradient[16 x 144]] [rn1_12.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb7f52ab8: {[rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb7f52c78: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb7f531b8: {[rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Gradient[32 x 32 x 16 x *]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb7f53378: {[rn1_11.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb7f53538: {[rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb7f536f8: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb7f53a78: {[rn1_12.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb7f53c38: {[rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_12.p Value[32 x 32 x 16 x *]] }
0x7f6eb7f53df8: {[rn1_12.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_12.y Value[32 x 32 x 16 x *]] }
0x7f6eb7f53fb8: {[rn1_12.c2.W Gradient[16 x 144]] [rn1_13.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb7f54178: {[rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb7f54338: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb7f54878: {[rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *]] [rn1_11.y Gradient[32 x 32 x 16 x *]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_13.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb7f54a38: {[rn1_12.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb7f54bf8: {[rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb8738b88: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb8738f58: {[rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb87392d8: {[conv1.c.c.c Gradient[32 x 32 x 16 x *]] [conv1.y Value[32 x 32 x 16 x *]] }
0x7f6eb8739568: {[conv1.c.W Gradient[16 x 27]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb87396e8: {[conv1.c.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb8739868: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb897f088: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb897f398: {[rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_1.p Value[32 x 32 x 16 x *]] }
0x7f6eb89ab018: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb89ab498: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb89ab618: {[rn1_2.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb89ab798: {[rn1_2.c2.W Gradient[16 x 144]] [rn1_3.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb89ab918: {[rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb89aba98: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb89abd98: {[rn1_2.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb89ac098: {[rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb89ac218: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb89ac398: {[rn1_3.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb89ac518: {[rn1_3.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Value[32 x 32 x 16 x *]] }
0x7f6eb89ac698: {[rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_3.p Value[32 x 32 x 16 x *]] }
0x7f6eb89ac818: {[rn1_3.c2.W Gradient[16 x 144]] [rn1_4.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb89ac998: {[rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.p Value[32 x 32 x 16 x *]] }
0x7f6eb89acc98: {[rn1_2.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Value[32 x 32 x 16 x *]] }
0x7f6eb89ace18: {[conv1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb89acf98: {[rn1_1.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb89ad118: {[conv1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb89ad298: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[32 x 32 x 16 x *]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_2.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb8b67fe8: {[rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb8b681a8: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb8b686e8: {[rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *]] [rn1_2.y Gradient[32 x 32 x 16 x *]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb8b688a8: {[rn1_3.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb8b68a68: {[rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb8b68c28: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb8b68fa8: {[rn1_4.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb8b69168: {[rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_4.p Value[32 x 32 x 16 x *]] }
0x7f6eb8b69328: {[rn1_4.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Value[32 x 32 x 16 x *]] }
0x7f6eb8b694e8: {[rn1_4.c2.W Gradient[16 x 144]] [rn1_5.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb8b696a8: {[rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb8b69868: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb8b69da8: {[rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *]] [rn1_3.y Gradient[32 x 32 x 16 x *]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb8b69f68: {[rn1_4.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb8b6a128: {[rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb8deac28: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb8deafa8: {[rn1_5.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb8deb168: {[rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_5.p Value[32 x 32 x 16 x *]] }
0x7f6eb8deb328: {[rn1_5.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Value[32 x 32 x 16 x *]] }
0x7f6eb8deb4e8: {[rn1_5.c2.W Gradient[16 x 144]] [rn1_6.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb8deb6a8: {[rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.p Gradient[32 x 32 x 16 x *]] }
0x7f6eb8deb868: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb8debda8: {[rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *]] [rn1_4.y Gradient[32 x 32 x 16 x *]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.c1.y Value[32 x 32 x 16 x *]] }
0x7f6eb8debf68: {[rn1_5.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb8dec128: {[rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6eb8dec2e8: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6eb8dec668: {[rn1_6.c1.c.c.b Gradient[16 x 1]] }
0x7f6eb8dec828: {[rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_6.p Value[32 x 32 x 16 x *]] }
0x7f6eb8dec9e8: {[rn1_6.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Value[32 x 32 x 16 x *]] }
0x7f6eb8decba8: {[rn1_6.c2.W Gradient[16 x 144]] [rn1_7.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6eb8decd68: {[rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.p Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d03b68: {[OutputNodes.z Value[10 x *]] }
0x7f6ec2d0ba88: {[rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *]] [rn1_5.y Gradient[32 x 32 x 16 x *]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.c1.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d0bc48: {[rn1_6.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6ec2d0be08: {[rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d0bfc8: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d0c348: {[rn1_7.c1.c.c.b Gradient[16 x 1]] }
0x7f6ec2d0c508: {[rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_7.p Value[32 x 32 x 16 x *]] }
0x7f6ec2d0c6c8: {[rn1_7.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d0c888: {[rn1_7.c2.W Gradient[16 x 144]] [rn1_8.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6ec2d0ca48: {[rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.p Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d0cc08: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d0d148: {[rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *]] [rn1_6.y Gradient[32 x 32 x 16 x *]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.c1.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d0d308: {[rn1_7.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6ec2d0d4c8: {[rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d0d688: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d0da08: {[rn1_8.c1.c.c.b Gradient[16 x 1]] }
0x7f6ec2d0dbc8: {[rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_8.p Value[32 x 32 x 16 x *]] }
0x7f6ec2d169f8: {[rn1_8.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d16bb8: {[rn1_8.c2.W Gradient[16 x 144]] [rn1_9.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6ec2d16d78: {[rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.p Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d16f38: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d17478: {[rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *]] [rn1_7.y Gradient[32 x 32 x 16 x *]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.c1.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d17638: {[rn1_8.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Value[32 x 32 x 16 x *]] }
0x7f6ec2d177f8: {[rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d179b8: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d17d38: {[rn1_9.c1.c.c.b Gradient[16 x 1]] }
0x7f6ec2d17ef8: {[rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_9.p Value[32 x 32 x 16 x *]] }
0x7f6ec2d180b8: {[rn1_9.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_9.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d18278: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.W Gradient[16 x 144]] }
0x7f6ec2d18438: {[rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.p Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d185f8: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d18b38: {[rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.c1.y Value[32 x 32 x 16 x *]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *]] [rn1_8.y Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d18cf8: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *]] [rn1_9.c2.c.b Gradient[16 x 1]] }
0x7f6ec2d18eb8: {[rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d19078: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d193f8: {[rn1_10.c1.c.c.b Gradient[16 x 1]] }
0x7f6ec2d195b8: {[rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *]] [rn1_10.p Value[32 x 32 x 16 x *]] }
0x7f6ec2d19778: {[rn1_10.c2.c.y Gradient[32 x 32 x 16 x *]] [rn1_10.y Value[32 x 32 x 16 x *]] }
0x7f6ec2d19938: {[rn1_10.c2.W Gradient[16 x 144]] [rn1_11.c1.c.c.c Value[32 x 32 x 16 x *]] }
0x7f6ec2d19af8: {[rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.p Gradient[32 x 32 x 16 x *]] }
0x7f6ec2d19cb8: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *]] }
0x7f6ec5400658: {[rn2_13.c2.c.b Value[32 x 1]] }
0x7f6ec5401098: {[rn2_13.c2.c.sc Value[32 x 1]] }
0x7f6ec5401b78: {[rn2_13.c2.c.m Value[32 x 1]] }
0x7f6ec54026f8: {[rn2_13.c2.c.isd Value[32 x 1]] }
0x7f6ec54044b8: {[rn2_14.c1.c.W Value[32 x 288]] }
0x7f6ec5404d58: {[rn2_14.c1.c.c.b Value[32 x 1]] }
0x7f6ec54057a8: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
0x7f6ec54062c8: {[rn2_14.c1.c.c.m Value[32 x 1]] }
0x7f6ec5406e28: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
0x7f6ec54087c8: {[rn2_14.c2.W Value[32 x 288]] }
0x7f6ec54090d8: {[rn2_14.c2.c.b Value[32 x 1]] }
0x7f6ec5409a48: {[rn2_14.c2.c.sc Value[32 x 1]] }
0x7f6ec540a588: {[rn2_14.c2.c.m Value[32 x 1]] }
0x7f6ec540b0f8: {[rn2_14.c2.c.isd Value[32 x 1]] }
0x7f6ec540ce78: {[rn2_15.c1.c.W Value[32 x 288]] }
0x7f6ec540de78: {[rn2_15.c1.c.c.b Value[32 x 1]] }
0x7f6ec540e868: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
0x7f6ec540f3b8: {[rn2_15.c1.c.c.m Value[32 x 1]] }
0x7f6ec540ff38: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
0x7f6ec5411948: {[rn2_15.c2.W Value[32 x 288]] }
0x7f6ec54121c8: {[rn2_15.c2.c.b Value[32 x 1]] }
0x7f6ec5412ba8: {[rn2_15.c2.c.sc Value[32 x 1]] }
0x7f6ec54136b8: {[rn2_15.c2.c.m Value[32 x 1]] }
0x7f6ec54141f8: {[rn2_15.c2.c.isd Value[32 x 1]] }
0x7f6ec5415fb8: {[rn2_16.c1.c.W Value[32 x 288]] }
0x7f6ec5416888: {[rn2_16.c1.c.c.b Value[32 x 1]] }
0x7f6ec5417278: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
0x7f6ec5417dc8: {[rn2_16.c1.c.c.m Value[32 x 1]] }
0x7f6ec5418948: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
0x7f6ec5419ad8: {[rn2_16.c2.W Value[32 x 288]] }
0x7f6ec541ac28: {[rn2_16.c2.c.b Value[32 x 1]] }
0x7f6ec541b598: {[rn2_16.c2.c.sc Value[32 x 1]] }
0x7f6ec541c0a8: {[rn2_16.c2.c.m Value[32 x 1]] }
0x7f6ec541cc28: {[rn2_16.c2.c.isd Value[32 x 1]] }
0x7f6ec541e9e8: {[rn2_17.c1.c.W Value[32 x 288]] }
0x7f6ec541f2b8: {[rn2_17.c1.c.c.b Value[32 x 1]] }
0x7f6ec541fca8: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
0x7f6ec54207f8: {[rn2_17.c1.c.c.m Value[32 x 1]] }
0x7f6ec5421388: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
0x7f6ec5422d88: {[rn2_17.c2.W Value[32 x 288]] }
0x7f6ec5423608: {[rn2_17.c2.c.b Value[32 x 1]] }
0x7f6ec5423f78: {[rn2_17.c2.c.sc Value[32 x 1]] }
0x7f6ec5424ae8: {[rn2_17.c2.c.m Value[32 x 1]] }
0x7f6ec5425658: {[rn2_17.c2.c.isd Value[32 x 1]] }
0x7f6ec5427468: {[rn2_18.c1.c.W Value[32 x 288]] }
0x7f6ec5427cc8: {[rn2_18.c1.c.c.b Value[32 x 1]] }
0x7f6ec54286b8: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
0x7f6ec5429228: {[rn2_18.c1.c.c.m Value[32 x 1]] }
0x7f6ec5429dd8: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
0x7f6ec542b778: {[rn2_18.c2.W Value[32 x 288]] }
0x7f6ec542c068: {[rn2_18.c2.c.b Value[32 x 1]] }
0x7f6ec542c9d8: {[rn2_18.c2.c.sc Value[32 x 1]] }
0x7f6ec542d518: {[rn2_18.c2.c.m Value[32 x 1]] }
0x7f6ec542e088: {[rn2_18.c2.c.isd Value[32 x 1]] }
0x7f6ec542fda8: {[rn3_1_Wproj Value[64 x 32]] }
0x7f6ec54303b8: {[rn3_1.c1.c.W Value[64 x 288]] }
0x7f6ec5431238: {[rn3_1.c2.W Value[64 x 576]] }
0x7f6ec5431718: {[rn3_1.c1.c.c.b Value[64 x 1]] }
0x7f6ec54320f8: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
0x7f6ec5432c38: {[rn3_1.c1.c.c.m Value[64 x 1]] }
0x7f6ec54337a8: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54359d8: {[rn3_1.c2.c.b Value[64 x 1]] }
0x7f6ec5436408: {[rn3_1.c2.c.sc Value[64 x 1]] }
0x7f6ec5436b58: {[rn3_1.c2.c.isd Value[64 x 1]] }
0x7f6ec5436f38: {[rn3_1.c2.c.m Value[64 x 1]] }
0x7f6ec54391b8: {[rn3_1.c_proj.b Value[64 x 1]] }
0x7f6ec5439b28: {[rn3_1.c_proj.sc Value[64 x 1]] }
0x7f6ec543a6a8: {[rn3_1.c_proj.m Value[64 x 1]] }
0x7f6ec543b228: {[rn3_1.c_proj.isd Value[64 x 1]] }
0x7f6ec543cf78: {[rn3_2.c1.c.W Value[64 x 576]] }
0x7f6ec543d828: {[rn3_2.c1.c.c.b Value[64 x 1]] }
0x7f6ec543e208: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
0x7f6ec543ed18: {[rn3_2.c1.c.c.m Value[64 x 1]] }
0x7f6ec543f898: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
0x7f6ec5440958: {[rn3_2.c2.W Value[64 x 576]] }
0x7f6ec5441ac8: {[rn3_2.c2.c.b Value[64 x 1]] }
0x7f6ec54424b8: {[rn3_2.c2.c.sc Value[64 x 1]] }
0x7f6ec5442bd8: {[rn3_2.c2.c.isd Value[64 x 1]] }
0x7f6ec5443018: {[rn3_2.c2.c.m Value[64 x 1]] }
0x7f6ec5445848: {[rn3_3.c1.c.W Value[64 x 576]] }
0x7f6ec5446158: {[rn3_3.c1.c.c.b Value[64 x 1]] }
0x7f6ec5446b38: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
0x7f6ec5447648: {[rn3_3.c1.c.c.m Value[64 x 1]] }
0x7f6ec5448188: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
0x7f6ec5449248: {[rn3_3.c2.W Value[64 x 576]] }
0x7f6ec544a078: {[rn3_3.c2.c.b Value[64 x 1]] }
0x7f6ec544add8: {[rn3_3.c2.c.sc Value[64 x 1]] }
0x7f6ec544b4f8: {[rn3_3.c2.c.isd Value[64 x 1]] }
0x7f6ec544b938: {[rn3_3.c2.c.m Value[64 x 1]] }
0x7f6ec544e148: {[rn3_4.c1.c.W Value[64 x 576]] }
0x7f6ec544ea58: {[rn3_4.c1.c.c.b Value[64 x 1]] }
0x7f6ec544f438: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
0x7f6ec544ff48: {[rn3_4.c1.c.c.m Value[64 x 1]] }
0x7f6ec5450a88: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
0x7f6ec5451b68: {[rn3_4.c2.W Value[64 x 576]] }
0x7f6ec5453398: {[rn3_4.c2.c.b Value[64 x 1]] }
0x7f6ec5453dc8: {[rn3_4.c2.c.sc Value[64 x 1]] }
0x7f6ec5454928: {[rn3_4.c2.c.m Value[64 x 1]] }
0x7f6ec5455498: {[rn3_4.c2.c.isd Value[64 x 1]] }
0x7f6ec5457188: {[rn3_5.c1.c.W Value[64 x 576]] }
0x7f6ec5457a98: {[rn3_5.c1.c.c.b Value[64 x 1]] }
0x7f6ec5458408: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
0x7f6ec5458f48: {[rn3_5.c1.c.c.m Value[64 x 1]] }
0x7f6ec5459ab8: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
0x7f6ec545b4a8: {[rn3_5.c2.W Value[64 x 576]] }
0x7f6ec545b9e8: {[rn3_5.c2.c.b Value[64 x 1]] }
0x7f6ec545c3b8: {[rn3_5.c2.c.sc Value[64 x 1]] }
0x7f6ec545ce88: {[rn3_5.c2.c.isd Value[64 x 1]] }
0x7f6ec545d268: {[rn3_5.c2.c.m Value[64 x 1]] }
0x7f6ec545fa98: {[rn3_6.c1.c.W Value[64 x 576]] }
0x7f6ec5460348: {[rn3_6.c1.c.c.b Value[64 x 1]] }
0x7f6ec5460d88: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
0x7f6ec5461898: {[rn3_6.c1.c.c.m Value[64 x 1]] }
0x7f6ec54623d8: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
0x7f6ec5463498: {[rn3_6.c2.W Value[64 x 576]] }
0x7f6ec54642c8: {[rn3_6.c2.c.b Value[64 x 1]] }
0x7f6ec5465028: {[rn3_6.c2.c.sc Value[64 x 1]] }
0x7f6ec5465748: {[rn3_6.c2.c.isd Value[64 x 1]] }
0x7f6ec5465b88: {[rn3_6.c2.c.m Value[64 x 1]] }
0x7f6ec5468398: {[rn3_7.c1.c.W Value[64 x 576]] }
0x7f6ec5468ca8: {[rn3_7.c1.c.c.b Value[64 x 1]] }
0x7f6ec5469688: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
0x7f6ec546a198: {[rn3_7.c1.c.c.m Value[64 x 1]] }
0x7f6ec546acd8: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
0x7f6ec546bd98: {[rn3_7.c2.W Value[64 x 576]] }
0x7f6ec546cbc8: {[rn3_7.c2.c.b Value[64 x 1]] }
0x7f6ec546d928: {[rn3_7.c2.c.sc Value[64 x 1]] }
0x7f6ec546e488: {[rn3_7.c2.c.m Value[64 x 1]] }
0x7f6ec546f008: {[rn3_7.c2.c.isd Value[64 x 1]] }
0x7f6ec5470c68: {[rn3_8.c1.c.W Value[64 x 576]] }
0x7f6ec5471c18: {[rn3_8.c1.c.c.b Value[64 x 1]] }
0x7f6ec5472658: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
0x7f6ec54731c8: {[rn3_8.c1.c.c.m Value[64 x 1]] }
0x7f6ec5473d38: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54756c8: {[rn3_8.c2.W Value[64 x 576]] }
0x7f6ec5475c08: {[rn3_8.c2.c.b Value[64 x 1]] }
0x7f6ec5476978: {[rn3_8.c2.c.sc Value[64 x 1]] }
0x7f6ec54774a8: {[rn3_8.c2.c.m Value[64 x 1]] }
0x7f6ec5478018: {[rn3_8.c2.c.isd Value[64 x 1]] }
0x7f6ec5479c78: {[rn3_9.c1.c.W Value[64 x 576]] }
0x7f6ec547a588: {[rn3_9.c1.c.c.b Value[64 x 1]] }
0x7f6ec547af68: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
0x7f6ec547ba78: {[rn3_9.c1.c.c.m Value[64 x 1]] }
0x7f6ec547c5f8: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
0x7f6ec547d6b8: {[rn3_9.c2.W Value[64 x 576]] }
0x7f6ec547e4e8: {[rn3_9.c2.c.b Value[64 x 1]] }
0x7f6ec547f248: {[rn3_9.c2.c.sc Value[64 x 1]] }
0x7f6ec547f968: {[rn3_9.c2.c.isd Value[64 x 1]] }
0x7f6ec547fda8: {[rn3_9.c2.c.m Value[64 x 1]] }
0x7f6ec54825e8: {[rn3_10.c1.c.W Value[64 x 576]] }
0x7f6ec5482eb8: {[rn3_10.c1.c.c.b Value[64 x 1]] }
0x7f6ec5483908: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
0x7f6ec5484428: {[rn3_10.c1.c.c.m Value[64 x 1]] }
0x7f6ec5484f78: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54868c8: {[rn3_10.c2.W Value[64 x 576]] }
0x7f6ec5487238: {[rn3_10.c2.c.b Value[64 x 1]] }
0x7f6ec5487ba8: {[rn3_10.c2.c.sc Value[64 x 1]] }
0x7f6ec54886e8: {[rn3_10.c2.c.m Value[64 x 1]] }
0x7f6ec5489258: {[rn3_10.c2.c.isd Value[64 x 1]] }
0x7f6ec548b008: {[rn3_11.c1.c.W Value[64 x 576]] }
0x7f6ec548b8d8: {[rn3_11.c1.c.c.b Value[64 x 1]] }
0x7f6ec548c2c8: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
0x7f6ec548ce18: {[rn3_11.c1.c.c.m Value[64 x 1]] }
0x7f6ec548d998: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
0x7f6ec548f3c8: {[rn3_11.c2.W Value[64 x 576]] }
0x7f6ec54902a8: {[rn3_11.c2.c.b Value[64 x 1]] }
0x7f6ec5490ce8: {[rn3_11.c2.c.sc Value[64 x 1]] }
0x7f6ec5491828: {[rn3_11.c2.c.m Value[64 x 1]] }
0x7f6ec54923a8: {[rn3_11.c2.c.isd Value[64 x 1]] }
0x7f6ec54941a8: {[rn3_12.c1.c.W Value[64 x 576]] }
0x7f6ec5494a08: {[rn3_12.c1.c.c.b Value[64 x 1]] }
0x7f6ec5495488: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
0x7f6ec5495fa8: {[rn3_12.c1.c.c.m Value[64 x 1]] }
0x7f6ec5496af8: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
0x7f6ec5498478: {[rn3_12.c2.W Value[64 x 576]] }
0x7f6ec5498d88: {[rn3_12.c2.c.b Value[64 x 1]] }
0x7f6ec5499738: {[rn3_12.c2.c.sc Value[64 x 1]] }
0x7f6ec549a248: {[rn3_12.c2.c.m Value[64 x 1]] }
0x7f6ec549ade8: {[rn3_12.c2.c.isd Value[64 x 1]] }
0x7f6ec549cb98: {[rn3_13.c1.c.W Value[64 x 576]] }
0x7f6ec549d468: {[rn3_13.c1.c.c.b Value[64 x 1]] }
0x7f6ec549deb8: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
0x7f6ec549ea38: {[rn3_13.c1.c.c.m Value[64 x 1]] }
0x7f6ec549f558: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54a0648: {[rn3_13.c2.c.b Value[64 x 1]] }
0x7f6ec54a0f68: {[rn3_13.c2.W Value[64 x 576]] }
0x7f6ec54a2188: {[rn3_13.c2.c.sc Value[64 x 1]] }
0x7f6ec54a2c98: {[rn3_13.c2.c.m Value[64 x 1]] }
0x7f6ec54a3818: {[rn3_13.c2.c.isd Value[64 x 1]] }
0x7f6ec54a55d8: {[rn3_14.c1.c.W Value[64 x 576]] }
0x7f6ec54a5ea8: {[rn3_14.c1.c.c.b Value[64 x 1]] }
0x7f6ec54a6898: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
0x7f6ec54a73e8: {[rn3_14.c1.c.c.m Value[64 x 1]] }
0x7f6ec54a7f68: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54a9978: {[rn3_14.c2.W Value[64 x 576]] }
0x7f6ec54aa1f8: {[rn3_14.c2.c.b Value[64 x 1]] }
0x7f6ec54aabd8: {[rn3_14.c2.c.sc Value[64 x 1]] }
0x7f6ec54b39e8: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
0x7f6ec54b4548: {[rn3_15.c1.c.c.m Value[64 x 1]] }
0x7f6ec54b50c8: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54b6a28: {[rn3_15.c2.W Value[64 x 576]] }
0x7f6ec54b7268: {[rn3_15.c2.c.b Value[64 x 1]] }
0x7f6ec54b7c48: {[rn3_15.c2.c.sc Value[64 x 1]] }
0x7f6ec54b8818: {[rn3_15.c2.c.m Value[64 x 1]] }
0x7f6ec54b9328: {[rn3_15.c2.c.isd Value[64 x 1]] }
0x7f6ec54bb0f8: {[rn3_16.c1.c.W Value[64 x 576]] }
0x7f6ec54bb958: {[rn3_16.c1.c.c.b Value[64 x 1]] }
0x7f6ec54bc3a8: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
0x7f6ec54bcef8: {[rn3_16.c1.c.c.m Value[64 x 1]] }
0x7f6ec54bda88: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54be1f8: {[rn3_16.c2.W Value[64 x 576]] }
0x7f6ec54beb98: {[rn3_16.c2.c.b Value[64 x 1]] }
0x7f6ec54c0638: {[rn3_16.c2.c.sc Value[64 x 1]] }
0x7f6ec54c11a8: {[rn3_16.c2.c.m Value[64 x 1]] }
0x7f6ec54c1d18: {[rn3_16.c2.c.isd Value[64 x 1]] }
0x7f6ec54c3b28: {[rn3_17.c1.c.W Value[64 x 576]] }
0x7f6ec54c4388: {[rn3_17.c1.c.c.b Value[64 x 1]] }
0x7f6ec54c4d78: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
0x7f6ec54c5938: {[rn3_17.c1.c.c.m Value[64 x 1]] }
0x7f6ec54c64b8: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54c7e88: {[rn3_17.c2.W Value[64 x 576]] }
0x7f6ec54c86c8: {[rn3_17.c2.c.b Value[64 x 1]] }
0x7f6ec54c9108: {[rn3_17.c2.c.sc Value[64 x 1]] }
0x7f6ec54c9c18: {[rn3_17.c2.c.m Value[64 x 1]] }
0x7f6ec54ca728: {[rn3_17.c2.c.isd Value[64 x 1]] }
0x7f6ec54cc4c8: {[rn3_18.c1.c.W Value[64 x 576]] }
0x7f6ec54ccd98: {[rn3_18.c1.c.c.b Value[64 x 1]] }
0x7f6ec54cd788: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
0x7f6ec54ce2a8: {[rn3_18.c1.c.c.m Value[64 x 1]] }
0x7f6ec54cee58: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
0x7f6ec54d07d8: {[rn3_18.c2.W Value[64 x 576]] }
0x7f6ec54d1788: {[rn3_18.c2.c.b Value[64 x 1]] }
0x7f6ec54d21c8: {[rn3_18.c2.c.sc Value[64 x 1]] }
0x7f6ec54d2d88: {[rn3_18.c2.c.m Value[64 x 1]] }
0x7f6ec54d38c8: {[rn3_18.c2.c.isd Value[64 x 1]] }
0x7f6ec54d5888: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
0x7f6ec54d6088: {[OutputNodes.b Value[10]] }
0x7f6ec5609b38: {[rn1_3.c2.c.isd Value[16 x 1]] }
0x7f6ec560b848: {[rn1_4.c1.c.W Value[16 x 144]] }
0x7f6ec560c158: {[rn1_4.c1.c.c.b Value[16 x 1]] }
0x7f6ec560cb38: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
0x7f6ec560d648: {[rn1_4.c1.c.c.m Value[16 x 1]] }
0x7f6ec560e1a8: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
0x7f6ec560fb58: {[rn1_4.c2.W Value[16 x 144]] }
0x7f6ec5610078: {[rn1_4.c2.c.b Value[16 x 1]] }
0x7f6ec5610dd8: {[rn1_4.c2.c.sc Value[16 x 1]] }
0x7f6ec5611938: {[rn1_4.c2.c.m Value[16 x 1]] }
0x7f6ec5612468: {[rn1_4.c2.c.isd Value[16 x 1]] }
0x7f6ec5614118: {[rn1_5.c1.c.W Value[16 x 144]] }
0x7f6ec5614a28: {[rn1_5.c1.c.c.b Value[16 x 1]] }
0x7f6ec5615408: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
0x7f6ec5615f18: {[rn1_5.c1.c.c.m Value[16 x 1]] }
0x7f6ec5616a58: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
0x7f6ec5617b18: {[rn1_5.c2.W Value[16 x 144]] }
0x7f6ec5618948: {[rn1_5.c2.c.b Value[16 x 1]] }
0x7f6ec56196a8: {[rn1_5.c2.c.sc Value[16 x 1]] }
0x7f6ec5619dc8: {[rn1_5.c2.c.isd Value[16 x 1]] }
0x7f6ec561a208: {[rn1_5.c2.c.m Value[16 x 1]] }
0x7f6ec561ca18: {[rn1_6.c1.c.W Value[16 x 144]] }
0x7f6ec561d328: {[rn1_6.c1.c.c.b Value[16 x 1]] }
0x7f6ec561dd08: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
0x7f6ec561e818: {[rn1_6.c1.c.c.m Value[16 x 1]] }
0x7f6ec561f358: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
0x7f6ec5620418: {[rn1_6.c2.W Value[16 x 144]] }
0x7f6ec5621248: {[rn1_6.c2.c.b Value[16 x 1]] }
0x7f6ec5621fa8: {[rn1_6.c2.c.sc Value[16 x 1]] }
0x7f6ec56226c8: {[rn1_6.c2.c.isd Value[16 x 1]] }
0x7f6ec5622b08: {[rn1_6.c2.c.m Value[16 x 1]] }
0x7f6ec56241f8: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
0x7f6ec5625b98: {[rn1_7.c1.c.W Value[16 x 144]] }
0x7f6ec5626478: {[rn1_7.c1.c.c.b Value[16 x 1]] }
0x7f6ec5626e58: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
0x7f6ec5627968: {[rn1_7.c1.c.c.m Value[16 x 1]] }
0x7f6ec56284a8: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
0x7f6ec5629568: {[rn1_7.c2.W Value[16 x 144]] }
0x7f6ec562a698: {[rn1_7.c2.c.b Value[16 x 1]] }
0x7f6ec562b088: {[rn1_7.c2.c.sc Value[16 x 1]] }
0x7f6ec562b7a8: {[rn1_7.c2.c.isd Value[16 x 1]] }
0x7f6ec562bbe8: {[rn1_7.c2.c.m Value[16 x 1]] }
0x7f6ec562e408: {[rn1_8.c1.c.W Value[16 x 144]] }
0x7f6ec562ed18: {[rn1_8.c1.c.c.b Value[16 x 1]] }
0x7f6ec562f6f8: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
0x7f6ec5630208: {[rn1_8.c1.c.c.m Value[16 x 1]] }
0x7f6ec5630d48: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
0x7f6ec56326e8: {[rn1_8.c2.W Value[16 x 144]] }
0x7f6ec5632f68: {[rn1_8.c2.c.b Value[16 x 1]] }
0x7f6ec5633998: {[rn1_8.c2.c.sc Value[16 x 1]] }
0x7f6ec5634068: {[rn1_8.c2.c.isd Value[16 x 1]] }
0x7f6ec5634448: {[rn1_8.c2.c.m Value[16 x 1]] }
0x7f6ec5636cb8: {[rn1_9.c1.c.W Value[16 x 144]] }
0x7f6ec56375c8: {[rn1_9.c1.c.c.b Value[16 x 1]] }
0x7f6ec5637fa8: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
0x7f6ec5638ab8: {[rn1_9.c1.c.c.m Value[16 x 1]] }
0x7f6ec56395f8: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
0x7f6ec563a6b8: {[rn1_9.c2.W Value[16 x 144]] }
0x7f6ec563b4e8: {[rn1_9.c2.c.b Value[16 x 1]] }
0x7f6ec563c248: {[rn1_9.c2.c.sc Value[16 x 1]] }
0x7f6ec563c968: {[rn1_9.c2.c.isd Value[16 x 1]] }
0x7f6ec563cda8: {[rn1_9.c2.c.m Value[16 x 1]] }
0x7f6ec563f5e8: {[rn1_10.c1.c.W Value[16 x 144]] }
0x7f6ec563feb8: {[rn1_10.c1.c.c.b Value[16 x 1]] }
0x7f6ec5640908: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
0x7f6ec5641428: {[rn1_10.c1.c.c.m Value[16 x 1]] }
0x7f6ec5641f78: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
0x7f6ec56438c8: {[rn1_10.c2.W Value[16 x 144]] }
0x7f6ec5644238: {[rn1_10.c2.c.b Value[16 x 1]] }
0x7f6ec5644ba8: {[rn1_10.c2.c.sc Value[16 x 1]] }
0x7f6ec56456e8: {[rn1_10.c2.c.m Value[16 x 1]] }
0x7f6ec5646258: {[rn1_10.c2.c.isd Value[16 x 1]] }
0x7f6ec5648008: {[rn1_11.c1.c.W Value[16 x 144]] }
0x7f6ec56488d8: {[rn1_11.c1.c.c.b Value[16 x 1]] }
0x7f6ec56492c8: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
0x7f6ec5649e18: {[rn1_11.c1.c.c.m Value[16 x 1]] }
0x7f6ec564a998: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
0x7f6ec564c3c8: {[rn1_11.c2.W Value[16 x 144]] }
0x7f6ec564cc08: {[rn1_11.c2.c.b Value[16 x 1]] }
0x7f6ec564d648: {[rn1_11.c2.c.sc Value[16 x 1]] }
0x7f6ec564e158: {[rn1_11.c2.c.m Value[16 x 1]] }
0x7f6ec564ec68: {[rn1_11.c2.c.isd Value[16 x 1]] }
0x7f6ec5650a78: {[rn1_12.c1.c.W Value[16 x 144]] }
0x7f6ec56512d8: {[rn1_12.c1.c.c.b Value[16 x 1]] }
0x7f6ec5651cc8: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
0x7f6ec5652898: {[rn1_12.c1.c.c.m Value[16 x 1]] }
0x7f6ec56533e8: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
0x7f6ec5653b58: {[rn1_12.c2.W Value[16 x 144]] }
0x7f6ec56544f8: {[rn1_12.c2.c.b Value[16 x 1]] }
0x7f6ec5655f98: {[rn1_12.c2.c.sc Value[16 x 1]] }
0x7f6ec5656b08: {[rn1_12.c2.c.m Value[16 x 1]] }
0x7f6ec5657678: {[rn1_12.c2.c.isd Value[16 x 1]] }
0x7f6ec5659488: {[rn1_13.c1.c.W Value[16 x 144]] }
0x7f6ec5659ce8: {[rn1_13.c1.c.c.b Value[16 x 1]] }
0x7f6ec565a6d8: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
0x7f6ec565b248: {[rn1_13.c1.c.c.m Value[16 x 1]] }
0x7f6ec565b938: {[rn2_7.c2.c.sc Value[32 x 1]] }
0x7f6ec565c7f8: {[rn2_7.c2.c.m Value[32 x 1]] }
0x7f6ec565d378: {[rn2_7.c2.c.isd Value[32 x 1]] }
0x7f6ec565e828: {[rn1_13.c2.W Value[16 x 144]] }
0x7f6ec565f028: {[rn1_13.c2.c.b Value[16 x 1]] }
0x7f6ec565fa08: {[rn1_13.c2.c.sc Value[16 x 1]] }
0x7f6ec5660578: {[rn1_13.c2.c.m Value[16 x 1]] }
0x7f6ec5661088: {[rn1_13.c2.c.isd Value[16 x 1]] }
0x7f6ec5662e98: {[rn1_14.c1.c.W Value[16 x 144]] }
0x7f6ec56636f8: {[rn1_14.c1.c.c.b Value[16 x 1]] }
0x7f6ec56640e8: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
0x7f6ec5664cb8: {[rn1_14.c1.c.c.m Value[16 x 1]] }
0x7f6ec5665808: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
0x7f6ec5665f78: {[rn1_14.c2.W Value[16 x 144]] }
0x7f6ec5666918: {[rn1_14.c2.c.b Value[16 x 1]] }
0x7f6ec56683b8: {[rn1_14.c2.c.sc Value[16 x 1]] }
0x7f6ec5668f28: {[rn1_14.c2.c.m Value[16 x 1]] }
0x7f6ec5669a98: {[rn1_14.c2.c.isd Value[16 x 1]] }
0x7f6ec566b8a8: {[rn1_15.c1.c.W Value[16 x 144]] }
0x7f6ec566c108: {[rn1_15.c1.c.c.b Value[16 x 1]] }
0x7f6ec566caf8: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
0x7f6ec566d6c8: {[rn1_15.c1.c.c.m Value[16 x 1]] }
0x7f6ec566e218: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
0x7f6ec566e988: {[rn1_15.c2.W Value[16 x 144]] }
0x7f6ec566f328: {[rn1_15.c2.c.b Value[16 x 1]] }
0x7f6ec5670dc8: {[rn1_15.c2.c.sc Value[16 x 1]] }
0x7f6ec5671938: {[rn1_15.c2.c.m Value[16 x 1]] }
0x7f6ec56724a8: {[rn1_15.c2.c.isd Value[16 x 1]] }
0x7f6ec5674248: {[rn1_16.c1.c.W Value[16 x 144]] }
0x7f6ec5674b18: {[rn1_16.c1.c.c.b Value[16 x 1]] }
0x7f6ec5675508: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
0x7f6ec56760d8: {[rn1_16.c1.c.c.m Value[16 x 1]] }
0x7f6ec5676c28: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
0x7f6ec5677398: {[rn1_16.c2.W Value[16 x 144]] }
0x7f6ec5677d38: {[rn1_16.c2.c.b Value[16 x 1]] }
0x7f6ec56797d8: {[rn1_16.c2.c.sc Value[16 x 1]] }
0x7f6ec567a348: {[rn1_16.c2.c.m Value[16 x 1]] }
0x7f6ec567aec8: {[rn1_16.c2.c.isd Value[16 x 1]] }
0x7f6ec567cc88: {[rn1_17.c1.c.W Value[16 x 144]] }
0x7f6ec567d558: {[rn1_17.c1.c.c.b Value[16 x 1]] }
0x7f6ec567df48: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
0x7f6ec567ea98: {[rn1_17.c1.c.c.m Value[16 x 1]] }
0x7f6ec567f618: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
0x7f6ec5681028: {[rn1_17.c2.W Value[16 x 144]] }
0x7f6ec56818a8: {[rn1_17.c2.c.b Value[16 x 1]] }
0x7f6ec5682288: {[rn1_17.c2.c.sc Value[16 x 1]] }
0x7f6ec5682d78: {[rn1_17.c2.c.m Value[16 x 1]] }
0x7f6ec56838e8: {[rn1_17.c2.c.isd Value[16 x 1]] }
0x7f6ec5684a88: {[rn1_18.c2.c.b Value[16 x 1]] }
0x7f6ec5685698: {[rn1_18.c1.c.W Value[16 x 144]] }
0x7f6ec5685f68: {[rn1_18.c1.c.c.b Value[16 x 1]] }
0x7f6ec5686958: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
0x7f6ec56874a8: {[rn1_18.c1.c.c.m Value[16 x 1]] }
0x7f6ec5688028: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
0x7f6ec56891b8: {[rn1_18.c2.W Value[16 x 144]] }
0x7f6ec568acc8: {[rn1_18.c2.c.sc Value[16 x 1]] }
0x7f6ec568b7d8: {[rn1_18.c2.c.m Value[16 x 1]] }
0x7f6ec568c348: {[rn1_18.c2.c.isd Value[16 x 1]] }
0x7f6ec568e028: {[rn2_1_Wproj Value[32 x 16]] }
0x7f6ec568eb68: {[rn2_1.c1.c.W Value[32 x 144]] }
0x7f6ec568fb18: {[rn2_1.c1.c.c.b Value[32 x 1]] }
0x7f6ec5690558: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56910c8: {[rn2_1.c1.c.c.m Value[32 x 1]] }
0x7f6ec5691c38: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56935c8: {[rn2_1.c2.W Value[32 x 288]] }
0x7f6ec5693b08: {[rn2_1.c2.c.b Value[32 x 1]] }
0x7f6ec5694878: {[rn2_1.c2.c.sc Value[32 x 1]] }
0x7f6ec5695318: {[rn2_1.c2.c.m Value[32 x 1]] }
0x7f6ec5695ea8: {[rn2_1.c2.c.isd Value[32 x 1]] }
0x7f6ec56976b8: {[rn2_1.c_proj.b Value[32 x 1]] }
0x7f6ec5697f98: {[rn2_1.c_proj.sc Value[32 x 1]] }
0x7f6ec5698ad8: {[rn2_1.c_proj.m Value[32 x 1]] }
0x7f6ec5699658: {[rn2_1.c_proj.isd Value[32 x 1]] }
0x7f6ec569b3f8: {[rn2_2.c1.c.W Value[32 x 288]] }
0x7f6ec569bc88: {[rn2_2.c1.c.c.b Value[32 x 1]] }
0x7f6ec569c5f8: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
0x7f6ec569d138: {[rn2_2.c1.c.c.m Value[32 x 1]] }
0x7f6ec569dca8: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
0x7f6ec569f698: {[rn2_2.c2.W Value[32 x 288]] }
0x7f6ec569fe98: {[rn2_2.c2.c.b Value[32 x 1]] }
0x7f6ec56a0588: {[rn2_2.c2.c.sc Value[32 x 1]] }
0x7f6ec56a1418: {[rn2_2.c2.c.m Value[32 x 1]] }
0x7f6ec56a1f68: {[rn2_2.c2.c.isd Value[32 x 1]] }
0x7f6ec56a3cf8: {[rn2_3.c1.c.W Value[32 x 288]] }
0x7f6ec56a45a8: {[rn2_3.c1.c.c.b Value[32 x 1]] }
0x7f6ec56a4f78: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56a5af8: {[rn2_3.c1.c.c.m Value[32 x 1]] }
0x7f6ec56a6608: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56a7ff8: {[rn2_3.c2.W Value[32 x 288]] }
0x7f6ec56a87f8: {[rn2_3.c2.c.b Value[32 x 1]] }
0x7f6ec56a8ee8: {[rn2_3.c2.c.sc Value[32 x 1]] }
0x7f6ec56a9968: {[rn2_3.c2.c.isd Value[32 x 1]] }
0x7f6ec56a9da8: {[rn2_3.c2.c.m Value[32 x 1]] }
0x7f6ec56ac5b8: {[rn2_4.c1.c.W Value[32 x 288]] }
0x7f6ec56acec8: {[rn2_4.c1.c.c.b Value[32 x 1]] }
0x7f6ec56ad8a8: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56ae3b8: {[rn2_4.c1.c.c.m Value[32 x 1]] }
0x7f6ec56aeef8: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56b0898: {[rn2_4.c2.W Value[32 x 288]] }
0x7f6ec56b1118: {[rn2_4.c2.c.b Value[32 x 1]] }
0x7f6ec56b1b48: {[rn2_4.c2.c.sc Value[32 x 1]] }
0x7f6ec56b2228: {[rn2_4.c2.c.isd Value[32 x 1]] }
0x7f6ec56b2668: {[rn2_4.c2.c.m Value[32 x 1]] }
0x7f6ec56b4e78: {[rn2_5.c1.c.W Value[32 x 288]] }
0x7f6ec56b5788: {[rn2_5.c1.c.c.b Value[32 x 1]] }
0x7f6ec56b6168: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56b6c78: {[rn2_5.c1.c.c.m Value[32 x 1]] }
0x7f6ec56b77b8: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56b9168: {[rn2_5.c2.W Value[32 x 288]] }
0x7f6ec56b99e8: {[rn2_5.c2.c.b Value[32 x 1]] }
0x7f6ec56ba418: {[rn2_5.c2.c.sc Value[32 x 1]] }
0x7f6ec56baf18: {[rn2_5.c2.c.m Value[32 x 1]] }
0x7f6ec56bbab8: {[rn2_5.c2.c.isd Value[32 x 1]] }
0x7f6ec56bd788: {[rn2_6.c1.c.W Value[32 x 288]] }
0x7f6ec56be098: {[rn2_6.c1.c.c.b Value[32 x 1]] }
0x7f6ec56bea68: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56bf5a8: {[rn2_6.c1.c.c.m Value[32 x 1]] }
0x7f6ec56c0128: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56c0888: {[rn2_6.c2.W Value[32 x 288]] }
0x7f6ec56c1218: {[rn2_6.c2.c.b Value[32 x 1]] }
0x7f6ec56c2cd8: {[rn2_6.c2.c.sc Value[32 x 1]] }
0x7f6ec56c33f8: {[rn2_6.c2.c.isd Value[32 x 1]] }
0x7f6ec56c3838: {[rn2_6.c2.c.m Value[32 x 1]] }
0x7f6ec56c6098: {[rn2_7.c1.c.W Value[32 x 288]] }
0x7f6ec56c69a8: {[rn2_7.c1.c.c.b Value[32 x 1]] }
0x7f6ec56c7318: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56c7e58: {[rn2_7.c1.c.c.m Value[32 x 1]] }
0x7f6ec56c89c8: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56ca3b8: {[rn2_7.c2.W Value[32 x 288]] }
0x7f6ec56cabb8: {[rn2_7.c2.c.b Value[32 x 1]] }
0x7f6ec56cb738: {[rn3_14.c2.c.m Value[64 x 1]] }
0x7f6ec56cc2a8: {[rn3_14.c2.c.isd Value[64 x 1]] }
0x7f6ec56ce058: {[rn3_15.c1.c.W Value[64 x 576]] }
0x7f6ec56cf058: {[rn3_15.c1.c.c.b Value[64 x 1]] }
0x7f6ec56d09b8: {[rn2_8.c1.c.W Value[32 x 288]] }
0x7f6ec56d1268: {[rn2_8.c1.c.c.b Value[32 x 1]] }
0x7f6ec56d1c48: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56d2788: {[rn2_8.c1.c.c.m Value[32 x 1]] }
0x7f6ec56d32c8: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56d4cd8: {[rn2_8.c2.W Value[32 x 288]] }
0x7f6ec56d54f8: {[rn2_8.c2.c.b Value[32 x 1]] }
0x7f6ec56d5be8: {[rn2_8.c2.c.sc Value[32 x 1]] }
0x7f6ec56d6628: {[rn2_8.c2.c.isd Value[32 x 1]] }
0x7f6ec56d6a68: {[rn2_8.c2.c.m Value[32 x 1]] }
0x7f6ec56d9278: {[rn2_9.c1.c.W Value[32 x 288]] }
0x7f6ec56d9b88: {[rn2_9.c1.c.c.b Value[32 x 1]] }
0x7f6ec56da568: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56db078: {[rn2_9.c1.c.c.m Value[32 x 1]] }
0x7f6ec56dbbb8: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56dcc78: {[rn2_9.c2.W Value[32 x 288]] }
0x7f6ec56ddaa8: {[rn2_9.c2.c.b Value[32 x 1]] }
0x7f6ec56de808: {[rn2_9.c2.c.sc Value[32 x 1]] }
0x7f6ec56df308: {[rn2_9.c2.c.m Value[32 x 1]] }
0x7f6ec56dfeb8: {[rn2_9.c2.c.isd Value[32 x 1]] }
0x7f6ec56e0f48: {[rn2_10.c2.c.b Value[32 x 1]] }
0x7f6ec56e1c18: {[rn2_10.c1.c.W Value[32 x 288]] }
0x7f6ec56e2478: {[rn2_10.c1.c.c.b Value[32 x 1]] }
0x7f6ec56e2ec8: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56e39e8: {[rn2_10.c1.c.c.m Value[32 x 1]] }
0x7f6ec56e4578: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56e5658: {[rn2_10.c2.W Value[32 x 288]] }
0x7f6ec56e7208: {[rn2_10.c2.c.sc Value[32 x 1]] }
0x7f6ec56e7d48: {[rn2_10.c2.c.m Value[32 x 1]] }
0x7f6ec56e88c8: {[rn2_10.c2.c.isd Value[32 x 1]] }
0x7f6ec56ea628: {[rn2_11.c1.c.W Value[32 x 288]] }
0x7f6ec56eae88: {[rn2_11.c1.c.c.b Value[32 x 1]] }
0x7f6ec56eb8d8: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56ec3f8: {[rn2_11.c1.c.c.m Value[32 x 1]] }
0x7f6ec56ecf88: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56ee8d8: {[rn2_11.c2.W Value[32 x 288]] }
0x7f6ec56ef1e8: {[rn2_11.c2.c.b Value[32 x 1]] }
0x7f6ec56efb98: {[rn2_11.c2.c.sc Value[32 x 1]] }
0x7f6ec56f06d8: {[rn2_11.c2.c.m Value[32 x 1]] }
0x7f6ec56f1248: {[rn2_11.c2.c.isd Value[32 x 1]] }
0x7f6ec56f2ff8: {[rn2_12.c1.c.W Value[32 x 288]] }
0x7f6ec56f38c8: {[rn2_12.c1.c.c.b Value[32 x 1]] }
0x7f6ec56f42b8: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56f4e08: {[rn2_12.c1.c.c.m Value[32 x 1]] }
0x7f6ec56f5988: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56f73b8: {[rn2_12.c2.W Value[32 x 288]] }
0x7f6ec56f7bf8: {[rn2_12.c2.c.b Value[32 x 1]] }
0x7f6ec56f8638: {[rn2_12.c2.c.sc Value[32 x 1]] }
0x7f6ec56f9148: {[rn2_12.c2.c.m Value[32 x 1]] }
0x7f6ec56f9c58: {[rn2_12.c2.c.isd Value[32 x 1]] }
0x7f6ec56fba68: {[rn2_13.c1.c.W Value[32 x 288]] }
0x7f6ec56fc2c8: {[rn2_13.c1.c.c.b Value[32 x 1]] }
0x7f6ec56fccb8: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
0x7f6ec56fd888: {[rn2_13.c1.c.c.m Value[32 x 1]] }
0x7f6ec56fe378: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
0x7f6ec56ffd38: {[rn2_13.c2.W Value[32 x 288]] }
0x7f6ec63a8818: {[labels Value[10 x *]] }
0x7f6ec63a95f8: {[conv1.c.W Value[16 x 27]] }
0x7f6ec63aa4c8: {[conv1.c.c.b Value[16 x 1]] }
0x7f6ec63ab1c8: {[conv1.c.c.sc Value[16 x 1]] }
0x7f6ec63abd88: {[conv1.c.c.m Value[16 x 1]] }
0x7f6ec63ac948: {[conv1.c.c.isd Value[16 x 1]] }
0x7f6ec63ae348: {[rn1_1.c1.c.W Value[16 x 144]] }
0x7f6ec63aebe8: {[rn1_1.c1.c.c.b Value[16 x 1]] }
0x7f6ec63af608: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
0x7f6ec63b0118: {[rn1_1.c1.c.c.m Value[16 x 1]] }
0x7f6ec63b08e8: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
0x7f6ec63b0dc8: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
0x7f6ec63b26e8: {[rn1_1.c2.W Value[16 x 144]] }
0x7f6ec63b2f88: {[rn1_1.c2.c.b Value[16 x 1]] }
0x7f6ec63b3978: {[rn1_1.c2.c.sc Value[16 x 1]] }
0x7f6ec63b40a8: {[rn1_1.c2.c.m Value[16 x 1]] }
0x7f6ec63b50a8: {[rn1_1.c2.c.isd Value[16 x 1]] }
0x7f6ec63b6cd8: {[rn1_2.c1.c.W Value[16 x 144]] }
0x7f6ec63b75e8: {[rn1_2.c1.c.c.b Value[16 x 1]] }
0x7f6ec63b7f18: {[rn1_3.c2.c.m Value[16 x 1]] }
0x7f6ec63b8d48: {[rn1_2.c1.c.c.m Value[16 x 1]] }
0x7f6ec63b98b8: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
0x7f6ec63bb258: {[rn1_2.c2.W Value[16 x 144]] }
0x7f6ec63bba88: {[rn1_2.c2.c.b Value[16 x 1]] }
0x7f6ec63bc428: {[rn1_2.c2.c.sc Value[16 x 1]] }
0x7f6ec63bcfb8: {[rn1_2.c2.c.m Value[16 x 1]] }
0x7f6ec63bdb18: {[rn1_2.c2.c.isd Value[16 x 1]] }
0x7f6ec63bf778: {[rn1_3.c1.c.W Value[16 x 144]] }
0x7f6ec63c0078: {[rn1_3.c1.c.c.b Value[16 x 1]] }
0x7f6ec63c0a28: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
0x7f6ec63c15c8: {[rn1_3.c1.c.c.m Value[16 x 1]] }
0x7f6ec63c2138: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
0x7f6ec63c3a88: {[rn1_3.c2.W Value[16 x 144]] }
0x7f6ec63c3f88: {[rn1_3.c2.c.b Value[16 x 1]] }
0x7f6ec63c4998: {[rn1_3.c2.c.sc Value[16 x 1]] }

08/04/2016 14:35:58: No PreCompute nodes found, skipping PreCompute step.

08/04/2016 14:35:58: Starting Epoch 1: learning rate per sample = 0.006250  effective momentum = 0.900000  momentum as time constant = 151.9 samples

08/04/2016 14:35:58: Starting minibatch loop.
08/04/2016 14:36:01: Finished Epoch[ 1 of 1]: [Training] CE = 2.55740166 * 128; Err = 0.87500000 * 128; totalSamplesSeen = 128; learningRatePerSample = 0.0062500001; epochTime=3.26068s
08/04/2016 14:36:02: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/Miscellaneous/CIFAR-10_04_ResNet_56@release_gpu/Models/04_ResNet_56'
08/04/2016 14:36:02: CNTKCommandTrainEnd: Train

08/04/2016 14:36:02: Action "train" complete.


08/04/2016 14:36:02: ##############################################################################
08/04/2016 14:36:02: #                                                                            #
08/04/2016 14:36:02: # Action "test"                                                              #
08/04/2016 14:36:02: #                                                                            #
08/04/2016 14:36:02: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 949 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 1 x 1 x 64]
Validating --> rn3_18.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_18.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_17.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_16.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_15.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_14.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_13.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_12.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_11.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_10.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_9.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_8.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_7.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_6.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_5.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_4.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_3.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_2.c1.c.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c2.W = LearnableParameter() :  -> [64 x 576]
Validating --> rn3_1.c1.c.W = LearnableParameter() :  -> [64 x 288]
Validating --> rn2_18.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_18.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_17.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_16.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_15.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_14.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_13.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_12.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_11.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_10.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_9.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_8.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_7.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_6.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_5.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_4.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_3.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_2.c1.c.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c2.W = LearnableParameter() :  -> [32 x 288]
Validating --> rn2_1.c1.c.W = LearnableParameter() :  -> [32 x 144]
Validating --> rn1_18.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_18.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_17.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_16.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_15.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_14.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_13.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_12.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_11.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_10.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_9.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_8.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_7.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_6.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_5.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_4.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_3.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_2.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c2.W = LearnableParameter() :  -> [16 x 144]
Validating --> rn1_1.c1.c.W = LearnableParameter() :  -> [16 x 144]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 27]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, features) : [16 x 27], [32 x 32 x 3 x *1] -> [32 x 32 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.c = Convolution (rn1_1.c1.c.W, conv1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c1.c.c.y = BatchNormalization (rn1_1.c1.c.c.c, rn1_1.c1.c.c.sc, rn1_1.c1.c.c.b, rn1_1.c1.c.c.m, rn1_1.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c1.y = RectifiedLinear (rn1_1.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.c = Convolution (rn1_1.c2.W, rn1_1.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_1.c2.c.y = BatchNormalization (rn1_1.c2.c.c, rn1_1.c2.c.sc, rn1_1.c2.c.b, rn1_1.c2.c.m, rn1_1.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.p = Plus (rn1_1.c2.c.y, conv1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_1.y = RectifiedLinear (rn1_1.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.c = Convolution (rn1_2.c1.c.W, rn1_1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c1.c.c.y = BatchNormalization (rn1_2.c1.c.c.c, rn1_2.c1.c.c.sc, rn1_2.c1.c.c.b, rn1_2.c1.c.c.m, rn1_2.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c1.y = RectifiedLinear (rn1_2.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.c = Convolution (rn1_2.c2.W, rn1_2.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_2.c2.c.y = BatchNormalization (rn1_2.c2.c.c, rn1_2.c2.c.sc, rn1_2.c2.c.b, rn1_2.c2.c.m, rn1_2.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.p = Plus (rn1_2.c2.c.y, rn1_1.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_2.y = RectifiedLinear (rn1_2.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.c = Convolution (rn1_3.c1.c.W, rn1_2.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c1.c.c.y = BatchNormalization (rn1_3.c1.c.c.c, rn1_3.c1.c.c.sc, rn1_3.c1.c.c.b, rn1_3.c1.c.c.m, rn1_3.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c1.y = RectifiedLinear (rn1_3.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.c = Convolution (rn1_3.c2.W, rn1_3.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_3.c2.c.y = BatchNormalization (rn1_3.c2.c.c, rn1_3.c2.c.sc, rn1_3.c2.c.b, rn1_3.c2.c.m, rn1_3.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.p = Plus (rn1_3.c2.c.y, rn1_2.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_3.y = RectifiedLinear (rn1_3.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.c = Convolution (rn1_4.c1.c.W, rn1_3.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c1.c.c.y = BatchNormalization (rn1_4.c1.c.c.c, rn1_4.c1.c.c.sc, rn1_4.c1.c.c.b, rn1_4.c1.c.c.m, rn1_4.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c1.y = RectifiedLinear (rn1_4.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.c = Convolution (rn1_4.c2.W, rn1_4.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_4.c2.c.y = BatchNormalization (rn1_4.c2.c.c, rn1_4.c2.c.sc, rn1_4.c2.c.b, rn1_4.c2.c.m, rn1_4.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.p = Plus (rn1_4.c2.c.y, rn1_3.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_4.y = RectifiedLinear (rn1_4.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.c = Convolution (rn1_5.c1.c.W, rn1_4.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c1.c.c.y = BatchNormalization (rn1_5.c1.c.c.c, rn1_5.c1.c.c.sc, rn1_5.c1.c.c.b, rn1_5.c1.c.c.m, rn1_5.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c1.y = RectifiedLinear (rn1_5.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.c = Convolution (rn1_5.c2.W, rn1_5.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_5.c2.c.y = BatchNormalization (rn1_5.c2.c.c, rn1_5.c2.c.sc, rn1_5.c2.c.b, rn1_5.c2.c.m, rn1_5.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.p = Plus (rn1_5.c2.c.y, rn1_4.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_5.y = RectifiedLinear (rn1_5.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.c = Convolution (rn1_6.c1.c.W, rn1_5.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c1.c.c.y = BatchNormalization (rn1_6.c1.c.c.c, rn1_6.c1.c.c.sc, rn1_6.c1.c.c.b, rn1_6.c1.c.c.m, rn1_6.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c1.y = RectifiedLinear (rn1_6.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.c = Convolution (rn1_6.c2.W, rn1_6.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_6.c2.c.y = BatchNormalization (rn1_6.c2.c.c, rn1_6.c2.c.sc, rn1_6.c2.c.b, rn1_6.c2.c.m, rn1_6.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.p = Plus (rn1_6.c2.c.y, rn1_5.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_6.y = RectifiedLinear (rn1_6.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.c = Convolution (rn1_7.c1.c.W, rn1_6.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c1.c.c.y = BatchNormalization (rn1_7.c1.c.c.c, rn1_7.c1.c.c.sc, rn1_7.c1.c.c.b, rn1_7.c1.c.c.m, rn1_7.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c1.y = RectifiedLinear (rn1_7.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.c = Convolution (rn1_7.c2.W, rn1_7.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_7.c2.c.y = BatchNormalization (rn1_7.c2.c.c, rn1_7.c2.c.sc, rn1_7.c2.c.b, rn1_7.c2.c.m, rn1_7.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.p = Plus (rn1_7.c2.c.y, rn1_6.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_7.y = RectifiedLinear (rn1_7.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.c = Convolution (rn1_8.c1.c.W, rn1_7.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c1.c.c.y = BatchNormalization (rn1_8.c1.c.c.c, rn1_8.c1.c.c.sc, rn1_8.c1.c.c.b, rn1_8.c1.c.c.m, rn1_8.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c1.y = RectifiedLinear (rn1_8.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.c = Convolution (rn1_8.c2.W, rn1_8.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_8.c2.c.y = BatchNormalization (rn1_8.c2.c.c, rn1_8.c2.c.sc, rn1_8.c2.c.b, rn1_8.c2.c.m, rn1_8.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.p = Plus (rn1_8.c2.c.y, rn1_7.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_8.y = RectifiedLinear (rn1_8.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.c = Convolution (rn1_9.c1.c.W, rn1_8.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c1.c.c.y = BatchNormalization (rn1_9.c1.c.c.c, rn1_9.c1.c.c.sc, rn1_9.c1.c.c.b, rn1_9.c1.c.c.m, rn1_9.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c1.y = RectifiedLinear (rn1_9.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.c = Convolution (rn1_9.c2.W, rn1_9.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_9.c2.c.y = BatchNormalization (rn1_9.c2.c.c, rn1_9.c2.c.sc, rn1_9.c2.c.b, rn1_9.c2.c.m, rn1_9.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.p = Plus (rn1_9.c2.c.y, rn1_8.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_9.y = RectifiedLinear (rn1_9.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.c = Convolution (rn1_10.c1.c.W, rn1_9.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c1.c.c.y = BatchNormalization (rn1_10.c1.c.c.c, rn1_10.c1.c.c.sc, rn1_10.c1.c.c.b, rn1_10.c1.c.c.m, rn1_10.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c1.y = RectifiedLinear (rn1_10.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.c = Convolution (rn1_10.c2.W, rn1_10.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_10.c2.c.y = BatchNormalization (rn1_10.c2.c.c, rn1_10.c2.c.sc, rn1_10.c2.c.b, rn1_10.c2.c.m, rn1_10.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.p = Plus (rn1_10.c2.c.y, rn1_9.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_10.y = RectifiedLinear (rn1_10.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.c = Convolution (rn1_11.c1.c.W, rn1_10.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c1.c.c.y = BatchNormalization (rn1_11.c1.c.c.c, rn1_11.c1.c.c.sc, rn1_11.c1.c.c.b, rn1_11.c1.c.c.m, rn1_11.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c1.y = RectifiedLinear (rn1_11.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.c = Convolution (rn1_11.c2.W, rn1_11.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_11.c2.c.y = BatchNormalization (rn1_11.c2.c.c, rn1_11.c2.c.sc, rn1_11.c2.c.b, rn1_11.c2.c.m, rn1_11.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.p = Plus (rn1_11.c2.c.y, rn1_10.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_11.y = RectifiedLinear (rn1_11.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.c = Convolution (rn1_12.c1.c.W, rn1_11.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c1.c.c.y = BatchNormalization (rn1_12.c1.c.c.c, rn1_12.c1.c.c.sc, rn1_12.c1.c.c.b, rn1_12.c1.c.c.m, rn1_12.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c1.y = RectifiedLinear (rn1_12.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.c = Convolution (rn1_12.c2.W, rn1_12.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_12.c2.c.y = BatchNormalization (rn1_12.c2.c.c, rn1_12.c2.c.sc, rn1_12.c2.c.b, rn1_12.c2.c.m, rn1_12.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.p = Plus (rn1_12.c2.c.y, rn1_11.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_12.y = RectifiedLinear (rn1_12.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.c = Convolution (rn1_13.c1.c.W, rn1_12.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c1.c.c.y = BatchNormalization (rn1_13.c1.c.c.c, rn1_13.c1.c.c.sc, rn1_13.c1.c.c.b, rn1_13.c1.c.c.m, rn1_13.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c1.y = RectifiedLinear (rn1_13.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.c = Convolution (rn1_13.c2.W, rn1_13.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_13.c2.c.y = BatchNormalization (rn1_13.c2.c.c, rn1_13.c2.c.sc, rn1_13.c2.c.b, rn1_13.c2.c.m, rn1_13.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.p = Plus (rn1_13.c2.c.y, rn1_12.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_13.y = RectifiedLinear (rn1_13.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.c = Convolution (rn1_14.c1.c.W, rn1_13.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c1.c.c.y = BatchNormalization (rn1_14.c1.c.c.c, rn1_14.c1.c.c.sc, rn1_14.c1.c.c.b, rn1_14.c1.c.c.m, rn1_14.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c1.y = RectifiedLinear (rn1_14.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.c = Convolution (rn1_14.c2.W, rn1_14.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_14.c2.c.y = BatchNormalization (rn1_14.c2.c.c, rn1_14.c2.c.sc, rn1_14.c2.c.b, rn1_14.c2.c.m, rn1_14.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.p = Plus (rn1_14.c2.c.y, rn1_13.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_14.y = RectifiedLinear (rn1_14.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.c = Convolution (rn1_15.c1.c.W, rn1_14.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c1.c.c.y = BatchNormalization (rn1_15.c1.c.c.c, rn1_15.c1.c.c.sc, rn1_15.c1.c.c.b, rn1_15.c1.c.c.m, rn1_15.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c1.y = RectifiedLinear (rn1_15.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.c = Convolution (rn1_15.c2.W, rn1_15.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_15.c2.c.y = BatchNormalization (rn1_15.c2.c.c, rn1_15.c2.c.sc, rn1_15.c2.c.b, rn1_15.c2.c.m, rn1_15.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.p = Plus (rn1_15.c2.c.y, rn1_14.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_15.y = RectifiedLinear (rn1_15.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.c = Convolution (rn1_16.c1.c.W, rn1_15.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c1.c.c.y = BatchNormalization (rn1_16.c1.c.c.c, rn1_16.c1.c.c.sc, rn1_16.c1.c.c.b, rn1_16.c1.c.c.m, rn1_16.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c1.y = RectifiedLinear (rn1_16.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.c = Convolution (rn1_16.c2.W, rn1_16.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_16.c2.c.y = BatchNormalization (rn1_16.c2.c.c, rn1_16.c2.c.sc, rn1_16.c2.c.b, rn1_16.c2.c.m, rn1_16.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.p = Plus (rn1_16.c2.c.y, rn1_15.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_16.y = RectifiedLinear (rn1_16.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.c = Convolution (rn1_17.c1.c.W, rn1_16.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c1.c.c.y = BatchNormalization (rn1_17.c1.c.c.c, rn1_17.c1.c.c.sc, rn1_17.c1.c.c.b, rn1_17.c1.c.c.m, rn1_17.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c1.y = RectifiedLinear (rn1_17.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.c = Convolution (rn1_17.c2.W, rn1_17.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_17.c2.c.y = BatchNormalization (rn1_17.c2.c.c, rn1_17.c2.c.sc, rn1_17.c2.c.b, rn1_17.c2.c.m, rn1_17.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.p = Plus (rn1_17.c2.c.y, rn1_16.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_17.y = RectifiedLinear (rn1_17.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.c = Convolution (rn1_18.c1.c.W, rn1_17.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c1.c.c.y = BatchNormalization (rn1_18.c1.c.c.c, rn1_18.c1.c.c.sc, rn1_18.c1.c.c.b, rn1_18.c1.c.c.m, rn1_18.c1.c.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c1.y = RectifiedLinear (rn1_18.c1.c.c.y) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.c = Convolution (rn1_18.c2.W, rn1_18.c1.y) : [16 x 144], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.c2.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> rn1_18.c2.c.y = BatchNormalization (rn1_18.c2.c.c, rn1_18.c2.c.sc, rn1_18.c2.c.b, rn1_18.c2.c.m, rn1_18.c2.c.isd) : [32 x 32 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.p = Plus (rn1_18.c2.c.y, rn1_17.y) : [32 x 32 x 16 x *1], [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn1_18.y = RectifiedLinear (rn1_18.p) : [32 x 32 x 16 x *1] -> [32 x 32 x 16 x *1]
Validating --> rn2_1.c1.c.c.c = Convolution (rn2_1.c1.c.W, rn1_18.y) : [32 x 144], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c1.c.c.y = BatchNormalization (rn2_1.c1.c.c.c, rn2_1.c1.c.c.sc, rn2_1.c1.c.c.b, rn2_1.c1.c.c.m, rn2_1.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c1.y = RectifiedLinear (rn2_1.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.c = Convolution (rn2_1.c2.W, rn2_1.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c2.c.y = BatchNormalization (rn2_1.c2.c.c, rn2_1.c2.c.sc, rn2_1.c2.c.b, rn2_1.c2.c.m, rn2_1.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1_Wproj = LearnableParameter() :  -> [32 x 16]
Validating --> rn2_1.c_proj.c = Convolution (rn2_1_Wproj, rn1_18.y) : [32 x 16], [32 x 32 x 16 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.c_proj.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_1.c_proj.y = BatchNormalization (rn2_1.c_proj.c, rn2_1.c_proj.sc, rn2_1.c_proj.b, rn2_1.c_proj.m, rn2_1.c_proj.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.p = Plus (rn2_1.c2.c.y, rn2_1.c_proj.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_1.y = RectifiedLinear (rn2_1.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.c = Convolution (rn2_2.c1.c.W, rn2_1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c1.c.c.y = BatchNormalization (rn2_2.c1.c.c.c, rn2_2.c1.c.c.sc, rn2_2.c1.c.c.b, rn2_2.c1.c.c.m, rn2_2.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c1.y = RectifiedLinear (rn2_2.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.c = Convolution (rn2_2.c2.W, rn2_2.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_2.c2.c.y = BatchNormalization (rn2_2.c2.c.c, rn2_2.c2.c.sc, rn2_2.c2.c.b, rn2_2.c2.c.m, rn2_2.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.p = Plus (rn2_2.c2.c.y, rn2_1.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_2.y = RectifiedLinear (rn2_2.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.c = Convolution (rn2_3.c1.c.W, rn2_2.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c1.c.c.y = BatchNormalization (rn2_3.c1.c.c.c, rn2_3.c1.c.c.sc, rn2_3.c1.c.c.b, rn2_3.c1.c.c.m, rn2_3.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c1.y = RectifiedLinear (rn2_3.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.c = Convolution (rn2_3.c2.W, rn2_3.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_3.c2.c.y = BatchNormalization (rn2_3.c2.c.c, rn2_3.c2.c.sc, rn2_3.c2.c.b, rn2_3.c2.c.m, rn2_3.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.p = Plus (rn2_3.c2.c.y, rn2_2.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_3.y = RectifiedLinear (rn2_3.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.c = Convolution (rn2_4.c1.c.W, rn2_3.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c1.c.c.y = BatchNormalization (rn2_4.c1.c.c.c, rn2_4.c1.c.c.sc, rn2_4.c1.c.c.b, rn2_4.c1.c.c.m, rn2_4.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c1.y = RectifiedLinear (rn2_4.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.c = Convolution (rn2_4.c2.W, rn2_4.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_4.c2.c.y = BatchNormalization (rn2_4.c2.c.c, rn2_4.c2.c.sc, rn2_4.c2.c.b, rn2_4.c2.c.m, rn2_4.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.p = Plus (rn2_4.c2.c.y, rn2_3.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_4.y = RectifiedLinear (rn2_4.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.c = Convolution (rn2_5.c1.c.W, rn2_4.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c1.c.c.y = BatchNormalization (rn2_5.c1.c.c.c, rn2_5.c1.c.c.sc, rn2_5.c1.c.c.b, rn2_5.c1.c.c.m, rn2_5.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c1.y = RectifiedLinear (rn2_5.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.c = Convolution (rn2_5.c2.W, rn2_5.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_5.c2.c.y = BatchNormalization (rn2_5.c2.c.c, rn2_5.c2.c.sc, rn2_5.c2.c.b, rn2_5.c2.c.m, rn2_5.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.p = Plus (rn2_5.c2.c.y, rn2_4.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_5.y = RectifiedLinear (rn2_5.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.c = Convolution (rn2_6.c1.c.W, rn2_5.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c1.c.c.y = BatchNormalization (rn2_6.c1.c.c.c, rn2_6.c1.c.c.sc, rn2_6.c1.c.c.b, rn2_6.c1.c.c.m, rn2_6.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c1.y = RectifiedLinear (rn2_6.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.c = Convolution (rn2_6.c2.W, rn2_6.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_6.c2.c.y = BatchNormalization (rn2_6.c2.c.c, rn2_6.c2.c.sc, rn2_6.c2.c.b, rn2_6.c2.c.m, rn2_6.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.p = Plus (rn2_6.c2.c.y, rn2_5.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_6.y = RectifiedLinear (rn2_6.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.c = Convolution (rn2_7.c1.c.W, rn2_6.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c1.c.c.y = BatchNormalization (rn2_7.c1.c.c.c, rn2_7.c1.c.c.sc, rn2_7.c1.c.c.b, rn2_7.c1.c.c.m, rn2_7.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c1.y = RectifiedLinear (rn2_7.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.c = Convolution (rn2_7.c2.W, rn2_7.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_7.c2.c.y = BatchNormalization (rn2_7.c2.c.c, rn2_7.c2.c.sc, rn2_7.c2.c.b, rn2_7.c2.c.m, rn2_7.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.p = Plus (rn2_7.c2.c.y, rn2_6.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_7.y = RectifiedLinear (rn2_7.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.c = Convolution (rn2_8.c1.c.W, rn2_7.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c1.c.c.y = BatchNormalization (rn2_8.c1.c.c.c, rn2_8.c1.c.c.sc, rn2_8.c1.c.c.b, rn2_8.c1.c.c.m, rn2_8.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c1.y = RectifiedLinear (rn2_8.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.c = Convolution (rn2_8.c2.W, rn2_8.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_8.c2.c.y = BatchNormalization (rn2_8.c2.c.c, rn2_8.c2.c.sc, rn2_8.c2.c.b, rn2_8.c2.c.m, rn2_8.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.p = Plus (rn2_8.c2.c.y, rn2_7.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_8.y = RectifiedLinear (rn2_8.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.c = Convolution (rn2_9.c1.c.W, rn2_8.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c1.c.c.y = BatchNormalization (rn2_9.c1.c.c.c, rn2_9.c1.c.c.sc, rn2_9.c1.c.c.b, rn2_9.c1.c.c.m, rn2_9.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c1.y = RectifiedLinear (rn2_9.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.c = Convolution (rn2_9.c2.W, rn2_9.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_9.c2.c.y = BatchNormalization (rn2_9.c2.c.c, rn2_9.c2.c.sc, rn2_9.c2.c.b, rn2_9.c2.c.m, rn2_9.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.p = Plus (rn2_9.c2.c.y, rn2_8.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_9.y = RectifiedLinear (rn2_9.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.c = Convolution (rn2_10.c1.c.W, rn2_9.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c1.c.c.y = BatchNormalization (rn2_10.c1.c.c.c, rn2_10.c1.c.c.sc, rn2_10.c1.c.c.b, rn2_10.c1.c.c.m, rn2_10.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c1.y = RectifiedLinear (rn2_10.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.c = Convolution (rn2_10.c2.W, rn2_10.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_10.c2.c.y = BatchNormalization (rn2_10.c2.c.c, rn2_10.c2.c.sc, rn2_10.c2.c.b, rn2_10.c2.c.m, rn2_10.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.p = Plus (rn2_10.c2.c.y, rn2_9.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_10.y = RectifiedLinear (rn2_10.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.c = Convolution (rn2_11.c1.c.W, rn2_10.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c1.c.c.y = BatchNormalization (rn2_11.c1.c.c.c, rn2_11.c1.c.c.sc, rn2_11.c1.c.c.b, rn2_11.c1.c.c.m, rn2_11.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c1.y = RectifiedLinear (rn2_11.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.c = Convolution (rn2_11.c2.W, rn2_11.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_11.c2.c.y = BatchNormalization (rn2_11.c2.c.c, rn2_11.c2.c.sc, rn2_11.c2.c.b, rn2_11.c2.c.m, rn2_11.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.p = Plus (rn2_11.c2.c.y, rn2_10.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_11.y = RectifiedLinear (rn2_11.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.c = Convolution (rn2_12.c1.c.W, rn2_11.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c1.c.c.y = BatchNormalization (rn2_12.c1.c.c.c, rn2_12.c1.c.c.sc, rn2_12.c1.c.c.b, rn2_12.c1.c.c.m, rn2_12.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c1.y = RectifiedLinear (rn2_12.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.c = Convolution (rn2_12.c2.W, rn2_12.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_12.c2.c.y = BatchNormalization (rn2_12.c2.c.c, rn2_12.c2.c.sc, rn2_12.c2.c.b, rn2_12.c2.c.m, rn2_12.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.p = Plus (rn2_12.c2.c.y, rn2_11.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_12.y = RectifiedLinear (rn2_12.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.c = Convolution (rn2_13.c1.c.W, rn2_12.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c1.c.c.y = BatchNormalization (rn2_13.c1.c.c.c, rn2_13.c1.c.c.sc, rn2_13.c1.c.c.b, rn2_13.c1.c.c.m, rn2_13.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c1.y = RectifiedLinear (rn2_13.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.c = Convolution (rn2_13.c2.W, rn2_13.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_13.c2.c.y = BatchNormalization (rn2_13.c2.c.c, rn2_13.c2.c.sc, rn2_13.c2.c.b, rn2_13.c2.c.m, rn2_13.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.p = Plus (rn2_13.c2.c.y, rn2_12.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_13.y = RectifiedLinear (rn2_13.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.c = Convolution (rn2_14.c1.c.W, rn2_13.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c1.c.c.y = BatchNormalization (rn2_14.c1.c.c.c, rn2_14.c1.c.c.sc, rn2_14.c1.c.c.b, rn2_14.c1.c.c.m, rn2_14.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c1.y = RectifiedLinear (rn2_14.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.c = Convolution (rn2_14.c2.W, rn2_14.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_14.c2.c.y = BatchNormalization (rn2_14.c2.c.c, rn2_14.c2.c.sc, rn2_14.c2.c.b, rn2_14.c2.c.m, rn2_14.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.p = Plus (rn2_14.c2.c.y, rn2_13.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_14.y = RectifiedLinear (rn2_14.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.c = Convolution (rn2_15.c1.c.W, rn2_14.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c1.c.c.y = BatchNormalization (rn2_15.c1.c.c.c, rn2_15.c1.c.c.sc, rn2_15.c1.c.c.b, rn2_15.c1.c.c.m, rn2_15.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c1.y = RectifiedLinear (rn2_15.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.c = Convolution (rn2_15.c2.W, rn2_15.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_15.c2.c.y = BatchNormalization (rn2_15.c2.c.c, rn2_15.c2.c.sc, rn2_15.c2.c.b, rn2_15.c2.c.m, rn2_15.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.p = Plus (rn2_15.c2.c.y, rn2_14.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_15.y = RectifiedLinear (rn2_15.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.c = Convolution (rn2_16.c1.c.W, rn2_15.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c1.c.c.y = BatchNormalization (rn2_16.c1.c.c.c, rn2_16.c1.c.c.sc, rn2_16.c1.c.c.b, rn2_16.c1.c.c.m, rn2_16.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c1.y = RectifiedLinear (rn2_16.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.c = Convolution (rn2_16.c2.W, rn2_16.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_16.c2.c.y = BatchNormalization (rn2_16.c2.c.c, rn2_16.c2.c.sc, rn2_16.c2.c.b, rn2_16.c2.c.m, rn2_16.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.p = Plus (rn2_16.c2.c.y, rn2_15.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_16.y = RectifiedLinear (rn2_16.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.c = Convolution (rn2_17.c1.c.W, rn2_16.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c1.c.c.y = BatchNormalization (rn2_17.c1.c.c.c, rn2_17.c1.c.c.sc, rn2_17.c1.c.c.b, rn2_17.c1.c.c.m, rn2_17.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c1.y = RectifiedLinear (rn2_17.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.c = Convolution (rn2_17.c2.W, rn2_17.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_17.c2.c.y = BatchNormalization (rn2_17.c2.c.c, rn2_17.c2.c.sc, rn2_17.c2.c.b, rn2_17.c2.c.m, rn2_17.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.p = Plus (rn2_17.c2.c.y, rn2_16.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_17.y = RectifiedLinear (rn2_17.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.c = Convolution (rn2_18.c1.c.W, rn2_17.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c1.c.c.y = BatchNormalization (rn2_18.c1.c.c.c, rn2_18.c1.c.c.sc, rn2_18.c1.c.c.b, rn2_18.c1.c.c.m, rn2_18.c1.c.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c1.y = RectifiedLinear (rn2_18.c1.c.c.y) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.c = Convolution (rn2_18.c2.W, rn2_18.c1.y) : [32 x 288], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.c2.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> rn2_18.c2.c.y = BatchNormalization (rn2_18.c2.c.c, rn2_18.c2.c.sc, rn2_18.c2.c.b, rn2_18.c2.c.m, rn2_18.c2.c.isd) : [16 x 16 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.p = Plus (rn2_18.c2.c.y, rn2_17.y) : [16 x 16 x 32 x *1], [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn2_18.y = RectifiedLinear (rn2_18.p) : [16 x 16 x 32 x *1] -> [16 x 16 x 32 x *1]
Validating --> rn3_1.c1.c.c.c = Convolution (rn3_1.c1.c.W, rn2_18.y) : [64 x 288], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c1.c.c.y = BatchNormalization (rn3_1.c1.c.c.c, rn3_1.c1.c.c.sc, rn3_1.c1.c.c.b, rn3_1.c1.c.c.m, rn3_1.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c1.y = RectifiedLinear (rn3_1.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.c = Convolution (rn3_1.c2.W, rn3_1.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c2.c.y = BatchNormalization (rn3_1.c2.c.c, rn3_1.c2.c.sc, rn3_1.c2.c.b, rn3_1.c2.c.m, rn3_1.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1_Wproj = LearnableParameter() :  -> [64 x 32]
Validating --> rn3_1.c_proj.c = Convolution (rn3_1_Wproj, rn2_18.y) : [64 x 32], [16 x 16 x 32 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.c_proj.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_1.c_proj.y = BatchNormalization (rn3_1.c_proj.c, rn3_1.c_proj.sc, rn3_1.c_proj.b, rn3_1.c_proj.m, rn3_1.c_proj.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.p = Plus (rn3_1.c2.c.y, rn3_1.c_proj.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_1.y = RectifiedLinear (rn3_1.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.c = Convolution (rn3_2.c1.c.W, rn3_1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c1.c.c.y = BatchNormalization (rn3_2.c1.c.c.c, rn3_2.c1.c.c.sc, rn3_2.c1.c.c.b, rn3_2.c1.c.c.m, rn3_2.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c1.y = RectifiedLinear (rn3_2.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.c = Convolution (rn3_2.c2.W, rn3_2.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_2.c2.c.y = BatchNormalization (rn3_2.c2.c.c, rn3_2.c2.c.sc, rn3_2.c2.c.b, rn3_2.c2.c.m, rn3_2.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.p = Plus (rn3_2.c2.c.y, rn3_1.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_2.y = RectifiedLinear (rn3_2.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.c = Convolution (rn3_3.c1.c.W, rn3_2.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c1.c.c.y = BatchNormalization (rn3_3.c1.c.c.c, rn3_3.c1.c.c.sc, rn3_3.c1.c.c.b, rn3_3.c1.c.c.m, rn3_3.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c1.y = RectifiedLinear (rn3_3.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.c = Convolution (rn3_3.c2.W, rn3_3.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_3.c2.c.y = BatchNormalization (rn3_3.c2.c.c, rn3_3.c2.c.sc, rn3_3.c2.c.b, rn3_3.c2.c.m, rn3_3.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.p = Plus (rn3_3.c2.c.y, rn3_2.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_3.y = RectifiedLinear (rn3_3.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.c = Convolution (rn3_4.c1.c.W, rn3_3.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c1.c.c.y = BatchNormalization (rn3_4.c1.c.c.c, rn3_4.c1.c.c.sc, rn3_4.c1.c.c.b, rn3_4.c1.c.c.m, rn3_4.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c1.y = RectifiedLinear (rn3_4.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.c = Convolution (rn3_4.c2.W, rn3_4.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_4.c2.c.y = BatchNormalization (rn3_4.c2.c.c, rn3_4.c2.c.sc, rn3_4.c2.c.b, rn3_4.c2.c.m, rn3_4.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.p = Plus (rn3_4.c2.c.y, rn3_3.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_4.y = RectifiedLinear (rn3_4.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.c = Convolution (rn3_5.c1.c.W, rn3_4.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c1.c.c.y = BatchNormalization (rn3_5.c1.c.c.c, rn3_5.c1.c.c.sc, rn3_5.c1.c.c.b, rn3_5.c1.c.c.m, rn3_5.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c1.y = RectifiedLinear (rn3_5.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.c = Convolution (rn3_5.c2.W, rn3_5.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_5.c2.c.y = BatchNormalization (rn3_5.c2.c.c, rn3_5.c2.c.sc, rn3_5.c2.c.b, rn3_5.c2.c.m, rn3_5.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.p = Plus (rn3_5.c2.c.y, rn3_4.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_5.y = RectifiedLinear (rn3_5.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.c = Convolution (rn3_6.c1.c.W, rn3_5.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c1.c.c.y = BatchNormalization (rn3_6.c1.c.c.c, rn3_6.c1.c.c.sc, rn3_6.c1.c.c.b, rn3_6.c1.c.c.m, rn3_6.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c1.y = RectifiedLinear (rn3_6.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.c = Convolution (rn3_6.c2.W, rn3_6.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_6.c2.c.y = BatchNormalization (rn3_6.c2.c.c, rn3_6.c2.c.sc, rn3_6.c2.c.b, rn3_6.c2.c.m, rn3_6.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.p = Plus (rn3_6.c2.c.y, rn3_5.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_6.y = RectifiedLinear (rn3_6.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.c = Convolution (rn3_7.c1.c.W, rn3_6.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c1.c.c.y = BatchNormalization (rn3_7.c1.c.c.c, rn3_7.c1.c.c.sc, rn3_7.c1.c.c.b, rn3_7.c1.c.c.m, rn3_7.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c1.y = RectifiedLinear (rn3_7.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.c = Convolution (rn3_7.c2.W, rn3_7.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_7.c2.c.y = BatchNormalization (rn3_7.c2.c.c, rn3_7.c2.c.sc, rn3_7.c2.c.b, rn3_7.c2.c.m, rn3_7.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.p = Plus (rn3_7.c2.c.y, rn3_6.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_7.y = RectifiedLinear (rn3_7.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.c = Convolution (rn3_8.c1.c.W, rn3_7.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c1.c.c.y = BatchNormalization (rn3_8.c1.c.c.c, rn3_8.c1.c.c.sc, rn3_8.c1.c.c.b, rn3_8.c1.c.c.m, rn3_8.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c1.y = RectifiedLinear (rn3_8.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.c = Convolution (rn3_8.c2.W, rn3_8.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_8.c2.c.y = BatchNormalization (rn3_8.c2.c.c, rn3_8.c2.c.sc, rn3_8.c2.c.b, rn3_8.c2.c.m, rn3_8.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.p = Plus (rn3_8.c2.c.y, rn3_7.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_8.y = RectifiedLinear (rn3_8.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.c = Convolution (rn3_9.c1.c.W, rn3_8.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c1.c.c.y = BatchNormalization (rn3_9.c1.c.c.c, rn3_9.c1.c.c.sc, rn3_9.c1.c.c.b, rn3_9.c1.c.c.m, rn3_9.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c1.y = RectifiedLinear (rn3_9.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.c = Convolution (rn3_9.c2.W, rn3_9.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_9.c2.c.y = BatchNormalization (rn3_9.c2.c.c, rn3_9.c2.c.sc, rn3_9.c2.c.b, rn3_9.c2.c.m, rn3_9.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.p = Plus (rn3_9.c2.c.y, rn3_8.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_9.y = RectifiedLinear (rn3_9.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.c = Convolution (rn3_10.c1.c.W, rn3_9.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c1.c.c.y = BatchNormalization (rn3_10.c1.c.c.c, rn3_10.c1.c.c.sc, rn3_10.c1.c.c.b, rn3_10.c1.c.c.m, rn3_10.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c1.y = RectifiedLinear (rn3_10.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.c = Convolution (rn3_10.c2.W, rn3_10.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_10.c2.c.y = BatchNormalization (rn3_10.c2.c.c, rn3_10.c2.c.sc, rn3_10.c2.c.b, rn3_10.c2.c.m, rn3_10.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.p = Plus (rn3_10.c2.c.y, rn3_9.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_10.y = RectifiedLinear (rn3_10.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.c = Convolution (rn3_11.c1.c.W, rn3_10.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c1.c.c.y = BatchNormalization (rn3_11.c1.c.c.c, rn3_11.c1.c.c.sc, rn3_11.c1.c.c.b, rn3_11.c1.c.c.m, rn3_11.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c1.y = RectifiedLinear (rn3_11.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.c = Convolution (rn3_11.c2.W, rn3_11.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_11.c2.c.y = BatchNormalization (rn3_11.c2.c.c, rn3_11.c2.c.sc, rn3_11.c2.c.b, rn3_11.c2.c.m, rn3_11.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.p = Plus (rn3_11.c2.c.y, rn3_10.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_11.y = RectifiedLinear (rn3_11.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.c = Convolution (rn3_12.c1.c.W, rn3_11.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c1.c.c.y = BatchNormalization (rn3_12.c1.c.c.c, rn3_12.c1.c.c.sc, rn3_12.c1.c.c.b, rn3_12.c1.c.c.m, rn3_12.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c1.y = RectifiedLinear (rn3_12.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.c = Convolution (rn3_12.c2.W, rn3_12.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_12.c2.c.y = BatchNormalization (rn3_12.c2.c.c, rn3_12.c2.c.sc, rn3_12.c2.c.b, rn3_12.c2.c.m, rn3_12.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.p = Plus (rn3_12.c2.c.y, rn3_11.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_12.y = RectifiedLinear (rn3_12.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.c = Convolution (rn3_13.c1.c.W, rn3_12.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c1.c.c.y = BatchNormalization (rn3_13.c1.c.c.c, rn3_13.c1.c.c.sc, rn3_13.c1.c.c.b, rn3_13.c1.c.c.m, rn3_13.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c1.y = RectifiedLinear (rn3_13.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.c = Convolution (rn3_13.c2.W, rn3_13.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_13.c2.c.y = BatchNormalization (rn3_13.c2.c.c, rn3_13.c2.c.sc, rn3_13.c2.c.b, rn3_13.c2.c.m, rn3_13.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.p = Plus (rn3_13.c2.c.y, rn3_12.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_13.y = RectifiedLinear (rn3_13.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.c = Convolution (rn3_14.c1.c.W, rn3_13.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c1.c.c.y = BatchNormalization (rn3_14.c1.c.c.c, rn3_14.c1.c.c.sc, rn3_14.c1.c.c.b, rn3_14.c1.c.c.m, rn3_14.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c1.y = RectifiedLinear (rn3_14.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.c = Convolution (rn3_14.c2.W, rn3_14.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_14.c2.c.y = BatchNormalization (rn3_14.c2.c.c, rn3_14.c2.c.sc, rn3_14.c2.c.b, rn3_14.c2.c.m, rn3_14.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.p = Plus (rn3_14.c2.c.y, rn3_13.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_14.y = RectifiedLinear (rn3_14.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.c = Convolution (rn3_15.c1.c.W, rn3_14.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c1.c.c.y = BatchNormalization (rn3_15.c1.c.c.c, rn3_15.c1.c.c.sc, rn3_15.c1.c.c.b, rn3_15.c1.c.c.m, rn3_15.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c1.y = RectifiedLinear (rn3_15.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.c = Convolution (rn3_15.c2.W, rn3_15.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_15.c2.c.y = BatchNormalization (rn3_15.c2.c.c, rn3_15.c2.c.sc, rn3_15.c2.c.b, rn3_15.c2.c.m, rn3_15.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.p = Plus (rn3_15.c2.c.y, rn3_14.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_15.y = RectifiedLinear (rn3_15.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.c = Convolution (rn3_16.c1.c.W, rn3_15.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c1.c.c.y = BatchNormalization (rn3_16.c1.c.c.c, rn3_16.c1.c.c.sc, rn3_16.c1.c.c.b, rn3_16.c1.c.c.m, rn3_16.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c1.y = RectifiedLinear (rn3_16.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.c = Convolution (rn3_16.c2.W, rn3_16.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_16.c2.c.y = BatchNormalization (rn3_16.c2.c.c, rn3_16.c2.c.sc, rn3_16.c2.c.b, rn3_16.c2.c.m, rn3_16.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.p = Plus (rn3_16.c2.c.y, rn3_15.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_16.y = RectifiedLinear (rn3_16.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.c = Convolution (rn3_17.c1.c.W, rn3_16.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c1.c.c.y = BatchNormalization (rn3_17.c1.c.c.c, rn3_17.c1.c.c.sc, rn3_17.c1.c.c.b, rn3_17.c1.c.c.m, rn3_17.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c1.y = RectifiedLinear (rn3_17.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.c = Convolution (rn3_17.c2.W, rn3_17.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_17.c2.c.y = BatchNormalization (rn3_17.c2.c.c, rn3_17.c2.c.sc, rn3_17.c2.c.b, rn3_17.c2.c.m, rn3_17.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.p = Plus (rn3_17.c2.c.y, rn3_16.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_17.y = RectifiedLinear (rn3_17.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.c = Convolution (rn3_18.c1.c.W, rn3_17.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c1.c.c.y = BatchNormalization (rn3_18.c1.c.c.c, rn3_18.c1.c.c.sc, rn3_18.c1.c.c.b, rn3_18.c1.c.c.m, rn3_18.c1.c.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c1.y = RectifiedLinear (rn3_18.c1.c.c.y) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.c = Convolution (rn3_18.c2.W, rn3_18.c1.y) : [64 x 576], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.c2.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> rn3_18.c2.c.y = BatchNormalization (rn3_18.c2.c.c, rn3_18.c2.c.sc, rn3_18.c2.c.b, rn3_18.c2.c.m, rn3_18.c2.c.isd) : [8 x 8 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.p = Plus (rn3_18.c2.c.y, rn3_17.y) : [8 x 8 x 64 x *1], [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> rn3_18.y = RectifiedLinear (rn3_18.p) : [8 x 8 x 64 x *1] -> [8 x 8 x 64 x *1]
Validating --> pool = AveragePooling (rn3_18.y) : [8 x 8 x 64 x *1] -> [1 x 1 x 64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, pool) : [10 x 1 x 1 x 64], [1 x 1 x 64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 390 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn1_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn2_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_4.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_5.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_6.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_7.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_8.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_9.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_10.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_11.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_12.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_13.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_14.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_15.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_16.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_17.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

rn3_18.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.


559 out of 949 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 1 x 1 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[16 x 27]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[32 x 32 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[32 x 32 x 16 x *1]] [conv1.y Gradient[32 x 32 x 16 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool Gradient[1 x 1 x 64 x *1]] [rn1_1.c1.c.W Gradient[16 x 144]] [rn1_1.c1.c.c.b Gradient[16 x 1]] [rn1_1.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.c.c.isd Gradient[16 x 1]] [rn1_1.c1.c.c.m Gradient[16 x 1]] [rn1_1.c1.c.c.sc Gradient[16 x 1]] [rn1_1.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.W Gradient[16 x 144]] [rn1_1.c2.c.b Gradient[16 x 1]] [rn1_1.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_1.c2.c.isd Gradient[16 x 1]] [rn1_1.c2.c.m Gradient[16 x 1]] [rn1_1.c2.c.sc Gradient[16 x 1]] [rn1_1.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_1.p Gradient[32 x 32 x 16 x *1]] [rn1_1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.W Gradient[16 x 144]] [rn1_10.c1.c.c.b Gradient[16 x 1]] [rn1_10.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.c.c.isd Gradient[16 x 1]] [rn1_10.c1.c.c.m Gradient[16 x 1]] [rn1_10.c1.c.c.sc Gradient[16 x 1]] [rn1_10.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.W Gradient[16 x 144]] [rn1_10.c2.c.b Gradient[16 x 1]] [rn1_10.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_10.c2.c.isd Gradient[16 x 1]] [rn1_10.c2.c.m Gradient[16 x 1]] [rn1_10.c2.c.sc Gradient[16 x 1]] [rn1_10.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_10.p Gradient[32 x 32 x 16 x *1]] [rn1_10.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.W Gradient[16 x 144]] [rn1_11.c1.c.c.b Gradient[16 x 1]] [rn1_11.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.c.c.isd Gradient[16 x 1]] [rn1_11.c1.c.c.m Gradient[16 x 1]] [rn1_11.c1.c.c.sc Gradient[16 x 1]] [rn1_11.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.W Gradient[16 x 144]] [rn1_11.c2.c.b Gradient[16 x 1]] [rn1_11.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_11.c2.c.isd Gradient[16 x 1]] [rn1_11.c2.c.m Gradient[16 x 1]] [rn1_11.c2.c.sc Gradient[16 x 1]] [rn1_11.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_11.p Gradient[32 x 32 x 16 x *1]] [rn1_11.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.W Gradient[16 x 144]] [rn1_12.c1.c.c.b Gradient[16 x 1]] [rn1_12.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.c.c.isd Gradient[16 x 1]] [rn1_12.c1.c.c.m Gradient[16 x 1]] [rn1_12.c1.c.c.sc Gradient[16 x 1]] [rn1_12.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.W Gradient[16 x 144]] [rn1_12.c2.c.b Gradient[16 x 1]] [rn1_12.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_12.c2.c.isd Gradient[16 x 1]] [rn1_12.c2.c.m Gradient[16 x 1]] [rn1_12.c2.c.sc Gradient[16 x 1]] [rn1_12.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_12.p Gradient[32 x 32 x 16 x *1]] [rn1_12.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.W Gradient[16 x 144]] [rn1_13.c1.c.c.b Gradient[16 x 1]] [rn1_13.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.c.c.isd Gradient[16 x 1]] [rn1_13.c1.c.c.m Gradient[16 x 1]] [rn1_13.c1.c.c.sc Gradient[16 x 1]] [rn1_13.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.W Gradient[16 x 144]] [rn1_13.c2.c.b Gradient[16 x 1]] [rn1_13.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_13.c2.c.isd Gradient[16 x 1]] [rn1_13.c2.c.m Gradient[16 x 1]] [rn1_13.c2.c.sc Gradient[16 x 1]] [rn1_13.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_13.p Gradient[32 x 32 x 16 x *1]] [rn1_13.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.W Gradient[16 x 144]] [rn1_14.c1.c.c.b Gradient[16 x 1]] [rn1_14.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.c.c.isd Gradient[16 x 1]] [rn1_14.c1.c.c.m Gradient[16 x 1]] [rn1_14.c1.c.c.sc Gradient[16 x 1]] [rn1_14.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.W Gradient[16 x 144]] [rn1_14.c2.c.b Gradient[16 x 1]] [rn1_14.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_14.c2.c.isd Gradient[16 x 1]] [rn1_14.c2.c.m Gradient[16 x 1]] [rn1_14.c2.c.sc Gradient[16 x 1]] [rn1_14.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_14.p Gradient[32 x 32 x 16 x *1]] [rn1_14.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.W Gradient[16 x 144]] [rn1_15.c1.c.c.b Gradient[16 x 1]] [rn1_15.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.c.c.isd Gradient[16 x 1]] [rn1_15.c1.c.c.m Gradient[16 x 1]] [rn1_15.c1.c.c.sc Gradient[16 x 1]] [rn1_15.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.W Gradient[16 x 144]] [rn1_15.c2.c.b Gradient[16 x 1]] [rn1_15.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_15.c2.c.isd Gradient[16 x 1]] [rn1_15.c2.c.m Gradient[16 x 1]] [rn1_15.c2.c.sc Gradient[16 x 1]] [rn1_15.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_15.p Gradient[32 x 32 x 16 x *1]] [rn1_15.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.W Gradient[16 x 144]] [rn1_16.c1.c.c.b Gradient[16 x 1]] [rn1_16.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.c.c.isd Gradient[16 x 1]] [rn1_16.c1.c.c.m Gradient[16 x 1]] [rn1_16.c1.c.c.sc Gradient[16 x 1]] [rn1_16.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.W Gradient[16 x 144]] [rn1_16.c2.c.b Gradient[16 x 1]] [rn1_16.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_16.c2.c.isd Gradient[16 x 1]] [rn1_16.c2.c.m Gradient[16 x 1]] [rn1_16.c2.c.sc Gradient[16 x 1]] [rn1_16.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_16.p Gradient[32 x 32 x 16 x *1]] [rn1_16.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.W Gradient[16 x 144]] [rn1_17.c1.c.c.b Gradient[16 x 1]] [rn1_17.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.c.c.isd Gradient[16 x 1]] [rn1_17.c1.c.c.m Gradient[16 x 1]] [rn1_17.c1.c.c.sc Gradient[16 x 1]] [rn1_17.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.W Gradient[16 x 144]] [rn1_17.c2.c.b Gradient[16 x 1]] [rn1_17.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_17.c2.c.isd Gradient[16 x 1]] [rn1_17.c2.c.m Gradient[16 x 1]] [rn1_17.c2.c.sc Gradient[16 x 1]] [rn1_17.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_17.p Gradient[32 x 32 x 16 x *1]] [rn1_17.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.W Gradient[16 x 144]] [rn1_18.c1.c.c.b Gradient[16 x 1]] [rn1_18.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.c.c.isd Gradient[16 x 1]] [rn1_18.c1.c.c.m Gradient[16 x 1]] [rn1_18.c1.c.c.sc Gradient[16 x 1]] [rn1_18.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.W Gradient[16 x 144]] [rn1_18.c2.c.b Gradient[16 x 1]] [rn1_18.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_18.c2.c.isd Gradient[16 x 1]] [rn1_18.c2.c.m Gradient[16 x 1]] [rn1_18.c2.c.sc Gradient[16 x 1]] [rn1_18.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_18.p Gradient[32 x 32 x 16 x *1]] [rn1_18.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.W Gradient[16 x 144]] [rn1_2.c1.c.c.b Gradient[16 x 1]] [rn1_2.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.c.c.isd Gradient[16 x 1]] [rn1_2.c1.c.c.m Gradient[16 x 1]] [rn1_2.c1.c.c.sc Gradient[16 x 1]] [rn1_2.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.W Gradient[16 x 144]] [rn1_2.c2.c.b Gradient[16 x 1]] [rn1_2.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_2.c2.c.isd Gradient[16 x 1]] [rn1_2.c2.c.m Gradient[16 x 1]] [rn1_2.c2.c.sc Gradient[16 x 1]] [rn1_2.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_2.p Gradient[32 x 32 x 16 x *1]] [rn1_2.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.W Gradient[16 x 144]] [rn1_3.c1.c.c.b Gradient[16 x 1]] [rn1_3.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.c.c.isd Gradient[16 x 1]] [rn1_3.c1.c.c.m Gradient[16 x 1]] [rn1_3.c1.c.c.sc Gradient[16 x 1]] [rn1_3.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.W Gradient[16 x 144]] [rn1_3.c2.c.b Gradient[16 x 1]] [rn1_3.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_3.c2.c.isd Gradient[16 x 1]] [rn1_3.c2.c.m Gradient[16 x 1]] [rn1_3.c2.c.sc Gradient[16 x 1]] [rn1_3.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_3.p Gradient[32 x 32 x 16 x *1]] [rn1_3.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.W Gradient[16 x 144]] [rn1_4.c1.c.c.b Gradient[16 x 1]] [rn1_4.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.c.c.isd Gradient[16 x 1]] [rn1_4.c1.c.c.m Gradient[16 x 1]] [rn1_4.c1.c.c.sc Gradient[16 x 1]] [rn1_4.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.W Gradient[16 x 144]] [rn1_4.c2.c.b Gradient[16 x 1]] [rn1_4.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_4.c2.c.isd Gradient[16 x 1]] [rn1_4.c2.c.m Gradient[16 x 1]] [rn1_4.c2.c.sc Gradient[16 x 1]] [rn1_4.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_4.p Gradient[32 x 32 x 16 x *1]] [rn1_4.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.W Gradient[16 x 144]] [rn1_5.c1.c.c.b Gradient[16 x 1]] [rn1_5.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.c.c.isd Gradient[16 x 1]] [rn1_5.c1.c.c.m Gradient[16 x 1]] [rn1_5.c1.c.c.sc Gradient[16 x 1]] [rn1_5.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.W Gradient[16 x 144]] [rn1_5.c2.c.b Gradient[16 x 1]] [rn1_5.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_5.c2.c.isd Gradient[16 x 1]] [rn1_5.c2.c.m Gradient[16 x 1]] [rn1_5.c2.c.sc Gradient[16 x 1]] [rn1_5.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_5.p Gradient[32 x 32 x 16 x *1]] [rn1_5.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.W Gradient[16 x 144]] [rn1_6.c1.c.c.b Gradient[16 x 1]] [rn1_6.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.c.c.isd Gradient[16 x 1]] [rn1_6.c1.c.c.m Gradient[16 x 1]] [rn1_6.c1.c.c.sc Gradient[16 x 1]] [rn1_6.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.W Gradient[16 x 144]] [rn1_6.c2.c.b Gradient[16 x 1]] [rn1_6.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_6.c2.c.isd Gradient[16 x 1]] [rn1_6.c2.c.m Gradient[16 x 1]] [rn1_6.c2.c.sc Gradient[16 x 1]] [rn1_6.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_6.p Gradient[32 x 32 x 16 x *1]] [rn1_6.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.W Gradient[16 x 144]] [rn1_7.c1.c.c.b Gradient[16 x 1]] [rn1_7.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.c.c.isd Gradient[16 x 1]] [rn1_7.c1.c.c.m Gradient[16 x 1]] [rn1_7.c1.c.c.sc Gradient[16 x 1]] [rn1_7.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.W Gradient[16 x 144]] [rn1_7.c2.c.b Gradient[16 x 1]] [rn1_7.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_7.c2.c.isd Gradient[16 x 1]] [rn1_7.c2.c.m Gradient[16 x 1]] [rn1_7.c2.c.sc Gradient[16 x 1]] [rn1_7.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_7.p Gradient[32 x 32 x 16 x *1]] [rn1_7.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.W Gradient[16 x 144]] [rn1_8.c1.c.c.b Gradient[16 x 1]] [rn1_8.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.c.c.isd Gradient[16 x 1]] [rn1_8.c1.c.c.m Gradient[16 x 1]] [rn1_8.c1.c.c.sc Gradient[16 x 1]] [rn1_8.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.W Gradient[16 x 144]] [rn1_8.c2.c.b Gradient[16 x 1]] [rn1_8.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_8.c2.c.isd Gradient[16 x 1]] [rn1_8.c2.c.m Gradient[16 x 1]] [rn1_8.c2.c.sc Gradient[16 x 1]] [rn1_8.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_8.p Gradient[32 x 32 x 16 x *1]] [rn1_8.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.W Gradient[16 x 144]] [rn1_9.c1.c.c.b Gradient[16 x 1]] [rn1_9.c1.c.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.c.c.isd Gradient[16 x 1]] [rn1_9.c1.c.c.m Gradient[16 x 1]] [rn1_9.c1.c.c.sc Gradient[16 x 1]] [rn1_9.c1.c.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c1.y Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.W Gradient[16 x 144]] [rn1_9.c2.c.b Gradient[16 x 1]] [rn1_9.c2.c.c Gradient[32 x 32 x 16 x *1]] [rn1_9.c2.c.isd Gradient[16 x 1]] [rn1_9.c2.c.m Gradient[16 x 1]] [rn1_9.c2.c.sc Gradient[16 x 1]] [rn1_9.c2.c.y Gradient[32 x 32 x 16 x *1]] [rn1_9.p Gradient[32 x 32 x 16 x *1]] [rn1_9.y Gradient[32 x 32 x 16 x *1]] [rn2_1.c1.c.W Gradient[32 x 144]] [rn2_1.c1.c.c.b Gradient[32 x 1]] [rn2_1.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.c.c.isd Gradient[32 x 1]] [rn2_1.c1.c.c.m Gradient[32 x 1]] [rn2_1.c1.c.c.sc Gradient[32 x 1]] [rn2_1.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.W Gradient[32 x 288]] [rn2_1.c2.c.b Gradient[32 x 1]] [rn2_1.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c2.c.isd Gradient[32 x 1]] [rn2_1.c2.c.m Gradient[32 x 1]] [rn2_1.c2.c.sc Gradient[32 x 1]] [rn2_1.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.b Gradient[32 x 1]] [rn2_1.c_proj.c Gradient[16 x 16 x 32 x *1]] [rn2_1.c_proj.isd Gradient[32 x 1]] [rn2_1.c_proj.m Gradient[32 x 1]] [rn2_1.c_proj.sc Gradient[32 x 1]] [rn2_1.c_proj.y Gradient[16 x 16 x 32 x *1]] [rn2_1.p Gradient[16 x 16 x 32 x *1]] [rn2_1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.W Gradient[32 x 288]] [rn2_10.c1.c.c.b Gradient[32 x 1]] [rn2_10.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.c.c.isd Gradient[32 x 1]] [rn2_10.c1.c.c.m Gradient[32 x 1]] [rn2_10.c1.c.c.sc Gradient[32 x 1]] [rn2_10.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.W Gradient[32 x 288]] [rn2_10.c2.c.b Gradient[32 x 1]] [rn2_10.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_10.c2.c.isd Gradient[32 x 1]] [rn2_10.c2.c.m Gradient[32 x 1]] [rn2_10.c2.c.sc Gradient[32 x 1]] [rn2_10.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_10.p Gradient[16 x 16 x 32 x *1]] [rn2_10.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.W Gradient[32 x 288]] [rn2_11.c1.c.c.b Gradient[32 x 1]] [rn2_11.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.c.c.isd Gradient[32 x 1]] [rn2_11.c1.c.c.m Gradient[32 x 1]] [rn2_11.c1.c.c.sc Gradient[32 x 1]] [rn2_11.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.W Gradient[32 x 288]] [rn2_11.c2.c.b Gradient[32 x 1]] [rn2_11.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_11.c2.c.isd Gradient[32 x 1]] [rn2_11.c2.c.m Gradient[32 x 1]] [rn2_11.c2.c.sc Gradient[32 x 1]] [rn2_11.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_11.p Gradient[16 x 16 x 32 x *1]] [rn2_11.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.W Gradient[32 x 288]] [rn2_12.c1.c.c.b Gradient[32 x 1]] [rn2_12.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.c.c.isd Gradient[32 x 1]] [rn2_12.c1.c.c.m Gradient[32 x 1]] [rn2_12.c1.c.c.sc Gradient[32 x 1]] [rn2_12.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.W Gradient[32 x 288]] [rn2_12.c2.c.b Gradient[32 x 1]] [rn2_12.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_12.c2.c.isd Gradient[32 x 1]] [rn2_12.c2.c.m Gradient[32 x 1]] [rn2_12.c2.c.sc Gradient[32 x 1]] [rn2_12.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_12.p Gradient[16 x 16 x 32 x *1]] [rn2_12.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.W Gradient[32 x 288]] [rn2_13.c1.c.c.b Gradient[32 x 1]] [rn2_13.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.c.c.isd Gradient[32 x 1]] [rn2_13.c1.c.c.m Gradient[32 x 1]] [rn2_13.c1.c.c.sc Gradient[32 x 1]] [rn2_13.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.W Gradient[32 x 288]] [rn2_13.c2.c.b Gradient[32 x 1]] [rn2_13.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_13.c2.c.isd Gradient[32 x 1]] [rn2_13.c2.c.m Gradient[32 x 1]] [rn2_13.c2.c.sc Gradient[32 x 1]] [rn2_13.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_13.p Gradient[16 x 16 x 32 x *1]] [rn2_13.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.W Gradient[32 x 288]] [rn2_14.c1.c.c.b Gradient[32 x 1]] [rn2_14.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.c.c.isd Gradient[32 x 1]] [rn2_14.c1.c.c.m Gradient[32 x 1]] [rn2_14.c1.c.c.sc Gradient[32 x 1]] [rn2_14.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.W Gradient[32 x 288]] [rn2_14.c2.c.b Gradient[32 x 1]] [rn2_14.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_14.c2.c.isd Gradient[32 x 1]] [rn2_14.c2.c.m Gradient[32 x 1]] [rn2_14.c2.c.sc Gradient[32 x 1]] [rn2_14.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_14.p Gradient[16 x 16 x 32 x *1]] [rn2_14.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.W Gradient[32 x 288]] [rn2_15.c1.c.c.b Gradient[32 x 1]] [rn2_15.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.c.c.isd Gradient[32 x 1]] [rn2_15.c1.c.c.m Gradient[32 x 1]] [rn2_15.c1.c.c.sc Gradient[32 x 1]] [rn2_15.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.W Gradient[32 x 288]] [rn2_15.c2.c.b Gradient[32 x 1]] [rn2_15.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_15.c2.c.isd Gradient[32 x 1]] [rn2_15.c2.c.m Gradient[32 x 1]] [rn2_15.c2.c.sc Gradient[32 x 1]] [rn2_15.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_15.p Gradient[16 x 16 x 32 x *1]] [rn2_15.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.W Gradient[32 x 288]] [rn2_16.c1.c.c.b Gradient[32 x 1]] [rn2_16.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.c.c.isd Gradient[32 x 1]] [rn2_16.c1.c.c.m Gradient[32 x 1]] [rn2_16.c1.c.c.sc Gradient[32 x 1]] [rn2_16.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.W Gradient[32 x 288]] [rn2_16.c2.c.b Gradient[32 x 1]] [rn2_16.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_16.c2.c.isd Gradient[32 x 1]] [rn2_16.c2.c.m Gradient[32 x 1]] [rn2_16.c2.c.sc Gradient[32 x 1]] [rn2_16.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_16.p Gradient[16 x 16 x 32 x *1]] [rn2_16.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.W Gradient[32 x 288]] [rn2_17.c1.c.c.b Gradient[32 x 1]] [rn2_17.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.c.c.isd Gradient[32 x 1]] [rn2_17.c1.c.c.m Gradient[32 x 1]] [rn2_17.c1.c.c.sc Gradient[32 x 1]] [rn2_17.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.W Gradient[32 x 288]] [rn2_17.c2.c.b Gradient[32 x 1]] [rn2_17.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_17.c2.c.isd Gradient[32 x 1]] [rn2_17.c2.c.m Gradient[32 x 1]] [rn2_17.c2.c.sc Gradient[32 x 1]] [rn2_17.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_17.p Gradient[16 x 16 x 32 x *1]] [rn2_17.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.W Gradient[32 x 288]] [rn2_18.c1.c.c.b Gradient[32 x 1]] [rn2_18.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.c.c.isd Gradient[32 x 1]] [rn2_18.c1.c.c.m Gradient[32 x 1]] [rn2_18.c1.c.c.sc Gradient[32 x 1]] [rn2_18.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.W Gradient[32 x 288]] [rn2_18.c2.c.b Gradient[32 x 1]] [rn2_18.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_18.c2.c.isd Gradient[32 x 1]] [rn2_18.c2.c.m Gradient[32 x 1]] [rn2_18.c2.c.sc Gradient[32 x 1]] [rn2_18.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_18.p Gradient[16 x 16 x 32 x *1]] [rn2_18.y Gradient[16 x 16 x 32 x *1]] [rn2_1_Wproj Gradient[32 x 16]] [rn2_2.c1.c.W Gradient[32 x 288]] [rn2_2.c1.c.c.b Gradient[32 x 1]] [rn2_2.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.c.c.isd Gradient[32 x 1]] [rn2_2.c1.c.c.m Gradient[32 x 1]] [rn2_2.c1.c.c.sc Gradient[32 x 1]] [rn2_2.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.W Gradient[32 x 288]] [rn2_2.c2.c.b Gradient[32 x 1]] [rn2_2.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_2.c2.c.isd Gradient[32 x 1]] [rn2_2.c2.c.m Gradient[32 x 1]] [rn2_2.c2.c.sc Gradient[32 x 1]] [rn2_2.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_2.p Gradient[16 x 16 x 32 x *1]] [rn2_2.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.W Gradient[32 x 288]] [rn2_3.c1.c.c.b Gradient[32 x 1]] [rn2_3.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.c.c.isd Gradient[32 x 1]] [rn2_3.c1.c.c.m Gradient[32 x 1]] [rn2_3.c1.c.c.sc Gradient[32 x 1]] [rn2_3.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.W Gradient[32 x 288]] [rn2_3.c2.c.b Gradient[32 x 1]] [rn2_3.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_3.c2.c.isd Gradient[32 x 1]] [rn2_3.c2.c.m Gradient[32 x 1]] [rn2_3.c2.c.sc Gradient[32 x 1]] [rn2_3.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_3.p Gradient[16 x 16 x 32 x *1]] [rn2_3.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.W Gradient[32 x 288]] [rn2_4.c1.c.c.b Gradient[32 x 1]] [rn2_4.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.c.c.isd Gradient[32 x 1]] [rn2_4.c1.c.c.m Gradient[32 x 1]] [rn2_4.c1.c.c.sc Gradient[32 x 1]] [rn2_4.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.W Gradient[32 x 288]] [rn2_4.c2.c.b Gradient[32 x 1]] [rn2_4.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_4.c2.c.isd Gradient[32 x 1]] [rn2_4.c2.c.m Gradient[32 x 1]] [rn2_4.c2.c.sc Gradient[32 x 1]] [rn2_4.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_4.p Gradient[16 x 16 x 32 x *1]] [rn2_4.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.W Gradient[32 x 288]] [rn2_5.c1.c.c.b Gradient[32 x 1]] [rn2_5.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.c.c.isd Gradient[32 x 1]] [rn2_5.c1.c.c.m Gradient[32 x 1]] [rn2_5.c1.c.c.sc Gradient[32 x 1]] [rn2_5.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.W Gradient[32 x 288]] [rn2_5.c2.c.b Gradient[32 x 1]] [rn2_5.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_5.c2.c.isd Gradient[32 x 1]] [rn2_5.c2.c.m Gradient[32 x 1]] [rn2_5.c2.c.sc Gradient[32 x 1]] [rn2_5.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_5.p Gradient[16 x 16 x 32 x *1]] [rn2_5.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.W Gradient[32 x 288]] [rn2_6.c1.c.c.b Gradient[32 x 1]] [rn2_6.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.c.c.isd Gradient[32 x 1]] [rn2_6.c1.c.c.m Gradient[32 x 1]] [rn2_6.c1.c.c.sc Gradient[32 x 1]] [rn2_6.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.W Gradient[32 x 288]] [rn2_6.c2.c.b Gradient[32 x 1]] [rn2_6.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_6.c2.c.isd Gradient[32 x 1]] [rn2_6.c2.c.m Gradient[32 x 1]] [rn2_6.c2.c.sc Gradient[32 x 1]] [rn2_6.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_6.p Gradient[16 x 16 x 32 x *1]] [rn2_6.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.W Gradient[32 x 288]] [rn2_7.c1.c.c.b Gradient[32 x 1]] [rn2_7.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.c.c.isd Gradient[32 x 1]] [rn2_7.c1.c.c.m Gradient[32 x 1]] [rn2_7.c1.c.c.sc Gradient[32 x 1]] [rn2_7.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.W Gradient[32 x 288]] [rn2_7.c2.c.b Gradient[32 x 1]] [rn2_7.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_7.c2.c.isd Gradient[32 x 1]] [rn2_7.c2.c.m Gradient[32 x 1]] [rn2_7.c2.c.sc Gradient[32 x 1]] [rn2_7.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_7.p Gradient[16 x 16 x 32 x *1]] [rn2_7.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.W Gradient[32 x 288]] [rn2_8.c1.c.c.b Gradient[32 x 1]] [rn2_8.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.c.c.isd Gradient[32 x 1]] [rn2_8.c1.c.c.m Gradient[32 x 1]] [rn2_8.c1.c.c.sc Gradient[32 x 1]] [rn2_8.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.W Gradient[32 x 288]] [rn2_8.c2.c.b Gradient[32 x 1]] [rn2_8.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_8.c2.c.isd Gradient[32 x 1]] [rn2_8.c2.c.m Gradient[32 x 1]] [rn2_8.c2.c.sc Gradient[32 x 1]] [rn2_8.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_8.p Gradient[16 x 16 x 32 x *1]] [rn2_8.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.W Gradient[32 x 288]] [rn2_9.c1.c.c.b Gradient[32 x 1]] [rn2_9.c1.c.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.c.c.isd Gradient[32 x 1]] [rn2_9.c1.c.c.m Gradient[32 x 1]] [rn2_9.c1.c.c.sc Gradient[32 x 1]] [rn2_9.c1.c.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c1.y Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.W Gradient[32 x 288]] [rn2_9.c2.c.b Gradient[32 x 1]] [rn2_9.c2.c.c Gradient[16 x 16 x 32 x *1]] [rn2_9.c2.c.isd Gradient[32 x 1]] [rn2_9.c2.c.m Gradient[32 x 1]] [rn2_9.c2.c.sc Gradient[32 x 1]] [rn2_9.c2.c.y Gradient[16 x 16 x 32 x *1]] [rn2_9.p Gradient[16 x 16 x 32 x *1]] [rn2_9.y Gradient[16 x 16 x 32 x *1]] [rn3_1.c1.c.W Gradient[64 x 288]] [rn3_1.c1.c.c.b Gradient[64 x 1]] [rn3_1.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.c.c.isd Gradient[64 x 1]] [rn3_1.c1.c.c.m Gradient[64 x 1]] [rn3_1.c1.c.c.sc Gradient[64 x 1]] [rn3_1.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.W Gradient[64 x 576]] [rn3_1.c2.c.b Gradient[64 x 1]] [rn3_1.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c2.c.isd Gradient[64 x 1]] [rn3_1.c2.c.m Gradient[64 x 1]] [rn3_1.c2.c.sc Gradient[64 x 1]] [rn3_1.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.b Gradient[64 x 1]] [rn3_1.c_proj.c Gradient[8 x 8 x 64 x *1]] [rn3_1.c_proj.isd Gradient[64 x 1]] [rn3_1.c_proj.m Gradient[64 x 1]] [rn3_1.c_proj.sc Gradient[64 x 1]] [rn3_1.c_proj.y Gradient[8 x 8 x 64 x *1]] [rn3_1.p Gradient[8 x 8 x 64 x *1]] [rn3_1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.W Gradient[64 x 576]] [rn3_10.c1.c.c.b Gradient[64 x 1]] [rn3_10.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.c.c.isd Gradient[64 x 1]] [rn3_10.c1.c.c.m Gradient[64 x 1]] [rn3_10.c1.c.c.sc Gradient[64 x 1]] [rn3_10.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.W Gradient[64 x 576]] [rn3_10.c2.c.b Gradient[64 x 1]] [rn3_10.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_10.c2.c.isd Gradient[64 x 1]] [rn3_10.c2.c.m Gradient[64 x 1]] [rn3_10.c2.c.sc Gradient[64 x 1]] [rn3_10.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_10.p Gradient[8 x 8 x 64 x *1]] [rn3_10.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.W Gradient[64 x 576]] [rn3_11.c1.c.c.b Gradient[64 x 1]] [rn3_11.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.c.c.isd Gradient[64 x 1]] [rn3_11.c1.c.c.m Gradient[64 x 1]] [rn3_11.c1.c.c.sc Gradient[64 x 1]] [rn3_11.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.W Gradient[64 x 576]] [rn3_11.c2.c.b Gradient[64 x 1]] [rn3_11.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_11.c2.c.isd Gradient[64 x 1]] [rn3_11.c2.c.m Gradient[64 x 1]] [rn3_11.c2.c.sc Gradient[64 x 1]] [rn3_11.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_11.p Gradient[8 x 8 x 64 x *1]] [rn3_11.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.W Gradient[64 x 576]] [rn3_12.c1.c.c.b Gradient[64 x 1]] [rn3_12.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.c.c.isd Gradient[64 x 1]] [rn3_12.c1.c.c.m Gradient[64 x 1]] [rn3_12.c1.c.c.sc Gradient[64 x 1]] [rn3_12.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.W Gradient[64 x 576]] [rn3_12.c2.c.b Gradient[64 x 1]] [rn3_12.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_12.c2.c.isd Gradient[64 x 1]] [rn3_12.c2.c.m Gradient[64 x 1]] [rn3_12.c2.c.sc Gradient[64 x 1]] [rn3_12.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_12.p Gradient[8 x 8 x 64 x *1]] [rn3_12.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.W Gradient[64 x 576]] [rn3_13.c1.c.c.b Gradient[64 x 1]] [rn3_13.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.c.c.isd Gradient[64 x 1]] [rn3_13.c1.c.c.m Gradient[64 x 1]] [rn3_13.c1.c.c.sc Gradient[64 x 1]] [rn3_13.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.W Gradient[64 x 576]] [rn3_13.c2.c.b Gradient[64 x 1]] [rn3_13.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_13.c2.c.isd Gradient[64 x 1]] [rn3_13.c2.c.m Gradient[64 x 1]] [rn3_13.c2.c.sc Gradient[64 x 1]] [rn3_13.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_13.p Gradient[8 x 8 x 64 x *1]] [rn3_13.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.W Gradient[64 x 576]] [rn3_14.c1.c.c.b Gradient[64 x 1]] [rn3_14.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.c.c.isd Gradient[64 x 1]] [rn3_14.c1.c.c.m Gradient[64 x 1]] [rn3_14.c1.c.c.sc Gradient[64 x 1]] [rn3_14.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.W Gradient[64 x 576]] [rn3_14.c2.c.b Gradient[64 x 1]] [rn3_14.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_14.c2.c.isd Gradient[64 x 1]] [rn3_14.c2.c.m Gradient[64 x 1]] [rn3_14.c2.c.sc Gradient[64 x 1]] [rn3_14.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_14.p Gradient[8 x 8 x 64 x *1]] [rn3_14.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.W Gradient[64 x 576]] [rn3_15.c1.c.c.b Gradient[64 x 1]] [rn3_15.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.c.c.isd Gradient[64 x 1]] [rn3_15.c1.c.c.m Gradient[64 x 1]] [rn3_15.c1.c.c.sc Gradient[64 x 1]] [rn3_15.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.W Gradient[64 x 576]] [rn3_15.c2.c.b Gradient[64 x 1]] [rn3_15.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_15.c2.c.isd Gradient[64 x 1]] [rn3_15.c2.c.m Gradient[64 x 1]] [rn3_15.c2.c.sc Gradient[64 x 1]] [rn3_15.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_15.p Gradient[8 x 8 x 64 x *1]] [rn3_15.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.W Gradient[64 x 576]] [rn3_16.c1.c.c.b Gradient[64 x 1]] [rn3_16.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.c.c.isd Gradient[64 x 1]] [rn3_16.c1.c.c.m Gradient[64 x 1]] [rn3_16.c1.c.c.sc Gradient[64 x 1]] [rn3_16.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.W Gradient[64 x 576]] [rn3_16.c2.c.b Gradient[64 x 1]] [rn3_16.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_16.c2.c.isd Gradient[64 x 1]] [rn3_16.c2.c.m Gradient[64 x 1]] [rn3_16.c2.c.sc Gradient[64 x 1]] [rn3_16.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_16.p Gradient[8 x 8 x 64 x *1]] [rn3_16.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.W Gradient[64 x 576]] [rn3_17.c1.c.c.b Gradient[64 x 1]] [rn3_17.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.c.c.isd Gradient[64 x 1]] [rn3_17.c1.c.c.m Gradient[64 x 1]] [rn3_17.c1.c.c.sc Gradient[64 x 1]] [rn3_17.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.W Gradient[64 x 576]] [rn3_17.c2.c.b Gradient[64 x 1]] [rn3_17.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_17.c2.c.isd Gradient[64 x 1]] [rn3_17.c2.c.m Gradient[64 x 1]] [rn3_17.c2.c.sc Gradient[64 x 1]] [rn3_17.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_17.p Gradient[8 x 8 x 64 x *1]] [rn3_17.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.W Gradient[64 x 576]] [rn3_18.c1.c.c.b Gradient[64 x 1]] [rn3_18.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.c.c.isd Gradient[64 x 1]] [rn3_18.c1.c.c.m Gradient[64 x 1]] [rn3_18.c1.c.c.sc Gradient[64 x 1]] [rn3_18.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.W Gradient[64 x 576]] [rn3_18.c2.c.b Gradient[64 x 1]] [rn3_18.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_18.c2.c.isd Gradient[64 x 1]] [rn3_18.c2.c.m Gradient[64 x 1]] [rn3_18.c2.c.sc Gradient[64 x 1]] [rn3_18.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_18.p Gradient[8 x 8 x 64 x *1]] [rn3_18.y Gradient[8 x 8 x 64 x *1]] [rn3_1_Wproj Gradient[64 x 32]] [rn3_2.c1.c.W Gradient[64 x 576]] [rn3_2.c1.c.c.b Gradient[64 x 1]] [rn3_2.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.c.c.isd Gradient[64 x 1]] [rn3_2.c1.c.c.m Gradient[64 x 1]] [rn3_2.c1.c.c.sc Gradient[64 x 1]] [rn3_2.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.W Gradient[64 x 576]] [rn3_2.c2.c.b Gradient[64 x 1]] [rn3_2.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_2.c2.c.isd Gradient[64 x 1]] [rn3_2.c2.c.m Gradient[64 x 1]] [rn3_2.c2.c.sc Gradient[64 x 1]] [rn3_2.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_2.p Gradient[8 x 8 x 64 x *1]] [rn3_2.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.W Gradient[64 x 576]] [rn3_3.c1.c.c.b Gradient[64 x 1]] [rn3_3.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.c.c.isd Gradient[64 x 1]] [rn3_3.c1.c.c.m Gradient[64 x 1]] [rn3_3.c1.c.c.sc Gradient[64 x 1]] [rn3_3.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.W Gradient[64 x 576]] [rn3_3.c2.c.b Gradient[64 x 1]] [rn3_3.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_3.c2.c.isd Gradient[64 x 1]] [rn3_3.c2.c.m Gradient[64 x 1]] [rn3_3.c2.c.sc Gradient[64 x 1]] [rn3_3.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_3.p Gradient[8 x 8 x 64 x *1]] [rn3_3.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.W Gradient[64 x 576]] [rn3_4.c1.c.c.b Gradient[64 x 1]] [rn3_4.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.c.c.isd Gradient[64 x 1]] [rn3_4.c1.c.c.m Gradient[64 x 1]] [rn3_4.c1.c.c.sc Gradient[64 x 1]] [rn3_4.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.W Gradient[64 x 576]] [rn3_4.c2.c.b Gradient[64 x 1]] [rn3_4.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_4.c2.c.isd Gradient[64 x 1]] [rn3_4.c2.c.m Gradient[64 x 1]] [rn3_4.c2.c.sc Gradient[64 x 1]] [rn3_4.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_4.p Gradient[8 x 8 x 64 x *1]] [rn3_4.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.W Gradient[64 x 576]] [rn3_5.c1.c.c.b Gradient[64 x 1]] [rn3_5.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.c.c.isd Gradient[64 x 1]] [rn3_5.c1.c.c.m Gradient[64 x 1]] [rn3_5.c1.c.c.sc Gradient[64 x 1]] [rn3_5.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.W Gradient[64 x 576]] [rn3_5.c2.c.b Gradient[64 x 1]] [rn3_5.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_5.c2.c.isd Gradient[64 x 1]] [rn3_5.c2.c.m Gradient[64 x 1]] [rn3_5.c2.c.sc Gradient[64 x 1]] [rn3_5.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_5.p Gradient[8 x 8 x 64 x *1]] [rn3_5.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.W Gradient[64 x 576]] [rn3_6.c1.c.c.b Gradient[64 x 1]] [rn3_6.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.c.c.isd Gradient[64 x 1]] [rn3_6.c1.c.c.m Gradient[64 x 1]] [rn3_6.c1.c.c.sc Gradient[64 x 1]] [rn3_6.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.W Gradient[64 x 576]] [rn3_6.c2.c.b Gradient[64 x 1]] [rn3_6.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_6.c2.c.isd Gradient[64 x 1]] [rn3_6.c2.c.m Gradient[64 x 1]] [rn3_6.c2.c.sc Gradient[64 x 1]] [rn3_6.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_6.p Gradient[8 x 8 x 64 x *1]] [rn3_6.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.W Gradient[64 x 576]] [rn3_7.c1.c.c.b Gradient[64 x 1]] [rn3_7.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.c.c.isd Gradient[64 x 1]] [rn3_7.c1.c.c.m Gradient[64 x 1]] [rn3_7.c1.c.c.sc Gradient[64 x 1]] [rn3_7.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.W Gradient[64 x 576]] [rn3_7.c2.c.b Gradient[64 x 1]] [rn3_7.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_7.c2.c.isd Gradient[64 x 1]] [rn3_7.c2.c.m Gradient[64 x 1]] [rn3_7.c2.c.sc Gradient[64 x 1]] [rn3_7.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_7.p Gradient[8 x 8 x 64 x *1]] [rn3_7.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.W Gradient[64 x 576]] [rn3_8.c1.c.c.b Gradient[64 x 1]] [rn3_8.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.c.c.isd Gradient[64 x 1]] [rn3_8.c1.c.c.m Gradient[64 x 1]] [rn3_8.c1.c.c.sc Gradient[64 x 1]] [rn3_8.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.W Gradient[64 x 576]] [rn3_8.c2.c.b Gradient[64 x 1]] [rn3_8.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_8.c2.c.isd Gradient[64 x 1]] [rn3_8.c2.c.m Gradient[64 x 1]] [rn3_8.c2.c.sc Gradient[64 x 1]] [rn3_8.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_8.p Gradient[8 x 8 x 64 x *1]] [rn3_8.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.W Gradient[64 x 576]] [rn3_9.c1.c.c.b Gradient[64 x 1]] [rn3_9.c1.c.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.c.c.isd Gradient[64 x 1]] [rn3_9.c1.c.c.m Gradient[64 x 1]] [rn3_9.c1.c.c.sc Gradient[64 x 1]] [rn3_9.c1.c.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c1.y Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.W Gradient[64 x 576]] [rn3_9.c2.c.b Gradient[64 x 1]] [rn3_9.c2.c.c Gradient[8 x 8 x 64 x *1]] [rn3_9.c2.c.isd Gradient[64 x 1]] [rn3_9.c2.c.m Gradient[64 x 1]] [rn3_9.c2.c.sc Gradient[64 x 1]] [rn3_9.c2.c.y Gradient[8 x 8 x 64 x *1]] [rn3_9.p Gradient[8 x 8 x 64 x *1]] [rn3_9.y Gradient[8 x 8 x 64 x *1]] }
0x7f6e8f4b33e8: {[conv1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e8f4b3768: {[conv1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e8f4b3ca8: {[conv1.y Value[32 x 32 x 16 x *1]] }
0x7f6e8f4cd4b8: {[rn2_8.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cd8d8: {[rn2_8.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cda38: {[rn2_8.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cdb98: {[rn2_9.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cde58: {[rn2_9.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4ce398: {[rn2_9.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4ce558: {[rn2_9.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4ce8d8: {[rn2_9.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cee18: {[rn2_9.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cefd8: {[rn2_9.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cf198: {[rn2_10.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cf518: {[rn2_10.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cfa58: {[rn2_10.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cfc18: {[rn2_10.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4cff98: {[rn2_10.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d04d8: {[rn2_10.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d0698: {[rn2_10.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d0858: {[rn2_11.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d0bd8: {[rn2_11.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d1118: {[rn2_11.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d12d8: {[rn2_11.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d1658: {[rn2_11.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d1b98: {[rn2_11.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d1d58: {[rn2_11.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d1f18: {[rn2_12.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d2298: {[rn2_12.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d27d8: {[rn2_12.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d2998: {[rn2_12.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d2d18: {[rn2_12.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d3258: {[rn2_12.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d3418: {[rn2_12.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d35d8: {[rn2_13.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d3958: {[rn2_13.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d3e98: {[rn2_13.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d4058: {[rn2_13.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d43d8: {[rn2_13.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d4918: {[rn2_13.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d4ad8: {[rn2_13.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d4c98: {[rn2_14.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d5018: {[rn2_14.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d5558: {[rn2_14.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d5718: {[rn2_14.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d5a98: {[rn2_14.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d5fd8: {[rn2_14.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d6198: {[rn2_14.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d6358: {[rn2_15.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d66d8: {[rn2_15.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d6c18: {[rn2_15.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d6dd8: {[rn2_15.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d7158: {[rn2_15.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d7698: {[rn2_15.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d7858: {[rn2_15.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d7a18: {[rn2_16.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d7d98: {[rn2_16.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d82d8: {[rn2_16.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d8498: {[rn2_16.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d8818: {[rn2_16.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d8d58: {[rn2_16.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d8f18: {[rn2_16.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d90d8: {[rn2_17.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d9458: {[rn2_17.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d9998: {[rn2_17.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d9b58: {[rn2_17.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4d9ed8: {[rn2_17.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4da418: {[rn2_17.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4da5d8: {[rn2_17.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4da798: {[rn2_18.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4dab18: {[rn2_18.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4db058: {[rn2_18.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4db218: {[rn2_18.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8f4db598: {[rn2_18.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4dbad8: {[rn2_18.p Value[16 x 16 x 32 x *1]] }
0x7f6e8f4dbc98: {[rn2_18.y Value[16 x 16 x 32 x *1]] }
0x7f6e8f4dbe58: {[rn3_1.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dc1d8: {[rn3_1.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dc718: {[rn3_1.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dc8d8: {[rn3_1.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dcc58: {[rn3_1.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dd198: {[rn3_1.c_proj.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dd518: {[rn3_1.c_proj.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dda58: {[rn3_1.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ddc18: {[rn3_1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dddd8: {[rn3_2.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4de158: {[rn3_2.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4de698: {[rn3_2.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4de858: {[rn3_2.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4debd8: {[rn3_2.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4df118: {[rn3_2.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4df2d8: {[rn3_2.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4df498: {[rn3_3.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4df818: {[rn3_3.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dfd58: {[rn3_3.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4dff18: {[rn3_3.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e0298: {[rn3_3.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e07d8: {[rn3_3.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e0998: {[rn3_3.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e0b58: {[rn3_4.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e0ed8: {[rn3_4.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e1418: {[rn3_4.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e15d8: {[rn3_4.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e1958: {[rn3_4.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e1e98: {[rn3_4.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e2058: {[rn3_4.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e2218: {[rn3_5.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e2598: {[rn3_5.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e2ad8: {[rn3_5.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e2c98: {[rn3_5.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e3018: {[rn3_5.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e3558: {[rn3_5.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e3718: {[rn3_5.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e38d8: {[rn3_6.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e3c58: {[rn3_6.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e4198: {[rn3_6.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e4358: {[rn3_6.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e46d8: {[rn3_6.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e4c18: {[rn3_6.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e4dd8: {[rn3_6.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e4f98: {[rn3_7.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e5318: {[rn3_7.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e5858: {[rn3_7.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e5a18: {[rn3_7.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e5d98: {[rn3_7.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e62d8: {[rn3_7.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e6498: {[rn3_7.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e6658: {[rn3_8.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e69d8: {[rn3_8.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e6f18: {[rn3_8.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e70d8: {[rn3_8.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e7458: {[rn3_8.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e7998: {[rn3_8.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e7b58: {[rn3_8.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e7d18: {[rn3_9.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e8098: {[rn3_9.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e85d8: {[rn3_9.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e8798: {[rn3_9.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e8b18: {[rn3_9.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e9058: {[rn3_9.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e9218: {[rn3_9.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e93d8: {[rn3_10.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e9758: {[rn3_10.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e9c98: {[rn3_10.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4e9e58: {[rn3_10.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ea1d8: {[rn3_10.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ea718: {[rn3_10.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ea8d8: {[rn3_10.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eaa98: {[rn3_11.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eae18: {[rn3_11.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eb358: {[rn3_11.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eb518: {[rn3_11.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eb898: {[rn3_11.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ebdd8: {[rn3_11.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ebf98: {[rn3_11.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ec158: {[rn3_12.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ec4d8: {[rn3_12.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eca18: {[rn3_12.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ecbd8: {[rn3_12.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ecf58: {[rn3_12.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ed498: {[rn3_12.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ed658: {[rn3_12.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ed818: {[rn3_13.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4edb98: {[rn3_13.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ee0d8: {[rn3_13.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ee298: {[rn3_13.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ee618: {[rn3_13.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eeb58: {[rn3_13.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eed18: {[rn3_13.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4eeed8: {[rn3_14.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ef258: {[rn3_14.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ef798: {[rn3_14.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4ef958: {[rn3_14.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4efcd8: {[rn3_14.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f0218: {[rn3_14.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f03d8: {[rn3_14.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f0598: {[rn3_15.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f0918: {[rn3_15.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f0e58: {[rn3_15.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f1018: {[rn3_15.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f1398: {[rn3_15.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f18d8: {[rn3_15.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f1a98: {[rn3_15.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f1c58: {[rn3_16.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f1fd8: {[rn3_16.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f2518: {[rn3_16.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f26d8: {[rn3_16.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f2a58: {[rn3_16.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f2f98: {[rn3_16.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f3158: {[rn3_16.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f3318: {[rn3_17.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f3698: {[rn3_17.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f3bd8: {[rn3_17.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f3d98: {[rn3_17.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f4118: {[rn3_17.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f4658: {[rn3_17.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f4818: {[rn3_17.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f49d8: {[rn3_18.c1.c.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f4d58: {[rn3_18.c1.c.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f5298: {[rn3_18.c1.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f5458: {[rn3_18.c2.c.c Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f57d8: {[rn3_18.c2.c.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f5d18: {[rn3_18.p Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f5ed8: {[rn3_18.y Value[8 x 8 x 64 x *1]] }
0x7f6e8f4f6098: {[pool Value[1 x 1 x 64 x *1]] }
0x7f6e8f4f6258: {[OutputNodes.t Value[10 x *1]] }
0x7f6e8f4f6418: {[OutputNodes.z Value[10 x *1]] }
0x7f6e8f6c5cd8: {[CE Value[1]] }
0x7f6e8f6fff48: {[Err Value[1]] }
0x7f6e8fe2c0c8: {[rn2_6.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2c288: {[rn2_6.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2c608: {[rn2_6.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2cb48: {[rn2_6.p Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2cd08: {[rn2_6.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2cec8: {[rn2_7.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2d248: {[rn2_7.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2d788: {[rn2_7.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2d948: {[rn2_7.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2dcc8: {[rn2_7.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2e208: {[rn2_7.p Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2e3c8: {[rn2_7.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2e588: {[rn2_8.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2e908: {[rn2_8.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2ee48: {[rn2_8.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e8fe2f008: {[rn2_8.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90612718: {[rn1_7.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e906128d8: {[rn1_7.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90612c58: {[rn1_7.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90613198: {[rn1_7.p Value[32 x 32 x 16 x *1]] }
0x7f6e90613358: {[rn1_7.y Value[32 x 32 x 16 x *1]] }
0x7f6e90613518: {[rn1_8.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90613898: {[rn1_8.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90613dd8: {[rn1_8.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90613f98: {[rn1_8.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90614318: {[rn1_8.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e906400d8: {[rn1_5.p Value[32 x 32 x 16 x *1]] }
0x7f6e90640298: {[rn1_5.y Value[32 x 32 x 16 x *1]] }
0x7f6e90640458: {[rn1_6.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e906407d8: {[rn1_6.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90640d18: {[rn1_6.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90640ed8: {[rn1_6.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90641258: {[rn1_6.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90641798: {[rn1_6.p Value[32 x 32 x 16 x *1]] }
0x7f6e90641958: {[rn1_6.y Value[32 x 32 x 16 x *1]] }
0x7f6e90641b18: {[rn1_7.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90641e98: {[rn1_7.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9066d798: {[rn1_4.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9066dcd8: {[rn1_4.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e9066de98: {[rn1_4.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9066e218: {[rn1_4.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9066e758: {[rn1_4.p Value[32 x 32 x 16 x *1]] }
0x7f6e9066e918: {[rn1_4.y Value[32 x 32 x 16 x *1]] }
0x7f6e9066ead8: {[rn1_5.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9066ee58: {[rn1_5.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9066f398: {[rn1_5.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e9066f558: {[rn1_5.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9066f8d8: {[rn1_5.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9069b0b8: {[rn1_1.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9069b438: {[rn1_1.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9069b978: {[rn1_1.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e9069bb38: {[rn1_1.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9069beb8: {[rn1_1.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9069c3f8: {[rn1_1.p Value[32 x 32 x 16 x *1]] }
0x7f6e9069c5b8: {[rn1_1.y Value[32 x 32 x 16 x *1]] }
0x7f6e9069c778: {[rn1_2.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9069caf8: {[rn1_2.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9069d038: {[rn1_2.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e9069d1f8: {[rn1_2.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e906c8a78: {[rn1_2.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e906c8fb8: {[rn1_2.p Value[32 x 32 x 16 x *1]] }
0x7f6e906c9178: {[rn1_2.y Value[32 x 32 x 16 x *1]] }
0x7f6e906c9338: {[rn1_3.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e906c96b8: {[rn1_3.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e906c9bf8: {[rn1_3.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e906c9db8: {[rn1_3.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e906ca138: {[rn1_3.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e906ca678: {[rn1_3.p Value[32 x 32 x 16 x *1]] }
0x7f6e906ca838: {[rn1_3.y Value[32 x 32 x 16 x *1]] }
0x7f6e906ca9f8: {[rn1_4.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9092b608: {[rn1_13.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9092bb48: {[rn1_13.p Value[32 x 32 x 16 x *1]] }
0x7f6e9092bd08: {[rn1_13.y Value[32 x 32 x 16 x *1]] }
0x7f6e9092bec8: {[rn1_14.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9092c248: {[rn1_14.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9092c788: {[rn1_14.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e9092c948: {[rn1_14.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e9092ccc8: {[rn1_14.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e9092d208: {[rn1_14.p Value[32 x 32 x 16 x *1]] }
0x7f6e9092d3c8: {[rn1_14.y Value[32 x 32 x 16 x *1]] }
0x7f6e9092d588: {[rn1_15.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90981f38: {[rn1_12.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90982258: {[rn1_12.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90982798: {[rn1_12.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90982958: {[rn1_12.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90982cd8: {[rn1_12.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90983218: {[rn1_12.p Value[32 x 32 x 16 x *1]] }
0x7f6e909833d8: {[rn1_12.y Value[32 x 32 x 16 x *1]] }
0x7f6e90983598: {[rn1_13.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90983918: {[rn1_13.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90983e58: {[rn1_13.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90984018: {[rn1_13.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e909af918: {[rn1_10.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e909afc98: {[rn1_10.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e909b01d8: {[rn1_10.p Value[32 x 32 x 16 x *1]] }
0x7f6e909b0398: {[rn1_10.y Value[32 x 32 x 16 x *1]] }
0x7f6e909b0558: {[rn1_11.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e909b08d8: {[rn1_11.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e909b0e18: {[rn1_11.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e909b0fd8: {[rn1_11.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e909b1358: {[rn1_11.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e909b1898: {[rn1_11.p Value[32 x 32 x 16 x *1]] }
0x7f6e909b1a58: {[rn1_11.y Value[32 x 32 x 16 x *1]] }
0x7f6e909dd178: {[rn1_8.p Value[32 x 32 x 16 x *1]] }
0x7f6e909dd2d8: {[rn1_8.y Value[32 x 32 x 16 x *1]] }
0x7f6e909dd498: {[rn1_9.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e909dd818: {[rn1_9.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e909ddd58: {[rn1_9.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e909ddf18: {[rn1_9.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e909de298: {[rn1_9.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e909de7d8: {[rn1_9.p Value[32 x 32 x 16 x *1]] }
0x7f6e909de998: {[rn1_9.y Value[32 x 32 x 16 x *1]] }
0x7f6e909deb58: {[rn1_10.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e909deed8: {[rn1_10.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e909df418: {[rn1_10.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b125f8: {[rn2_3.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b12b38: {[rn2_3.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b12cf8: {[rn2_3.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b13078: {[rn2_3.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b135b8: {[rn2_3.p Value[16 x 16 x 32 x *1]] }
0x7f6e90b13778: {[rn2_3.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b13938: {[rn2_4.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b13cb8: {[rn2_4.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b141f8: {[rn2_4.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b143b8: {[rn2_4.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b14738: {[rn2_4.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b40038: {[rn2_1.c_proj.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b40578: {[rn2_1.p Value[16 x 16 x 32 x *1]] }
0x7f6e90b40738: {[rn2_1.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b408f8: {[rn2_2.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b40c78: {[rn2_2.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b411b8: {[rn2_2.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b41378: {[rn2_2.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b416f8: {[rn2_2.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b41c38: {[rn2_2.p Value[16 x 16 x 32 x *1]] }
0x7f6e90b41df8: {[rn2_2.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b41fb8: {[rn2_3.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b6d838: {[rn1_18.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b6d9f8: {[rn1_18.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90b6dd78: {[rn1_18.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b6e2b8: {[rn1_18.p Value[32 x 32 x 16 x *1]] }
0x7f6e90b6e478: {[rn1_18.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b6e638: {[rn2_1.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b6e9b8: {[rn2_1.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b6eef8: {[rn2_1.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b6f0b8: {[rn2_1.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b6f438: {[rn2_1.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90b6f978: {[rn2_1.c_proj.c Value[16 x 16 x 32 x *1]] }
0x7f6e90b9b278: {[rn1_16.p Value[32 x 32 x 16 x *1]] }
0x7f6e90b9b438: {[rn1_16.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b9b5f8: {[rn1_17.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90b9b978: {[rn1_17.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b9beb8: {[rn1_17.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b9c078: {[rn1_17.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90b9c3f8: {[rn1_17.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b9c938: {[rn1_17.p Value[32 x 32 x 16 x *1]] }
0x7f6e90b9caf8: {[rn1_17.y Value[32 x 32 x 16 x *1]] }
0x7f6e90b9ccb8: {[rn1_18.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90b9d038: {[rn1_18.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90bc8918: {[rn1_15.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90bc8df8: {[rn1_15.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90bc8fb8: {[rn1_15.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90bc9338: {[rn1_15.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90bc9878: {[rn1_15.p Value[32 x 32 x 16 x *1]] }
0x7f6e90bc9a38: {[rn1_15.y Value[32 x 32 x 16 x *1]] }
0x7f6e90bc9bf8: {[rn1_16.c1.c.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90bc9f78: {[rn1_16.c1.c.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90bca4b8: {[rn1_16.c1.y Value[32 x 32 x 16 x *1]] }
0x7f6e90bca678: {[rn1_16.c2.c.c Value[32 x 32 x 16 x *1]] }
0x7f6e90bca9f8: {[rn1_16.c2.c.y Value[32 x 32 x 16 x *1]] }
0x7f6e90dc42a8: {[rn2_4.p Value[16 x 16 x 32 x *1]] }
0x7f6e90dc4468: {[rn2_4.y Value[16 x 16 x 32 x *1]] }
0x7f6e90dc4628: {[rn2_5.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90dc49a8: {[rn2_5.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90dc4ee8: {[rn2_5.c1.y Value[16 x 16 x 32 x *1]] }
0x7f6e90dc50a8: {[rn2_5.c2.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90dc5428: {[rn2_5.c2.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e90dc5968: {[rn2_5.p Value[16 x 16 x 32 x *1]] }
0x7f6e90dc5b28: {[rn2_5.y Value[16 x 16 x 32 x *1]] }
0x7f6e90dc5ce8: {[rn2_6.c1.c.c.c Value[16 x 16 x 32 x *1]] }
0x7f6e90dc6068: {[rn2_6.c1.c.c.y Value[16 x 16 x 32 x *1]] }
0x7f6e91b90e78: {[conv1.c.c.m Value[16 x 1]] }
0x7f6ea6100fe8: {[rn2_2.c1.c.c.m Value[32 x 1]] }
0x7f6ea61019d8: {[rn2_2.c1.c.c.sc Value[32 x 1]] }
0x7f6ea6102fb8: {[rn2_2.c2.c.b Value[32 x 1]] }
0x7f6ea61041c8: {[rn2_2.c2.c.isd Value[32 x 1]] }
0x7f6ea6104388: {[rn2_2.c2.c.m Value[32 x 1]] }
0x7f6ea6105588: {[rn2_2.c2.c.sc Value[32 x 1]] }
0x7f6ea6106328: {[rn2_2.c2.W Value[32 x 288]] }
0x7f6ea6107198: {[rn2_3.c1.c.c.b Value[32 x 1]] }
0x7f6ea61083e8: {[rn2_3.c1.c.c.isd Value[32 x 1]] }
0x7f6ea61085a8: {[rn2_3.c1.c.c.m Value[32 x 1]] }
0x7f6ea61097a8: {[rn2_3.c1.c.c.sc Value[32 x 1]] }
0x7f6ea610a548: {[rn2_3.c1.c.W Value[32 x 288]] }
0x7f6ea610b098: {[rn2_3.c2.c.b Value[32 x 1]] }
0x7f6ea610b258: {[rn2_3.c2.c.isd Value[32 x 1]] }
0x7f6ea610b838: {[rn2_3.c2.W Value[32 x 288]] }
0x7f6ea610d038: {[rn2_3.c2.c.m Value[32 x 1]] }
0x7f6ea610da28: {[rn2_3.c2.c.sc Value[32 x 1]] }
0x7f6ea610f2b8: {[rn2_4.c1.c.c.b Value[32 x 1]] }
0x7f6ea6110508: {[rn2_4.c1.c.c.isd Value[32 x 1]] }
0x7f6ea61106c8: {[rn2_4.c1.c.c.m Value[32 x 1]] }
0x7f6ea61118c8: {[rn2_4.c1.c.c.sc Value[32 x 1]] }
0x7f6ea6112668: {[rn2_4.c1.c.W Value[32 x 288]] }
0x7f6ea61131b8: {[rn2_4.c2.c.b Value[32 x 1]] }
0x7f6ea61143c8: {[rn2_4.c2.c.isd Value[32 x 1]] }
0x7f6ea6114dd8: {[rn2_4.c2.c.m Value[32 x 1]] }
0x7f6ea61157e8: {[rn2_4.c2.c.sc Value[32 x 1]] }
0x7f6ea6116588: {[rn2_4.c2.W Value[32 x 288]] }
0x7f6ea61173f8: {[rn2_5.c1.c.c.b Value[32 x 1]] }
0x7f6ea61186a8: {[rn2_5.c1.c.W Value[32 x 288]] }
0x7f6ea61189c8: {[rn2_5.c1.c.c.isd Value[32 x 1]] }
0x7f6ea6119378: {[rn2_5.c1.c.c.m Value[32 x 1]] }
0x7f6ea6119d68: {[rn2_5.c1.c.c.sc Value[32 x 1]] }
0x7f6ea611b348: {[rn2_5.c2.c.b Value[32 x 1]] }
0x7f6ea611c558: {[rn2_5.c2.c.isd Value[32 x 1]] }
0x7f6ea611c718: {[rn2_5.c2.c.m Value[32 x 1]] }
0x7f6ea611d918: {[rn2_5.c2.c.sc Value[32 x 1]] }
0x7f6ea611e6b8: {[rn2_5.c2.W Value[32 x 288]] }
0x7f6ea611f2e8: {[rn2_6.c1.c.c.b Value[32 x 1]] }
0x7f6ea6120538: {[rn2_6.c1.c.c.isd Value[32 x 1]] }
0x7f6ea61206f8: {[rn2_6.c1.c.c.m Value[32 x 1]] }
0x7f6ea61218f8: {[rn2_6.c1.c.c.sc Value[32 x 1]] }
0x7f6ea6122698: {[rn2_6.c1.c.W Value[32 x 288]] }
0x7f6ea6123398: {[rn2_6.c2.c.b Value[32 x 1]] }
0x7f6ea6123b38: {[rn2_6.c2.W Value[32 x 288]] }
0x7f6ea6123be8: {[rn2_6.c2.c.isd Value[32 x 1]] }
0x7f6ea6125328: {[rn2_6.c2.c.m Value[32 x 1]] }
0x7f6ea6125d18: {[rn2_6.c2.c.sc Value[32 x 1]] }
0x7f6ea61275a8: {[rn2_7.c1.c.c.b Value[32 x 1]] }
0x7f6ea61287f8: {[rn2_7.c1.c.c.isd Value[32 x 1]] }
0x7f6ea61289b8: {[rn2_7.c1.c.c.m Value[32 x 1]] }
0x7f6ea6129bb8: {[rn2_7.c1.c.c.sc Value[32 x 1]] }
0x7f6ea612a958: {[rn2_7.c1.c.W Value[32 x 288]] }
0x7f6ea612b4a8: {[rn2_7.c2.c.b Value[32 x 1]] }
0x7f6ea612c6b8: {[rn2_7.c2.c.isd Value[32 x 1]] }
0x7f6ea612d0c8: {[rn2_7.c2.c.m Value[32 x 1]] }
0x7f6ea612dad8: {[rn2_7.c2.c.sc Value[32 x 1]] }
0x7f6ea612e878: {[rn2_7.c2.W Value[32 x 288]] }
0x7f6ea612f6e8: {[rn2_8.c1.c.c.b Value[32 x 1]] }
0x7f6ea6130998: {[rn2_8.c1.c.W Value[32 x 288]] }
0x7f6ea6130cb8: {[rn2_8.c1.c.c.isd Value[32 x 1]] }
0x7f6ea6131668: {[rn2_8.c1.c.c.m Value[32 x 1]] }
0x7f6ea6132058: {[rn2_8.c1.c.c.sc Value[32 x 1]] }
0x7f6ea6133638: {[rn2_8.c2.c.b Value[32 x 1]] }
0x7f6ea6134848: {[rn2_8.c2.c.isd Value[32 x 1]] }
0x7f6ea6134a08: {[rn2_8.c2.c.m Value[32 x 1]] }
0x7f6ea6135c08: {[rn2_8.c2.c.sc Value[32 x 1]] }
0x7f6ea61369a8: {[rn2_8.c2.W Value[32 x 288]] }
0x7f6ea6137818: {[rn2_9.c1.c.c.b Value[32 x 1]] }
0x7f6ea6138a68: {[rn2_9.c1.c.c.isd Value[32 x 1]] }
0x7f6ea6138c28: {[rn2_9.c1.c.c.m Value[32 x 1]] }
0x7f6ea6139e28: {[rn2_9.c1.c.c.sc Value[32 x 1]] }
0x7f6ea613abc8: {[rn2_9.c1.c.W Value[32 x 288]] }
0x7f6ea613b718: {[rn2_9.c2.c.b Value[32 x 1]] }
0x7f6ea613b8d8: {[rn2_9.c2.c.isd Value[32 x 1]] }
0x7f6ea613beb8: {[rn2_9.c2.W Value[32 x 288]] }
0x7f6ea613d6b8: {[rn2_9.c2.c.m Value[32 x 1]] }
0x7f6ea613e0a8: {[rn2_9.c2.c.sc Value[32 x 1]] }
0x7f6ea613f938: {[rn3_1.c1.c.c.b Value[64 x 1]] }
0x7f6ea6140b58: {[rn3_1.c1.c.c.isd Value[64 x 1]] }
0x7f6ea6140d58: {[rn3_1.c1.c.c.m Value[64 x 1]] }
0x7f6ea6141ff8: {[rn3_1.c1.c.c.sc Value[64 x 1]] }
0x7f6ea6142208: {[rn3_1.c1.c.W Value[64 x 288]] }
0x7f6ea6143968: {[rn3_1.c2.c.b Value[64 x 1]] }
0x7f6ea6143bd8: {[rn3_1.c2.c.isd Value[64 x 1]] }
0x7f6ea61455e8: {[rn3_1.c2.c.m Value[64 x 1]] }
0x7f6ea6145fd8: {[rn3_1.c2.c.sc Value[64 x 1]] }
0x7f6ea61461a8: {[rn3_1.c2.W Value[64 x 576]] }
0x7f6ea6147538: {[rn3_1.c_proj.b Value[64 x 1]] }
0x7f6ea6147768: {[rn3_1.c_proj.isd Value[64 x 1]] }
0x7f6ea6148a78: {[rn3_1.c_proj.m Value[64 x 1]] }
0x7f6ea6149468: {[rn3_1.c_proj.sc Value[64 x 1]] }
0x7f6ea614af88: {[rn3_10.c1.c.c.b Value[64 x 1]] }
0x7f6ea614b198: {[rn3_10.c1.c.c.isd Value[64 x 1]] }
0x7f6ea614c418: {[rn3_10.c1.c.c.m Value[64 x 1]] }
0x7f6ea614ce08: {[rn3_10.c1.c.c.sc Value[64 x 1]] }
0x7f6ea614d7f8: {[rn3_10.c1.c.W Value[64 x 576]] }
0x7f6ea614ee58: {[rn3_10.c2.c.b Value[64 x 1]] }
0x7f6ea61500e8: {[rn3_10.c2.c.isd Value[64 x 1]] }
0x7f6ea61502f8: {[rn3_10.c2.c.m Value[64 x 1]] }
0x7f6ea6150ce8: {[rn3_10.c2.c.sc Value[64 x 1]] }
0x7f6ea61516d8: {[rn3_10.c2.W Value[64 x 576]] }
0x7f6ea6153058: {[rn3_11.c1.c.c.b Value[64 x 1]] }
0x7f6ea6153268: {[rn3_11.c1.c.c.isd Value[64 x 1]] }
0x7f6ea61544e8: {[rn3_11.c1.c.c.m Value[64 x 1]] }
0x7f6ea6154ed8: {[rn3_11.c1.c.c.sc Value[64 x 1]] }
0x7f6ea61558c8: {[rn3_11.c1.c.W Value[64 x 576]] }
0x7f6ea6156f28: {[rn3_11.c2.c.b Value[64 x 1]] }
0x7f6ea61581b8: {[rn3_11.c2.c.isd Value[64 x 1]] }
0x7f6ea61583c8: {[rn3_11.c2.c.m Value[64 x 1]] }
0x7f6ea6158db8: {[rn3_11.c2.c.sc Value[64 x 1]] }
0x7f6ea61597a8: {[rn3_11.c2.W Value[64 x 576]] }
0x7f6ea615b738: {[rn3_12.c1.c.c.b Value[64 x 1]] }
0x7f6ea615b948: {[rn3_12.c1.c.c.isd Value[64 x 1]] }
0x7f6ea615cbc8: {[rn3_12.c1.c.c.m Value[64 x 1]] }
0x7f6ea615d5b8: {[rn3_12.c1.c.c.sc Value[64 x 1]] }
0x7f6ea615dfa8: {[rn3_12.c1.c.W Value[64 x 576]] }
0x7f6ea615f608: {[rn3_12.c2.c.b Value[64 x 1]] }
0x7f6ea6160898: {[rn3_12.c2.c.isd Value[64 x 1]] }
0x7f6ea6160aa8: {[rn3_12.c2.c.m Value[64 x 1]] }
0x7f6ea6161498: {[rn3_12.c2.c.sc Value[64 x 1]] }
0x7f6ea61629f8: {[rn3_12.c2.W Value[64 x 576]] }
0x7f6ea6163808: {[rn3_13.c1.c.c.b Value[64 x 1]] }
0x7f6ea6163a18: {[rn3_13.c1.c.c.isd Value[64 x 1]] }
0x7f6ea6164c98: {[rn3_13.c1.c.c.m Value[64 x 1]] }
0x7f6ea6165688: {[rn3_13.c1.c.c.sc Value[64 x 1]] }
0x7f6ea6166078: {[rn3_13.c1.c.W Value[64 x 576]] }
0x7f6ea61676d8: {[rn3_13.c2.c.b Value[64 x 1]] }
0x7f6ea6168968: {[rn3_13.c2.c.isd Value[64 x 1]] }
0x7f6ea6168b78: {[rn3_13.c2.c.m Value[64 x 1]] }
0x7f6ea6169568: {[rn3_13.c2.c.sc Value[64 x 1]] }
0x7f6ea616aac8: {[rn3_13.c2.W Value[64 x 576]] }
0x7f6ea616b8d8: {[rn3_14.c1.c.c.b Value[64 x 1]] }
0x7f6ea616bae8: {[rn3_14.c1.c.c.isd Value[64 x 1]] }
0x7f6ea616cd68: {[rn3_14.c1.c.c.m Value[64 x 1]] }
0x7f6ea616d758: {[rn3_14.c1.c.c.sc Value[64 x 1]] }
0x7f6ea616e148: {[rn3_14.c1.c.W Value[64 x 576]] }
0x7f6ea616f7a8: {[rn3_14.c2.c.b Value[64 x 1]] }
0x7f6ea6170a38: {[rn3_14.c2.c.isd Value[64 x 1]] }
0x7f6ea6170c48: {[rn3_14.c2.c.m Value[64 x 1]] }
0x7f6ea6171638: {[rn3_14.c2.c.sc Value[64 x 1]] }
0x7f6ea6172028: {[rn3_14.c2.W Value[64 x 576]] }
0x7f6ea61739a8: {[rn3_15.c1.c.c.b Value[64 x 1]] }
0x7f6ea6173bb8: {[rn3_15.c1.c.c.isd Value[64 x 1]] }
0x7f6ea6174e38: {[rn3_15.c1.c.c.m Value[64 x 1]] }
0x7f6ea6175828: {[rn3_15.c1.c.c.sc Value[64 x 1]] }
0x7f6ea6176218: {[rn3_15.c1.c.W Value[64 x 576]] }
0x7f6ea6177f48: {[rn3_15.c2.c.b Value[64 x 1]] }
0x7f6ea61791b8: {[rn3_15.c2.c.isd Value[64 x 1]] }
0x7f6ea61793c8: {[rn3_15.c2.c.m Value[64 x 1]] }
0x7f6ea6179db8: {[rn3_15.c2.c.sc Value[64 x 1]] }
0x7f6ea617a7a8: {[rn3_15.c2.W Value[64 x 576]] }
0x7f6ea617c128: {[rn3_16.c1.c.c.b Value[64 x 1]] }
0x7f6ea617c338: {[rn3_16.c1.c.c.isd Value[64 x 1]] }
0x7f6ea617d5b8: {[rn3_16.c1.c.c.m Value[64 x 1]] }
0x7f6ea617dfa8: {[rn3_16.c1.c.c.sc Value[64 x 1]] }
0x7f6ea617e998: {[rn3_16.c1.c.W Value[64 x 576]] }
0x7f6ea617fff8: {[rn3_16.c2.c.b Value[64 x 1]] }
0x7f6ea6181288: {[rn3_16.c2.c.isd Value[64 x 1]] }
0x7f6ea6181498: {[rn3_16.c2.c.m Value[64 x 1]] }
0x7f6ea6182668: {[rn3_16.c2.c.sc Value[64 x 1]] }
0x7f6ea6182878: {[rn3_16.c2.W Value[64 x 576]] }
0x7f6ea61841f8: {[rn3_17.c1.c.c.b Value[64 x 1]] }
0x7f6ea6184408: {[rn3_17.c1.c.c.isd Value[64 x 1]] }
0x7f6ea6185688: {[rn3_17.c1.c.c.m Value[64 x 1]] }
0x7f6ea6186078: {[rn3_17.c1.c.c.sc Value[64 x 1]] }
0x7f6ea6186a68: {[rn3_17.c1.c.W Value[64 x 576]] }
0x7f6ea61880c8: {[rn3_17.c2.c.b Value[64 x 1]] }
0x7f6ea6189358: {[rn3_17.c2.c.isd Value[64 x 1]] }
0x7f6ea6189568: {[rn3_17.c2.c.m Value[64 x 1]] }
0x7f6ea618a738: {[rn3_17.c2.c.sc Value[64 x 1]] }
0x7f6ea618a948: {[rn3_17.c2.W Value[64 x 576]] }
0x7f6ea618c2c8: {[rn3_18.c1.c.c.b Value[64 x 1]] }
0x7f6ea618c4d8: {[rn3_18.c1.c.c.isd Value[64 x 1]] }
0x7f6ea618d758: {[rn3_18.c1.c.c.m Value[64 x 1]] }
0x7f6ea618e148: {[rn3_18.c1.c.c.sc Value[64 x 1]] }
0x7f6ea618eb38: {[rn3_18.c1.c.W Value[64 x 576]] }
0x7f6ea6190198: {[rn3_18.c2.c.b Value[64 x 1]] }
0x7f6ea6191428: {[rn3_18.c2.c.isd Value[64 x 1]] }
0x7f6ea6191638: {[rn3_18.c2.c.m Value[64 x 1]] }
0x7f6ea6192028: {[rn3_18.c2.c.sc Value[64 x 1]] }
0x7f6ea6192a18: {[rn3_18.c2.W Value[64 x 576]] }
0x7f6ea6194a38: {[rn3_1_Wproj Value[64 x 32]] }
0x7f6ea6194eb8: {[rn3_2.c1.c.c.b Value[64 x 1]] }
0x7f6ea61950e8: {[rn3_2.c1.c.c.isd Value[64 x 1]] }
0x7f6ea6196af8: {[rn3_2.c1.c.c.m Value[64 x 1]] }
0x7f6ea61978d8: {[rn3_2.c1.c.c.sc Value[64 x 1]] }
0x7f6ea6197aa8: {[rn3_2.c1.c.W Value[64 x 576]] }
0x7f6ea6199108: {[rn3_2.c2.c.b Value[64 x 1]] }
0x7f6ea619a398: {[rn3_2.c2.c.isd Value[64 x 1]] }
0x7f6ea619a5a8: {[rn3_2.c2.c.m Value[64 x 1]] }
0x7f6ea619af98: {[rn3_2.c2.c.sc Value[64 x 1]] }
0x7f6ea619b988: {[rn3_2.c2.W Value[64 x 576]] }
0x7f6ea619d308: {[rn3_3.c1.c.c.b Value[64 x 1]] }
0x7f6ea619e578: {[rn3_3.c1.c.c.isd Value[64 x 1]] }
0x7f6ea619e788: {[rn3_3.c1.c.c.m Value[64 x 1]] }
0x7f6ea619f178: {[rn3_3.c1.c.c.sc Value[64 x 1]] }
0x7f6ea619fb68: {[rn3_3.c1.c.W Value[64 x 576]] }
0x7f6ea61a11c8: {[rn3_3.c2.c.b Value[64 x 1]] }
0x7f6ea61a2458: {[rn3_3.c2.c.isd Value[64 x 1]] }
0x7f6ea61a2668: {[rn3_3.c2.c.m Value[64 x 1]] }
0x7f6ea61a3058: {[rn3_3.c2.c.sc Value[64 x 1]] }
0x7f6ea61a3a48: {[rn3_3.c2.W Value[64 x 576]] }
0x7f6ea61a53c8: {[rn3_4.c1.c.c.b Value[64 x 1]] }
0x7f6ea61a6638: {[rn3_4.c1.c.c.isd Value[64 x 1]] }
0x7f6ea61a6848: {[rn3_4.c1.c.c.m Value[64 x 1]] }
0x7f6ea61a7238: {[rn3_4.c1.c.c.sc Value[64 x 1]] }
0x7f6ea61a7c28: {[rn3_4.c1.c.W Value[64 x 576]] }
0x7f6ea61a9288: {[rn3_4.c2.c.b Value[64 x 1]] }
0x7f6ea61aa518: {[rn3_4.c2.c.isd Value[64 x 1]] }
0x7f6ea61aa728: {[rn3_4.c2.c.m Value[64 x 1]] }
0x7f6ea61ab118: {[rn3_4.c2.c.sc Value[64 x 1]] }
0x7f6ea61abb08: {[rn3_4.c2.W Value[64 x 576]] }
0x7f6ea61ad488: {[rn3_5.c1.c.c.b Value[64 x 1]] }
0x7f6ea61ae6f8: {[rn3_5.c1.c.c.isd Value[64 x 1]] }
0x7f6ea61ae908: {[rn3_5.c1.c.c.m Value[64 x 1]] }
0x7f6ea61af2f8: {[rn3_5.c1.c.c.sc Value[64 x 1]] }
0x7f6ea61afce8: {[rn3_5.c1.c.W Value[64 x 576]] }
0x7f6ea61b19e8: {[rn3_5.c2.c.b Value[64 x 1]] }
0x7f6ea61b2c78: {[rn3_5.c2.c.isd Value[64 x 1]] }
0x7f6ea61b3668: {[rn3_5.c2.c.m Value[64 x 1]] }
0x7f6ea61b3878: {[rn3_5.c2.c.sc Value[64 x 1]] }
0x7f6ea61b4268: {[rn3_5.c2.W Value[64 x 576]] }
0x7f6ea61b5bf8: {[rn3_6.c1.c.c.b Value[64 x 1]] }
0x7f6ea61b6e68: {[rn3_6.c1.c.c.isd Value[64 x 1]] }
0x7f6ea61b7078: {[rn3_6.c1.c.c.m Value[64 x 1]] }
0x7f6ea61b7a68: {[rn3_6.c1.c.c.sc Value[64 x 1]] }
0x7f6ea61b8458: {[rn3_6.c1.c.W Value[64 x 576]] }
0x7f6ea61b9ab8: {[rn3_6.c2.c.b Value[64 x 1]] }
0x7f6ea61bad48: {[rn3_6.c2.c.isd Value[64 x 1]] }
0x7f6ea61bb738: {[rn3_6.c2.c.m Value[64 x 1]] }
0x7f6ea61bb948: {[rn3_6.c2.c.sc Value[64 x 1]] }
0x7f6ea61bc338: {[rn3_6.c2.W Value[64 x 576]] }
0x7f6ea61bdcb8: {[rn3_7.c1.c.c.b Value[64 x 1]] }
0x7f6ea61beee8: {[rn3_7.c1.c.c.isd Value[64 x 1]] }
0x7f6ea61bf138: {[rn3_7.c1.c.c.m Value[64 x 1]] }
0x7f6ea61bfb28: {[rn3_7.c1.c.c.sc Value[64 x 1]] }
0x7f6ea61c0518: {[rn3_7.c1.c.W Value[64 x 576]] }
0x7f6ea61c1b78: {[rn3_7.c2.c.b Value[64 x 1]] }
0x7f6ea61c2e08: {[rn3_7.c2.c.isd Value[64 x 1]] }
0x7f6ea61c3018: {[rn3_7.c2.c.m Value[64 x 1]] }
0x7f6ea61c3a08: {[rn3_7.c2.c.sc Value[64 x 1]] }
0x7f6ea61c43f8: {[rn3_7.c2.W Value[64 x 576]] }
0x7f6ea61c5d78: {[rn3_8.c1.c.c.b Value[64 x 1]] }
0x7f6ea61c5f48: {[rn3_8.c1.c.c.isd Value[64 x 1]] }
0x7f6ea61c71b8: {[rn3_8.c1.c.c.m Value[64 x 1]] }
0x7f6ea61c7ba8: {[rn3_8.c1.c.c.sc Value[64 x 1]] }
0x7f6ea61c8598: {[rn3_8.c1.c.W Value[64 x 576]] }
0x7f6ea61c9bf8: {[rn3_8.c2.c.b Value[64 x 1]] }
0x7f6ea61cae48: {[rn3_8.c2.c.isd Value[64 x 1]] }
0x7f6ea61cb8b8: {[rn3_8.c2.c.m Value[64 x 1]] }
0x7f6ea61cc2a8: {[rn3_8.c2.c.sc Value[64 x 1]] }
0x7f6ea61cc478: {[rn3_8.c2.W Value[64 x 576]] }
0x7f6ea61ce498: {[rn3_9.c1.c.c.b Value[64 x 1]] }
0x7f6ea61cf708: {[rn3_9.c1.c.c.isd Value[64 x 1]] }
0x7f6ea61cf918: {[rn3_9.c1.c.c.m Value[64 x 1]] }
0x7f6ea61d0308: {[rn3_9.c1.c.c.sc Value[64 x 1]] }
0x7f6ea61d0cf8: {[rn3_9.c1.c.W Value[64 x 576]] }
0x7f6ea61d2358: {[rn3_9.c2.c.b Value[64 x 1]] }
0x7f6ea61d35e8: {[rn3_9.c2.c.isd Value[64 x 1]] }
0x7f6ea61d37f8: {[rn3_9.c2.c.m Value[64 x 1]] }
0x7f6ea61d41e8: {[rn3_9.c2.c.sc Value[64 x 1]] }
0x7f6ea61d4bd8: {[rn3_9.c2.W Value[64 x 576]] }
0x7f6ea8615578: {[labels Value[10 x *1]] }
0x7f6ea8615f68: {[OutputNodes.b Value[10]] }
0x7f6ea8616c78: {[OutputNodes.W Value[10 x 1 x 1 x 64]] }
0x7f6ea8617748: {[rn1_1.c1.c.c.b Value[16 x 1]] }
0x7f6ea8618e98: {[rn1_1.c1.c.c.isd Value[16 x 1]] }
0x7f6ea86198f8: {[rn1_1.c1.c.c.m Value[16 x 1]] }
0x7f6ea861a318: {[rn1_1.c1.c.c.sc Value[16 x 1]] }
0x7f6ea861b0c8: {[rn1_1.c1.c.W Value[16 x 144]] }
0x7f6ea861b888: {[rn1_1.c2.c.b Value[16 x 1]] }
0x7f6ea861ca98: {[rn1_1.c2.c.isd Value[16 x 1]] }
0x7f6ea861d4a8: {[rn1_1.c2.c.m Value[16 x 1]] }
0x7f6ea861e248: {[rn1_1.c2.c.sc Value[16 x 1]] }
0x7f6ea861efc8: {[rn1_1.c2.W Value[16 x 144]] }
0x7f6ea861fa48: {[rn1_10.c1.c.c.b Value[16 x 1]] }
0x7f6ea861fbe8: {[rn1_10.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8620db8: {[rn1_10.c1.c.c.m Value[16 x 1]] }
0x7f6ea8621b68: {[rn1_10.c1.c.c.sc Value[16 x 1]] }
0x7f6ea86224c8: {[rn1_10.c1.c.W Value[16 x 144]] }
0x7f6ea8623888: {[rn1_10.c2.c.b Value[16 x 1]] }
0x7f6ea8624ac8: {[rn1_10.c2.c.isd Value[16 x 1]] }
0x7f6ea86254d8: {[rn1_10.c2.c.m Value[16 x 1]] }
0x7f6ea8626278: {[rn1_10.c2.c.sc Value[16 x 1]] }
0x7f6ea8626ff8: {[rn1_10.c2.W Value[16 x 144]] }
0x7f6ea8627a78: {[rn1_11.c1.c.c.b Value[16 x 1]] }
0x7f6ea8627c18: {[rn1_11.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8628de8: {[rn1_11.c1.c.c.m Value[16 x 1]] }
0x7f6ea8629b98: {[rn1_11.c1.c.c.sc Value[16 x 1]] }
0x7f6ea862a588: {[rn1_11.c1.c.W Value[16 x 144]] }
0x7f6ea862b948: {[rn1_11.c2.c.b Value[16 x 1]] }
0x7f6ea862cb88: {[rn1_11.c2.c.isd Value[16 x 1]] }
0x7f6ea862d598: {[rn1_11.c2.c.m Value[16 x 1]] }
0x7f6ea862e338: {[rn1_11.c2.c.sc Value[16 x 1]] }
0x7f6ea862f0b8: {[rn1_11.c2.W Value[16 x 144]] }
0x7f6ea862fb38: {[rn1_12.c1.c.c.b Value[16 x 1]] }
0x7f6ea862fcd8: {[rn1_12.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8630ea8: {[rn1_12.c1.c.c.m Value[16 x 1]] }
0x7f6ea8631c58: {[rn1_12.c1.c.c.sc Value[16 x 1]] }
0x7f6ea8632648: {[rn1_12.c1.c.W Value[16 x 144]] }
0x7f6ea8633a08: {[rn1_12.c2.c.b Value[16 x 1]] }
0x7f6ea8634c48: {[rn1_12.c2.c.isd Value[16 x 1]] }
0x7f6ea8635658: {[rn1_12.c2.c.m Value[16 x 1]] }
0x7f6ea86363f8: {[rn1_12.c2.c.sc Value[16 x 1]] }
0x7f6ea8637178: {[rn1_12.c2.W Value[16 x 144]] }
0x7f6ea8637bf8: {[rn1_13.c1.c.c.b Value[16 x 1]] }
0x7f6ea8637d98: {[rn1_13.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8638f68: {[rn1_13.c1.c.c.m Value[16 x 1]] }
0x7f6ea8639d18: {[rn1_13.c1.c.c.sc Value[16 x 1]] }
0x7f6ea863a708: {[rn1_13.c1.c.W Value[16 x 144]] }
0x7f6ea863bac8: {[rn1_13.c2.c.b Value[16 x 1]] }
0x7f6ea863cd08: {[rn1_13.c2.c.isd Value[16 x 1]] }
0x7f6ea863d718: {[rn1_13.c2.c.m Value[16 x 1]] }
0x7f6ea863e4b8: {[rn1_13.c2.c.sc Value[16 x 1]] }
0x7f6ea863f238: {[rn1_13.c2.W Value[16 x 144]] }
0x7f6ea863fcb8: {[rn1_14.c1.c.c.b Value[16 x 1]] }
0x7f6ea863fe58: {[rn1_14.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8641028: {[rn1_14.c1.c.c.m Value[16 x 1]] }
0x7f6ea8641dd8: {[rn1_14.c1.c.c.sc Value[16 x 1]] }
0x7f6ea86427c8: {[rn1_14.c1.c.W Value[16 x 144]] }
0x7f6ea8643b88: {[rn1_14.c2.c.b Value[16 x 1]] }
0x7f6ea8644dc8: {[rn1_14.c2.c.isd Value[16 x 1]] }
0x7f6ea86457d8: {[rn1_14.c2.c.m Value[16 x 1]] }
0x7f6ea8646578: {[rn1_14.c2.c.sc Value[16 x 1]] }
0x7f6ea86472f8: {[rn1_14.c2.W Value[16 x 144]] }
0x7f6ea8647d78: {[rn1_15.c1.c.c.b Value[16 x 1]] }
0x7f6ea8647f18: {[rn1_15.c1.c.c.isd Value[16 x 1]] }
0x7f6ea86490e8: {[rn1_15.c1.c.c.m Value[16 x 1]] }
0x7f6ea8649e98: {[rn1_15.c1.c.c.sc Value[16 x 1]] }
0x7f6ea864a888: {[rn1_15.c1.c.W Value[16 x 144]] }
0x7f6ea864bc48: {[rn1_15.c2.c.b Value[16 x 1]] }
0x7f6ea864ce88: {[rn1_15.c2.c.isd Value[16 x 1]] }
0x7f6ea864d898: {[rn1_15.c2.c.m Value[16 x 1]] }
0x7f6ea864e638: {[rn1_15.c2.c.sc Value[16 x 1]] }
0x7f6ea864f3b8: {[rn1_15.c2.W Value[16 x 144]] }
0x7f6ea864fe38: {[rn1_16.c1.c.c.b Value[16 x 1]] }
0x7f6ea864ffd8: {[rn1_16.c1.c.c.isd Value[16 x 1]] }
0x7f6ea86511a8: {[rn1_16.c1.c.c.m Value[16 x 1]] }
0x7f6ea8651f58: {[rn1_16.c1.c.c.sc Value[16 x 1]] }
0x7f6ea8652948: {[rn1_16.c1.c.W Value[16 x 144]] }
0x7f6ea8653d08: {[rn1_16.c2.c.b Value[16 x 1]] }
0x7f6ea8654f48: {[rn1_16.c2.c.isd Value[16 x 1]] }
0x7f6ea8655958: {[rn1_16.c2.c.m Value[16 x 1]] }
0x7f6ea86566f8: {[rn1_16.c2.c.sc Value[16 x 1]] }
0x7f6ea8657478: {[rn1_16.c2.W Value[16 x 144]] }
0x7f6ea8657ef8: {[rn1_17.c1.c.c.b Value[16 x 1]] }
0x7f6ea8658098: {[rn1_17.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8659268: {[rn1_17.c1.c.c.m Value[16 x 1]] }
0x7f6ea865a018: {[rn1_17.c1.c.c.sc Value[16 x 1]] }
0x7f6ea865aa08: {[rn1_17.c1.c.W Value[16 x 144]] }
0x7f6ea865bdc8: {[rn1_17.c2.c.b Value[16 x 1]] }
0x7f6ea865d008: {[rn1_17.c2.c.isd Value[16 x 1]] }
0x7f6ea865da18: {[rn1_17.c2.c.m Value[16 x 1]] }
0x7f6ea865e778: {[rn1_17.c2.c.sc Value[16 x 1]] }
0x7f6ea865f538: {[rn1_17.c2.W Value[16 x 144]] }
0x7f6ea865ffb8: {[rn1_18.c1.c.c.b Value[16 x 1]] }
0x7f6ea8660158: {[rn1_18.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8661328: {[rn1_18.c1.c.c.m Value[16 x 1]] }
0x7f6ea86620d8: {[rn1_18.c1.c.c.sc Value[16 x 1]] }
0x7f6ea8662ac8: {[rn1_18.c1.c.W Value[16 x 144]] }
0x7f6ea8663e88: {[rn1_18.c2.c.b Value[16 x 1]] }
0x7f6ea86650c8: {[rn1_18.c2.c.isd Value[16 x 1]] }
0x7f6ea8665ad8: {[rn1_18.c2.c.m Value[16 x 1]] }
0x7f6ea8666878: {[rn1_18.c2.c.sc Value[16 x 1]] }
0x7f6ea86675f8: {[rn1_18.c2.W Value[16 x 144]] }
0x7f6ea8668078: {[rn1_2.c1.c.c.b Value[16 x 1]] }
0x7f6ea8669278: {[rn1_2.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8669a18: {[rn1_2.c1.c.c.m Value[16 x 1]] }
0x7f6ea866a9d8: {[rn1_2.c1.c.c.sc Value[16 x 1]] }
0x7f6ea866b798: {[rn1_2.c1.c.W Value[16 x 144]] }
0x7f6ea866bf48: {[rn1_2.c2.c.b Value[16 x 1]] }
0x7f6ea866d138: {[rn1_2.c2.c.isd Value[16 x 1]] }
0x7f6ea866db68: {[rn1_2.c2.c.m Value[16 x 1]] }
0x7f6ea866e8f8: {[rn1_2.c2.c.sc Value[16 x 1]] }
0x7f6ea866f678: {[rn1_2.c2.W Value[16 x 144]] }
0x7f6ea8670088: {[rn1_3.c1.c.c.b Value[16 x 1]] }
0x7f6ea86712a8: {[rn1_3.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8671a48: {[rn1_3.c1.c.c.m Value[16 x 1]] }
0x7f6ea8672a48: {[rn1_3.c1.c.c.sc Value[16 x 1]] }
0x7f6ea86737f8: {[rn1_3.c1.c.W Value[16 x 144]] }
0x7f6ea8673fb8: {[rn1_3.c2.c.b Value[16 x 1]] }
0x7f6ea86751c8: {[rn1_3.c2.c.isd Value[16 x 1]] }
0x7f6ea8675bd8: {[rn1_3.c2.c.m Value[16 x 1]] }
0x7f6ea8676978: {[rn1_3.c2.c.sc Value[16 x 1]] }
0x7f6ea86776f8: {[rn1_3.c2.W Value[16 x 144]] }
0x7f6ea8678178: {[rn1_4.c1.c.c.b Value[16 x 1]] }
0x7f6ea8679378: {[rn1_4.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8679b18: {[rn1_4.c1.c.c.m Value[16 x 1]] }
0x7f6ea867aad8: {[rn1_4.c1.c.c.sc Value[16 x 1]] }
0x7f6ea867b898: {[rn1_4.c1.c.W Value[16 x 144]] }
0x7f6ea867c048: {[rn1_4.c2.c.b Value[16 x 1]] }
0x7f6ea867d238: {[rn1_4.c2.c.isd Value[16 x 1]] }
0x7f6ea867dc68: {[rn1_4.c2.c.m Value[16 x 1]] }
0x7f6ea867e9f8: {[rn1_4.c2.c.sc Value[16 x 1]] }
0x7f6ea867f778: {[rn1_4.c2.W Value[16 x 144]] }
0x7f6ea8680188: {[rn1_5.c1.c.c.b Value[16 x 1]] }
0x7f6ea86813a8: {[rn1_5.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8681b48: {[rn1_5.c1.c.c.m Value[16 x 1]] }
0x7f6ea8682b48: {[rn1_5.c1.c.c.sc Value[16 x 1]] }
0x7f6ea86838f8: {[rn1_5.c1.c.W Value[16 x 144]] }
0x7f6ea86840b8: {[rn1_5.c2.c.b Value[16 x 1]] }
0x7f6ea86852c8: {[rn1_5.c2.c.isd Value[16 x 1]] }
0x7f6ea8685cd8: {[rn1_5.c2.c.m Value[16 x 1]] }
0x7f6ea8686a78: {[rn1_5.c2.c.sc Value[16 x 1]] }
0x7f6ea86877f8: {[rn1_5.c2.W Value[16 x 144]] }
0x7f6ea8688278: {[rn1_6.c1.c.c.b Value[16 x 1]] }
0x7f6ea8689478: {[rn1_6.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8689c18: {[rn1_6.c1.c.c.m Value[16 x 1]] }
0x7f6ea868abd8: {[rn1_6.c1.c.c.sc Value[16 x 1]] }
0x7f6ea868b998: {[rn1_6.c1.c.W Value[16 x 144]] }
0x7f6ea868c148: {[rn1_6.c2.c.b Value[16 x 1]] }
0x7f6ea868d338: {[rn1_6.c2.c.isd Value[16 x 1]] }
0x7f6ea868dd68: {[rn1_6.c2.c.m Value[16 x 1]] }
0x7f6ea868eaf8: {[rn1_6.c2.c.sc Value[16 x 1]] }
0x7f6ea868f878: {[rn1_6.c2.W Value[16 x 144]] }
0x7f6ea8690288: {[rn1_7.c1.c.c.b Value[16 x 1]] }
0x7f6ea86914a8: {[rn1_7.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8691c48: {[rn1_7.c1.c.c.m Value[16 x 1]] }
0x7f6ea8692c48: {[rn1_7.c1.c.c.sc Value[16 x 1]] }
0x7f6ea86939f8: {[rn1_7.c1.c.W Value[16 x 144]] }
0x7f6ea86941b8: {[rn1_7.c2.c.b Value[16 x 1]] }
0x7f6ea86953c8: {[rn1_7.c2.c.isd Value[16 x 1]] }
0x7f6ea8695dd8: {[rn1_7.c2.c.m Value[16 x 1]] }
0x7f6ea8696bb8: {[rn1_7.c2.c.sc Value[16 x 1]] }
0x7f6ea8697918: {[rn1_7.c2.W Value[16 x 144]] }
0x7f6ea8698398: {[rn1_8.c1.c.c.b Value[16 x 1]] }
0x7f6ea8699598: {[rn1_8.c1.c.c.isd Value[16 x 1]] }
0x7f6ea8699d38: {[rn1_8.c1.c.c.m Value[16 x 1]] }
0x7f6ea869acf8: {[rn1_8.c1.c.c.sc Value[16 x 1]] }
0x7f6ea869ba78: {[rn1_8.c1.c.W Value[16 x 144]] }
0x7f6ea869c298: {[rn1_8.c2.c.b Value[16 x 1]] }
0x7f6ea869d458: {[rn1_8.c2.c.isd Value[16 x 1]] }
0x7f6ea869de88: {[rn1_8.c2.c.m Value[16 x 1]] }
0x7f6ea869ebd8: {[rn1_8.c2.c.sc Value[16 x 1]] }
0x7f6ea869f958: {[rn1_8.c2.W Value[16 x 144]] }
0x7f6ea86a03d8: {[rn1_9.c1.c.c.b Value[16 x 1]] }
0x7f6ea86a15d8: {[rn1_9.c1.c.c.isd Value[16 x 1]] }
0x7f6ea86a1d78: {[rn1_9.c1.c.c.m Value[16 x 1]] }
0x7f6ea86a2d38: {[rn1_9.c1.c.c.sc Value[16 x 1]] }
0x7f6ea86a3ab8: {[rn1_9.c1.c.W Value[16 x 144]] }
0x7f6ea86a42d8: {[rn1_9.c2.c.b Value[16 x 1]] }
0x7f6ea86a5498: {[rn1_9.c2.c.isd Value[16 x 1]] }
0x7f6ea86a5ec8: {[rn1_9.c2.c.m Value[16 x 1]] }
0x7f6ea86a6c18: {[rn1_9.c2.c.sc Value[16 x 1]] }
0x7f6ea86a7998: {[rn1_9.c2.W Value[16 x 144]] }
0x7f6ea86a8418: {[rn2_1.c1.c.c.b Value[32 x 1]] }
0x7f6ea86a9658: {[rn2_1.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86a9818: {[rn2_1.c1.c.c.m Value[32 x 1]] }
0x7f6ea86aadc8: {[rn2_1.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86abb08: {[rn2_1.c1.c.W Value[32 x 144]] }
0x7f6ea86ac328: {[rn2_1.c2.c.b Value[32 x 1]] }
0x7f6ea86ad578: {[rn2_1.c2.c.isd Value[32 x 1]] }
0x7f6ea86ad738: {[rn2_1.c2.c.m Value[32 x 1]] }
0x7f6ea86ae938: {[rn2_1.c2.c.sc Value[32 x 1]] }
0x7f6ea86af6d8: {[rn2_1.c2.W Value[32 x 288]] }
0x7f6ea86aff58: {[rn2_1.c_proj.b Value[32 x 1]] }
0x7f6ea86b1498: {[rn2_1.c_proj.isd Value[32 x 1]] }
0x7f6ea86b1ea8: {[rn2_1.c_proj.m Value[32 x 1]] }
0x7f6ea86b2898: {[rn2_1.c_proj.sc Value[32 x 1]] }
0x7f6ea86b3c58: {[rn2_10.c1.c.c.b Value[32 x 1]] }
0x7f6ea86b3df8: {[rn2_10.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86b4b28: {[rn2_10.c1.c.W Value[32 x 288]] }
0x7f6ea86b58a8: {[rn2_10.c1.c.c.m Value[32 x 1]] }
0x7f6ea86b6298: {[rn2_10.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86b7878: {[rn2_10.c2.c.b Value[32 x 1]] }
0x7f6ea86b8a88: {[rn2_10.c2.c.isd Value[32 x 1]] }
0x7f6ea86b8c48: {[rn2_10.c2.c.m Value[32 x 1]] }
0x7f6ea86b9e48: {[rn2_10.c2.c.sc Value[32 x 1]] }
0x7f6ea86babe8: {[rn2_10.c2.W Value[32 x 288]] }
0x7f6ea86bb738: {[rn2_11.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86bba58: {[rn2_11.c1.c.c.b Value[32 x 1]] }
0x7f6ea86bd6a8: {[rn2_11.c1.c.c.m Value[32 x 1]] }
0x7f6ea86be0b8: {[rn2_11.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86bee58: {[rn2_11.c1.c.W Value[32 x 288]] }
0x7f6ea86bf9a8: {[rn2_11.c2.c.b Value[32 x 1]] }
0x7f6ea86c0f48: {[rn2_11.c2.c.isd Value[32 x 1]] }
0x7f6ea86c1958: {[rn2_11.c2.c.m Value[32 x 1]] }
0x7f6ea86c2348: {[rn2_11.c2.c.sc Value[32 x 1]] }
0x7f6ea86c30c8: {[rn2_11.c2.W Value[32 x 288]] }
0x7f6ea86c3818: {[rn2_12.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86c3b38: {[rn2_12.c1.c.c.b Value[32 x 1]] }
0x7f6ea86c5788: {[rn2_12.c1.c.c.m Value[32 x 1]] }
0x7f6ea86c6198: {[rn2_12.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86c6f38: {[rn2_12.c1.c.W Value[32 x 288]] }
0x7f6ea86c7a88: {[rn2_12.c2.c.b Value[32 x 1]] }
0x7f6ea86c8c98: {[rn2_12.c2.c.isd Value[32 x 1]] }
0x7f6ea86c96a8: {[rn2_12.c2.c.m Value[32 x 1]] }
0x7f6ea86ca0b8: {[rn2_12.c2.c.sc Value[32 x 1]] }
0x7f6ea86cae58: {[rn2_12.c2.W Value[32 x 288]] }
0x7f6ea86cb9a8: {[rn2_13.c1.c.W Value[32 x 288]] }
0x7f6ea86cbcc8: {[rn2_13.c1.c.c.b Value[32 x 1]] }
0x7f6ea86cd358: {[rn2_13.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86cdd08: {[rn2_13.c1.c.c.m Value[32 x 1]] }
0x7f6ea86ce6f8: {[rn2_13.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86cfcd8: {[rn2_13.c2.c.b Value[32 x 1]] }
0x7f6ea86d0ee8: {[rn2_13.c2.c.isd Value[32 x 1]] }
0x7f6ea86d10a8: {[rn2_13.c2.c.m Value[32 x 1]] }
0x7f6ea86d22a8: {[rn2_13.c2.c.sc Value[32 x 1]] }
0x7f6ea86d3048: {[rn2_13.c2.W Value[32 x 288]] }
0x7f6ea86d3b98: {[rn2_14.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86d3eb8: {[rn2_14.c1.c.c.b Value[32 x 1]] }
0x7f6ea86d5b08: {[rn2_14.c1.c.c.m Value[32 x 1]] }
0x7f6ea86d6518: {[rn2_14.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86d72b8: {[rn2_14.c1.c.W Value[32 x 288]] }
0x7f6ea86d7e08: {[rn2_14.c2.c.b Value[32 x 1]] }
0x7f6ea86d93a8: {[rn2_14.c2.c.isd Value[32 x 1]] }
0x7f6ea86d9db8: {[rn2_14.c2.c.m Value[32 x 1]] }
0x7f6ea86da7a8: {[rn2_14.c2.c.sc Value[32 x 1]] }
0x7f6ea86db528: {[rn2_14.c2.W Value[32 x 288]] }
0x7f6ea86dbc78: {[rn2_15.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86dbf98: {[rn2_15.c1.c.c.b Value[32 x 1]] }
0x7f6ea86ddbe8: {[rn2_15.c1.c.c.m Value[32 x 1]] }
0x7f6ea86de5f8: {[rn2_15.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86df398: {[rn2_15.c1.c.W Value[32 x 288]] }
0x7f6ea86e0098: {[rn2_15.c2.c.b Value[32 x 1]] }
0x7f6ea86e12a8: {[rn2_15.c2.c.isd Value[32 x 1]] }
0x7f6ea86e1cb8: {[rn2_15.c2.c.m Value[32 x 1]] }
0x7f6ea86e26c8: {[rn2_15.c2.c.sc Value[32 x 1]] }
0x7f6ea86e3468: {[rn2_15.c2.W Value[32 x 288]] }
0x7f6ea86e3fb8: {[rn2_16.c1.c.W Value[32 x 288]] }
0x7f6ea86e42d8: {[rn2_16.c1.c.c.b Value[32 x 1]] }
0x7f6ea86e5968: {[rn2_16.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86e6318: {[rn2_16.c1.c.c.m Value[32 x 1]] }
0x7f6ea86e6d08: {[rn2_16.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86e82e8: {[rn2_16.c2.c.b Value[32 x 1]] }
0x7f6ea86e94f8: {[rn2_16.c2.c.isd Value[32 x 1]] }
0x7f6ea86e96b8: {[rn2_16.c2.c.m Value[32 x 1]] }
0x7f6ea86ea8b8: {[rn2_16.c2.c.sc Value[32 x 1]] }
0x7f6ea86eb658: {[rn2_16.c2.W Value[32 x 288]] }
0x7f6ea86ec1a8: {[rn2_17.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86ec4c8: {[rn2_17.c1.c.c.b Value[32 x 1]] }
0x7f6ea86ee118: {[rn2_17.c1.c.c.m Value[32 x 1]] }
0x7f6ea86eeb28: {[rn2_17.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86ef8c8: {[rn2_17.c1.c.W Value[32 x 288]] }
0x7f6ea86f0418: {[rn2_17.c2.c.b Value[32 x 1]] }
0x7f6ea86f19b8: {[rn2_17.c2.c.isd Value[32 x 1]] }
0x7f6ea86f23c8: {[rn2_17.c2.c.m Value[32 x 1]] }
0x7f6ea86f2db8: {[rn2_17.c2.c.sc Value[32 x 1]] }
0x7f6ea86f3b38: {[rn2_17.c2.W Value[32 x 288]] }
0x7f6ea86f4318: {[rn2_18.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86f4638: {[rn2_18.c1.c.c.b Value[32 x 1]] }
0x7f6ea86f6288: {[rn2_18.c1.c.c.m Value[32 x 1]] }
0x7f6ea86f6c98: {[rn2_18.c1.c.c.sc Value[32 x 1]] }
0x7f6ea86f7a38: {[rn2_18.c1.c.W Value[32 x 288]] }
0x7f6ea86f8818: {[rn2_18.c2.c.isd Value[32 x 1]] }
0x7f6ea86f9228: {[rn2_18.c2.c.m Value[32 x 1]] }
0x7f6ea86f9c38: {[rn2_18.c2.c.sc Value[32 x 1]] }
0x7f6ea86fa9d8: {[rn2_18.c2.W Value[32 x 288]] }
0x7f6ea86fb848: {[rn2_1_Wproj Value[32 x 16]] }
0x7f6ea86fbd68: {[rn2_2.c1.c.W Value[32 x 288]] }
0x7f6ea86fc088: {[rn2_2.c1.c.c.isd Value[32 x 1]] }
0x7f6ea86fc8d8: {[rn2_2.c1.c.c.b Value[32 x 1]] }
0x7f6ea86fda18: {[rn2_18.c2.c.b Value[32 x 1]] }
0x7f6eaaba7e98: {[features Value[32 x 32 x 3 x *1]] }
0x7f6eaabc8e98: {[conv1.c.c.sc Value[16 x 1]] }
0x7f6ead0dee78: {[conv1.c.c.isd Value[16 x 1]] }
0x7f6ead0e9e78: {[conv1.c.W Value[16 x 27]] }
0x7f6ead0ffe78: {[conv1.c.c.b Value[16 x 1]] }

08/04/2016 14:36:08: Minibatch[1-200]: Err = 0.89781250 * 3200; CE = 2.30262850 * 3200
08/04/2016 14:36:11: Minibatch[201-400]: Err = 0.90156250 * 3200; CE = 2.30246369 * 3200
08/04/2016 14:36:14: Minibatch[401-600]: Err = 0.90000000 * 3200; CE = 2.30265026 * 3200
08/04/2016 14:36:14: Minibatch[601-625]: Err = 0.90500000 * 400; CE = 2.30302148 * 400
08/04/2016 14:36:14: Final Results: Minibatch[1-625]: Err = 0.90000000 * 10000; CE = 2.30259844 * 10000; perplexity = 10.00013350

08/04/2016 14:36:14: Action "test" complete.

08/04/2016 14:36:14: __COMPLETED__