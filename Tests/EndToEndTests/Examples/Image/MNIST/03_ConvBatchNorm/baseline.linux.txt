CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:36
		Last modified date: Thu Aug  4 12:33:33 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on 643085f7f8c2
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
08/04/2016 14:34:58: -------------------------------------------------------------------
08/04/2016 14:34:58: Build info: 

08/04/2016 14:34:58: 		Built time: Aug  4 2016 13:05:36
08/04/2016 14:34:58: 		Last modified date: Thu Aug  4 12:33:33 2016
08/04/2016 14:34:58: 		Build type: release
08/04/2016 14:34:58: 		Build target: GPU
08/04/2016 14:34:58: 		With 1bit-SGD: no
08/04/2016 14:34:58: 		Math lib: mkl
08/04/2016 14:34:58: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 14:34:58: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 14:34:58: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 14:34:58: 		Build Branch: HEAD
08/04/2016 14:34:58: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 14:34:58: 		Built by philly on 643085f7f8c2
08/04/2016 14:34:58: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 14:34:58: -------------------------------------------------------------------
08/04/2016 14:34:59: -------------------------------------------------------------------
08/04/2016 14:34:59: GPU info:

08/04/2016 14:34:59: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:34:59: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:34:59: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:34:59: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 14:34:59: -------------------------------------------------------------------

08/04/2016 14:34:59: Running on localhost at 2016/08/04 14:34:59
08/04/2016 14:34:59: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk  currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



08/04/2016 14:34:59: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 14:34:59: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "$ConfigDir$/Macros.ndl"
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=$ModelDir$/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

08/04/2016 14:34:59: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 14:34:59: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 14:34:59: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

08/04/2016 14:34:59: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 14:34:59: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:ModelDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 1024
    modelPath=/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
        networkDescription = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

08/04/2016 14:34:59: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 14:34:59: Commands: train test
08/04/2016 14:34:59: Precision = "float"
08/04/2016 14:34:59: CNTKModelPath: /tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
08/04/2016 14:34:59: CNTKCommandTrainInfo: train : 3
08/04/2016 14:34:59: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 14:34:59: ##############################################################################
08/04/2016 14:34:59: #                                                                            #
08/04/2016 14:34:59: # Action "train"                                                             #
08/04/2016 14:34:59: #                                                                            #
08/04/2016 14:34:59: ##############################################################################

08/04/2016 14:34:59: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

08/04/2016 14:34:59: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 14:35:00: Created model with 36 nodes on GPU 0.

08/04/2016 14:35:00: Training criterion node(s):
08/04/2016 14:35:00: 	ce = CrossEntropyWithSoftmax

08/04/2016 14:35:00: Evaluation criterion node(s):

08/04/2016 14:35:00: 	errs = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [labels Gradient[10 x *]] }
0x3adf768: {[features Value[28 x 28 x 1 x *]] }
0x3ea49f8: {[featScale Value[1 x 1]] }
0x3ea5628: {[labels Value[10 x *]] }
0x488f0e8: {[conv1.c.W Value[16 x 25]] }
0x488fb18: {[conv1.c.c.b Value[16 x 1]] }
0x4890548: {[conv1.c.c.sc Value[16 x 1]] }
0x4891048: {[conv1.c.c.m Value[16 x 1]] }
0x4891b68: {[conv1.c.c.isd Value[16 x 1]] }
0x4892b88: {[conv2.c.W Value[32 x 400]] }
0x4894498: {[conv2.c.c.b Value[32 x 1]] }
0x4895258: {[conv2.c.c.sc Value[32 x 1]] }
0x4895e88: {[conv2.c.c.m Value[32 x 1]] }
0x4896988: {[conv2.c.c.isd Value[32 x 1]] }
0x4898378: {[h1.W Value[128 x 7 x 7 x 32]] }
0x48994f8: {[h1.b Value[128 x 1]] }
0x4899ea8: {[h1.sc Value[128 x 1]] }
0x489a7b8: {[h1.m Value[128 x 1]] }
0x489b148: {[h1.isd Value[128 x 1]] }
0x489c398: {[ol.W Value[10 x 128]] }
0x489d518: {[ol.b Value[10 x 1]] }
0x7fae1949fe38: {[errs Value[1]] }
0x7fae194a4668: {[conv1.c.c.c Value[28 x 28 x 16 x *]] }
0x7fae194a49a8: {[featScaled Value[28 x 28 x 1 x *]] }
0x7fae194a4c58: {[conv1.c.c.y Value[28 x 28 x 16 x *]] }
0x7fae194a55a8: {[conv1.c.c.c Gradient[28 x 28 x 16 x *]] [conv1.y Value[28 x 28 x 16 x *]] }
0x7fae194a5b78: {[conv1.c.c.y Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
0x7fae194a5d38: {[conv1.c.W Gradient[16 x 25]] [conv2.c.c.c Value[14 x 14 x 32 x *]] }
0x7fae194a5ef8: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[28 x 28 x 16 x *]] }
0x7fae194a60b8: {[conv2.c.c.y Value[14 x 14 x 32 x *]] }
0x7fae194c4c48: {[ol.z Value[10 x 1 x *]] }
0x7fae194c4e08: {[ce Value[1]] }
0x7fae194cb7d8: {[conv1.c.c.b Gradient[16 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *]] [conv2.y Value[14 x 14 x 32 x *]] }
0x7fae194cb998: {[conv2.c.c.y Gradient[14 x 14 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0x7fae194cbb58: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
0x7fae194cbd18: {[h1.bn Value[128 x *]] }
0x7fae194cc098: {[conv2.c.c.b Gradient[32 x 1]] }
0x7fae194cc258: {[conv2.c.W Gradient[32 x 400]] [h1.t Gradient[128 x *]] [h1.y Value[128 x *]] }
0x7fae194cc418: {[h1.bn Gradient[128 x *]] [ol.t Value[10 x *]] }
0x7fae194ccec8: {[ce Gradient[1]] }
0x7fae194cd088: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
0x7fae194cd248: {[ol.t Gradient[10 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2 Gradient[7 x 7 x 32 x *]] }
0x7fae194cd408: {[ol.b Gradient[10 x 1]] }
0x7fae194cd5c8: {[h1.sc Gradient[128 x 1]] [h1.y Gradient[128 x *]] }
0x7fae194cd7b8: {[h1.W Gradient[128 x 7 x 7 x 32]] }
0x7fae194cd978: {[h1.b Gradient[128 x 1]] }

08/04/2016 14:35:00: No PreCompute nodes found, skipping PreCompute step.

08/04/2016 14:35:00: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..60000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 14:35:00: Starting minibatch loop.
08/04/2016 14:35:02:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.18128003 * 16000; errs = 5.519% * 16000; time = 2.0878s; samplesPerSecond = 7663.6
08/04/2016 14:35:03:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.08507626 * 16000; errs = 2.594% * 16000; time = 1.0435s; samplesPerSecond = 15333.1
08/04/2016 14:35:04:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06630786 * 16000; errs = 2.000% * 16000; time = 1.0389s; samplesPerSecond = 15400.3
08/04/2016 14:35:05: Finished Epoch[ 1 of 3]: [Training] ce = 0.10003923 * 60000; errs = 3.020% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=4.96463s
08/04/2016 14:35:05: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to inf.

08/04/2016 14:35:05: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 1: frames [60000..120000] (first sequence at sample 60000), data subset 0 of 1

08/04/2016 14:35:05: Starting minibatch loop.
08/04/2016 14:35:06:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02322726 * 16000; errs = 0.694% * 16000; time = 1.0426s; samplesPerSecond = 15346.3
08/04/2016 14:35:07:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01870030 * 16000; errs = 0.594% * 16000; time = 1.0396s; samplesPerSecond = 15390.7
08/04/2016 14:35:08:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01880083 * 16000; errs = 0.606% * 16000; time = 1.0387s; samplesPerSecond = 15404.0
08/04/2016 14:35:09: Finished Epoch[ 2 of 3]: [Training] ce = 0.02015561 * 60000; errs = 0.615% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=3.91274s
08/04/2016 14:35:09: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.2'

08/04/2016 14:35:09: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 2: frames [120000..180000] (first sequence at sample 120000), data subset 0 of 1

08/04/2016 14:35:09: Starting minibatch loop.
08/04/2016 14:35:10:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01370886 * 16000; errs = 0.369% * 16000; time = 1.0417s; samplesPerSecond = 15359.7
08/04/2016 14:35:11:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01529380 * 16000; errs = 0.475% * 16000; time = 1.0395s; samplesPerSecond = 15391.5
08/04/2016 14:35:12:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01252151 * 16000; errs = 0.363% * 16000; time = 1.0414s; samplesPerSecond = 15363.6
08/04/2016 14:35:13: Finished Epoch[ 3 of 3]: [Training] ce = 0.01401606 * 60000; errs = 0.405% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=3.91133s
08/04/2016 14:35:13: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134124.952087/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
08/04/2016 14:35:13: CNTKCommandTrainEnd: train

08/04/2016 14:35:13: Action "train" complete.


08/04/2016 14:35:13: ##############################################################################
08/04/2016 14:35:13: #                                                                            #
08/04/2016 14:35:13: # Action "test"                                                              #
08/04/2016 14:35:13: #                                                                            #
08/04/2016 14:35:13: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[ce Gradient[1]] [conv1.c.W Gradient[16 x 25]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[28 x 28 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[28 x 28 x 16 x *1]] [conv1.y Gradient[28 x 28 x 16 x *1]] [conv2.c.W Gradient[32 x 400]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[14 x 14 x 32 x *1]] [conv2.y Gradient[14 x 14 x 32 x *1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.bn Gradient[128 x *1]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [h1.sc Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] }
0x7fae14a236b8: {[featScaled Value[28 x 28 x 1 x *1]] }
0x7fae14a239f8: {[conv1.c.c.c Value[28 x 28 x 16 x *1]] }
0x7fae14a23ca8: {[conv1.c.c.y Value[28 x 28 x 16 x *1]] }
0x7fae14a245f8: {[conv1.y Value[28 x 28 x 16 x *1]] }
0x7fae14a24bc8: {[pool1 Value[14 x 14 x 16 x *1]] }
0x7fae14a24d88: {[conv2.c.c.c Value[14 x 14 x 32 x *1]] }
0x7fae14a25108: {[conv2.c.c.y Value[14 x 14 x 32 x *1]] }
0x7fae14a25648: {[conv2.y Value[14 x 14 x 32 x *1]] }
0x7fae14a25808: {[pool2 Value[7 x 7 x 32 x *1]] }
0x7fae14a259c8: {[h1.t Value[128 x *1]] }
0x7fae14a25b88: {[h1.bn Value[128 x *1]] }
0x7fae14a2c538: {[h1.y Value[128 x *1]] }
0x7fae14a2c6f8: {[ol.t Value[10 x *1]] }
0x7fae14a2c8b8: {[ol.z Value[10 x 1 x *1]] }
0x7fae17c261b8: {[conv1.c.c.b Value[16 x 1]] }
0x7fae17c26528: {[errs Value[1]] }
0x7fae17c279a8: {[conv1.c.c.isd Value[16 x 1]] }
0x7fae17c28368: {[conv1.c.c.m Value[16 x 1]] }
0x7fae17c28d98: {[conv1.c.c.sc Value[16 x 1]] }
0x7fae17c29b18: {[conv1.c.W Value[16 x 25]] }
0x7fae17c2a258: {[conv2.c.c.b Value[32 x 1]] }
0x7fae17c2be08: {[conv2.c.c.isd Value[32 x 1]] }
0x7fae17c2c818: {[conv2.c.c.m Value[32 x 1]] }
0x7fae17c2d228: {[conv2.c.c.sc Value[32 x 1]] }
0x7fae17c2dfc8: {[conv2.c.W Value[32 x 400]] }
0x7fae17c2eb18: {[featScale Value[1 x 1]] }
0x7fae17c2f6b8: {[features Value[28 x 28 x 1 x *1]] }
0x7fae17c2fd88: {[h1.b Value[128 x 1]] }
0x7fae17c303c8: {[h1.m Value[128 x 1]] }
0x7fae17c30478: {[h1.isd Value[128 x 1]] }
0x7fae17c30ed8: {[h1.sc Value[128 x 1]] }
0x7fae17c31ed8: {[h1.W Value[128 x 7 x 7 x 32]] }
0x7fae17c339c8: {[labels Value[10 x *1]] }
0x7fae17c33f28: {[ol.W Value[10 x 128]] }
0x7fae17c34278: {[ol.b Value[10 x 1]] }
0x7fae17c3bb98: {[ce Value[1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
08/04/2016 14:35:13: Minibatch[1-10]: errs = 0.630% * 10000; ce = 0.02028566 * 10000
08/04/2016 14:35:13: Final Results: Minibatch[1-10]: errs = 0.630% * 10000; ce = 0.02028566 * 10000; perplexity = 1.02049281

08/04/2016 14:35:13: Action "test" complete.

08/04/2016 14:35:13: __COMPLETED__