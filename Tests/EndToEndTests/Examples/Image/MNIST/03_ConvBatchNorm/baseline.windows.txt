CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/03_ConvBatchNorm.cntk currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 06:18:04
		Last modified date: Thu Aug  4 03:39:14 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by svcphil on dphaim-26-new
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@3\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
08/04/2016 08:06:28: -------------------------------------------------------------------
08/04/2016 08:06:28: Build info: 

08/04/2016 08:06:28: 		Built time: Aug  4 2016 06:18:04
08/04/2016 08:06:28: 		Last modified date: Thu Aug  4 03:39:14 2016
08/04/2016 08:06:28: 		Build type: Release
08/04/2016 08:06:28: 		Build target: GPU
08/04/2016 08:06:28: 		With 1bit-SGD: no
08/04/2016 08:06:28: 		Math lib: mkl
08/04/2016 08:06:28: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/04/2016 08:06:28: 		CUB_PATH: C:\src\cub-1.4.1
08/04/2016 08:06:28: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/04/2016 08:06:28: 		Build Branch: HEAD
08/04/2016 08:06:28: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 08:06:28: 		Built by svcphil on dphaim-26-new
08/04/2016 08:06:28: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@3\Source\CNTK\
08/04/2016 08:06:28: -------------------------------------------------------------------
08/04/2016 08:06:28: -------------------------------------------------------------------
08/04/2016 08:06:28: GPU info:

08/04/2016 08:06:28: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
08/04/2016 08:06:28: -------------------------------------------------------------------

08/04/2016 08:06:28: Running on cntk-muc01 at 2016/08/04 08:06:28
08/04/2016 08:06:28: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/03_ConvBatchNorm.cntk  currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu  DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



08/04/2016 08:06:28: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 08:06:28: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "$ConfigDir$/Macros.ndl"
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=$ModelDir$/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

08/04/2016 08:06:28: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 08:06:28: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 08:06:28: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
command = train:test
precision = "float"
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
traceLevel=1
numMBsToShowResult=500
train = [
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/Macros.ndl"
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 1024
    modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

08/04/2016 08:06:28: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 08:06:28: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 1024
    modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        imageLayout = "cudnn"
        initOnCPUOnly=true
        ndlMacros = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/Macros.ndl"
        networkDescription = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

08/04/2016 08:06:28: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 08:06:28: Commands: train test
08/04/2016 08:06:28: Precision = "float"
08/04/2016 08:06:28: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
08/04/2016 08:06:28: CNTKCommandTrainInfo: train : 3
08/04/2016 08:06:28: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 08:06:28: ##############################################################################
08/04/2016 08:06:28: #                                                                            #
08/04/2016 08:06:28: # Action "train"                                                             #
08/04/2016 08:06:28: #                                                                            #
08/04/2016 08:06:28: ##############################################################################

08/04/2016 08:06:28: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

08/04/2016 08:06:29: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 08:06:29: Created model with 36 nodes on GPU 0.

08/04/2016 08:06:29: Training criterion node(s):
08/04/2016 08:06:29: 	ce = CrossEntropyWithSoftmax

08/04/2016 08:06:29: Evaluation criterion node(s):

08/04/2016 08:06:29: 	errs = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [labels Gradient[10 x *]] }
000000B39D92A260: {[features Value[28 x 28 x 1 x *]] }
000000B3A478D890: {[h1.b Value[128 x 1]] }
000000B3A478D930: {[h1.sc Value[128 x 1]] }
000000B3A478DCF0: {[h1.isd Value[128 x 1]] }
000000B3A478E150: {[conv1.c.c.b Value[16 x 1]] }
000000B3A478E1F0: {[conv1.c.W Value[16 x 25]] }
000000B3A478E3D0: {[conv1.c.c.m Value[16 x 1]] }
000000B3A478E470: {[conv1.c.c.isd Value[16 x 1]] }
000000B3A478E5B0: {[conv2.c.c.m Value[32 x 1]] }
000000B3A478E8D0: {[h1.m Value[128 x 1]] }
000000B3A478EAB0: {[featScale Value[1 x 1]] }
000000B3A478EBF0: {[labels Value[10 x *]] }
000000B3A478ED30: {[conv1.c.c.sc Value[16 x 1]] }
000000B3A478EE70: {[conv2.c.c.isd Value[32 x 1]] }
000000B3A478EFB0: {[conv2.c.c.sc Value[32 x 1]] }
000000B3A478F050: {[conv2.c.W Value[32 x 400]] }
000000B3A478F0F0: {[h1.W Value[128 x 7 x 7 x 32]] }
000000B3A478F550: {[conv2.c.c.b Value[32 x 1]] }
000000B3A497DB00: {[ol.b Value[10 x 1]] }
000000B3A497E820: {[ol.W Value[10 x 128]] }
000000B3B50AE6A0: {[errs Value[1]] }
000000B3B50AE920: {[ol.z Value[10 x 1 x *]] }
000000B3B50AEB00: {[ce Value[1]] }
000000B3B50AEBA0: {[conv1.c.c.c Value[28 x 28 x 16 x *]] }
000000B3B50AEEC0: {[conv1.c.c.y Value[28 x 28 x 16 x *]] }
000000B3B50AF0A0: {[featScaled Value[28 x 28 x 1 x *]] }
000000B3B50AF140: {[conv1.c.c.c Gradient[28 x 28 x 16 x *]] [conv1.y Value[28 x 28 x 16 x *]] }
000000B3B50AF280: {[conv1.c.c.y Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
000000B3B50AF5A0: {[conv1.c.W Gradient[16 x 25]] [conv2.c.c.c Value[14 x 14 x 32 x *]] }
000000B3B50AF640: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[28 x 28 x 16 x *]] }
000000B3B50AF780: {[conv2.c.c.y Value[14 x 14 x 32 x *]] }
000000B3B50B0400: {[conv2.c.W Gradient[32 x 400]] [h1.t Gradient[128 x *]] [h1.y Value[128 x *]] }
000000B3B50B0680: {[conv2.c.c.y Gradient[14 x 14 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
000000B3B50B0720: {[h1.sc Gradient[128 x 1]] [h1.y Gradient[128 x *]] }
000000B3B50B07C0: {[h1.W Gradient[128 x 7 x 7 x 32]] }
000000B3B50B0900: {[conv2.c.c.b Gradient[32 x 1]] }
000000B3B50B09A0: {[ol.t Gradient[10 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2 Gradient[7 x 7 x 32 x *]] }
000000B3B50B0A40: {[ce Gradient[1]] }
000000B3B50B0AE0: {[h1.b Gradient[128 x 1]] }
000000B3B50B0E00: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
000000B3B50B0EA0: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
000000B3B50B1260: {[ol.b Gradient[10 x 1]] }
000000B3B50B1440: {[h1.bn Gradient[128 x *]] [ol.t Value[10 x *]] }
000000B3B50B14E0: {[h1.bn Value[128 x *]] }
000000B3B50B18A0: {[conv1.c.c.b Gradient[16 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *]] [conv2.y Value[14 x 14 x 32 x *]] }

08/04/2016 08:06:29: No PreCompute nodes found, skipping PreCompute step.

08/04/2016 08:06:29: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..60000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 08:06:29: Starting minibatch loop.
08/04/2016 08:06:33:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.17191440 * 16000; errs = 5.119% * 16000; time = 3.3102s; samplesPerSecond = 4833.5
08/04/2016 08:06:35:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.08350293 * 16000; errs = 2.694% * 16000; time = 1.8982s; samplesPerSecond = 8428.9
08/04/2016 08:06:37:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06629996 * 16000; errs = 2.081% * 16000; time = 1.9032s; samplesPerSecond = 8406.8
08/04/2016 08:06:38: Finished Epoch[ 1 of 3]: [Training] ce = 0.09672746 * 60000; errs = 2.970% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=8.52213s
08/04/2016 08:06:38: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to 1.#INF.

08/04/2016 08:06:38: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 1: frames [60000..120000] (first sequence at sample 60000), data subset 0 of 1

08/04/2016 08:06:38: Starting minibatch loop.
08/04/2016 08:06:40:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02491040 * 16000; errs = 0.750% * 16000; time = 1.8521s; samplesPerSecond = 8638.8
08/04/2016 08:06:42:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01834340 * 16000; errs = 0.550% * 16000; time = 1.8524s; samplesPerSecond = 8637.5
08/04/2016 08:06:44:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01821206 * 16000; errs = 0.525% * 16000; time = 1.8690s; samplesPerSecond = 8560.5
08/04/2016 08:06:45: Finished Epoch[ 2 of 3]: [Training] ce = 0.02009909 * 60000; errs = 0.598% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=6.95686s
08/04/2016 08:06:45: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.2'

08/04/2016 08:06:45: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples
BlockRandomizer::StartEpoch: epoch 2: frames [120000..180000] (first sequence at sample 120000), data subset 0 of 1

08/04/2016 08:06:45: Starting minibatch loop.
08/04/2016 08:06:47:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01290669 * 16000; errs = 0.331% * 16000; time = 1.8755s; samplesPerSecond = 8530.8
08/04/2016 08:06:49:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01559679 * 16000; errs = 0.425% * 16000; time = 1.8735s; samplesPerSecond = 8540.1
08/04/2016 08:06:51:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01239674 * 16000; errs = 0.375% * 16000; time = 1.8929s; samplesPerSecond = 8452.5
08/04/2016 08:06:52: Finished Epoch[ 3 of 3]: [Training] ce = 0.01367234 * 60000; errs = 0.378% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=7.06874s
08/04/2016 08:06:52: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
08/04/2016 08:06:52: CNTKCommandTrainEnd: train

08/04/2016 08:06:52: Action "train" complete.


08/04/2016 08:06:52: ##############################################################################
08/04/2016 08:06:52: #                                                                            #
08/04/2016 08:06:52: # Action "test"                                                              #
08/04/2016 08:06:52: #                                                                            #
08/04/2016 08:06:52: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> errs = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool1: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

conv2.c.c.c: using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

pool2: using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ce Gradient[1]] [conv1.c.W Gradient[16 x 25]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[28 x 28 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[28 x 28 x 16 x *1]] [conv1.y Gradient[28 x 28 x 16 x *1]] [conv2.c.W Gradient[32 x 400]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[14 x 14 x 32 x *1]] [conv2.y Gradient[14 x 14 x 32 x *1]] [errs Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.bn Gradient[128 x *1]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [h1.sc Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] }
000000B3B50AE6A0: {[conv2.c.c.y Value[14 x 14 x 32 x *1]] }
000000B3B50AEB00: {[conv2.y Value[14 x 14 x 32 x *1]] }
000000B3B50AEBA0: {[pool2 Value[7 x 7 x 32 x *1]] }
000000B3B50AEC40: {[h1.t Value[128 x *1]] }
000000B3B50AED80: {[h1.bn Value[128 x *1]] }
000000B3B50AF0A0: {[h1.y Value[128 x *1]] }
000000B3B50AF140: {[ol.t Value[10 x *1]] }
000000B3B50AF280: {[ol.z Value[10 x 1 x *1]] }
000000B3B52EB060: {[conv1.c.c.isd Value[16 x 1]] }
000000B3B52EB100: {[conv1.c.c.m Value[16 x 1]] }
000000B3B52EB4C0: {[conv2.c.c.m Value[32 x 1]] }
000000B3B52EB920: {[featScale Value[1 x 1]] }
000000B3B52EBD80: {[conv2.c.c.sc Value[32 x 1]] }
000000B3B52EBE20: {[conv2.c.W Value[32 x 400]] }
000000B3B52EC1E0: {[conv2.c.c.b Value[32 x 1]] }
000000B3B52EC460: {[conv1.c.c.b Value[16 x 1]] }
000000B3B52EC500: {[conv2.c.c.isd Value[32 x 1]] }
000000B3B52EC5A0: {[conv1.c.c.sc Value[16 x 1]] }
000000B3B52EC640: {[conv1.c.W Value[16 x 25]] }
000000B3B52EC960: {[features Value[28 x 28 x 1 x *1]] }
000000B3B52ECDC0: {[h1.b Value[128 x 1]] }
000000B3B52ECF00: {[ol.b Value[10 x 1]] }
000000B3B52ED2C0: {[errs Value[1]] }
000000B3B52ED360: {[featScaled Value[28 x 28 x 1 x *1]] }
000000B3B52ED4A0: {[h1.m Value[128 x 1]] }
000000B3B52ED540: {[labels Value[10 x *1]] }
000000B3B52ED680: {[ce Value[1]] }
000000B3B52ED9A0: {[h1.W Value[128 x 7 x 7 x 32]] }
000000B3B52EDB80: {[conv1.c.c.c Value[28 x 28 x 16 x *1]] }
000000B3B52EDC20: {[h1.sc Value[128 x 1]] }
000000B3B52EDCC0: {[h1.isd Value[128 x 1]] }
000000B3B52EDD60: {[ol.W Value[10 x 128]] }
000000B3B52EDEA0: {[conv1.c.c.y Value[28 x 28 x 16 x *1]] }
000000B3B52EE120: {[conv1.y Value[28 x 28 x 16 x *1]] }
000000B3B52EE1C0: {[pool1 Value[14 x 14 x 16 x *1]] }
000000B3B52EE260: {[conv2.c.c.c Value[14 x 14 x 32 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1
08/04/2016 08:06:53: Minibatch[1-10]: errs = 0.710% * 10000; ce = 0.02067139 * 10000
08/04/2016 08:06:53: Final Results: Minibatch[1-10]: errs = 0.710% * 10000; ce = 0.02067139 * 10000; perplexity = 1.02088653

08/04/2016 08:06:53: Action "test" complete.

08/04/2016 08:06:53: __COMPLETED__