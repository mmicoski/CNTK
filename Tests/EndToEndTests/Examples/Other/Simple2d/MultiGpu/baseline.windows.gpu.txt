CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 268381192 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Multigpu.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu DeviceId=0 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 06:18:32
		Last modified date: Thu Aug  4 03:38:59 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: c:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by svcphil on Philly-Pool1
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@2\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
08/04/2016 09:19:05: -------------------------------------------------------------------
08/04/2016 09:19:05: Build info: 

08/04/2016 09:19:05: 		Built time: Aug  4 2016 06:18:32
08/04/2016 09:19:05: 		Last modified date: Thu Aug  4 03:38:59 2016
08/04/2016 09:19:05: 		Build type: Release
08/04/2016 09:19:05: 		Build target: GPU
08/04/2016 09:19:05: 		With 1bit-SGD: yes
08/04/2016 09:19:05: 		Math lib: mkl
08/04/2016 09:19:05: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/04/2016 09:19:05: 		CUB_PATH: c:\src\cub-1.4.1
08/04/2016 09:19:05: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/04/2016 09:19:05: 		Build Branch: HEAD
08/04/2016 09:19:05: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 09:19:05: 		Built by svcphil on Philly-Pool1
08/04/2016 09:19:05: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@2\Source\CNTK\
08/04/2016 09:19:05: -------------------------------------------------------------------
08/04/2016 09:19:08: -------------------------------------------------------------------
08/04/2016 09:19:08: GPU info:

08/04/2016 09:19:08: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/04/2016 09:19:08: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/04/2016 09:19:08: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/04/2016 09:19:08: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3072 MB
08/04/2016 09:19:08: -------------------------------------------------------------------

08/04/2016 09:19:08: Running on DPHAIM-24 at 2016/08/04 09:19:08
08/04/2016 09:19:08: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Multigpu.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu  DeviceId=0  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



08/04/2016 09:19:08: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 09:19:08: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu
DeviceId=0
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 09:19:08: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 09:19:08: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 09:19:08: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/MultigpuOutput"    
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu
DeviceId=0
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 09:19:08: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 09:19:08: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
configparameters: Multigpu.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Multigpu.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Multigpu.cntk:deviceId=0
configparameters: Multigpu.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/Models
configparameters: Multigpu.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
08/04/2016 09:19:08: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 09:19:08: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
08/04/2016 09:19:08: Precision = "float"
08/04/2016 09:19:08: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn
08/04/2016 09:19:08: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
08/04/2016 09:19:08: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 09:19:08: ##############################################################################
08/04/2016 09:19:08: #                                                                            #
08/04/2016 09:19:08: # Action "train"                                                             #
08/04/2016 09:19:08: #                                                                            #
08/04/2016 09:19:08: ##############################################################################

08/04/2016 09:19:08: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using GPU 0

08/04/2016 09:19:08: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 09:19:09: Created model with 25 nodes on GPU 0.

08/04/2016 09:19:09: Training criterion node(s):
08/04/2016 09:19:09: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/04/2016 09:19:09: Evaluation criterion node(s):

08/04/2016 09:19:09: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0000007EC3D9A040: {[features Value[2 x *]] }
0000007ED8023570: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0000007ED8023610: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0000007ED8023B10: {[B0 Value[50 x 1]] }
0000007ED8023F70: {[B2 Value[2 x 1]] }
0000007ED80241F0: {[labels Value[2 x *]] }
0000007ED8024830: {[EvalErrorPrediction Value[1]] }
0000007ED80248D0: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0000007ED8024970: {[LogOfPrior Value[2]] }
0000007ED8024BF0: {[MVNormalizedFeatures Value[2 x *]] }
0000007ED8024D30: {[Prior Value[2]] }
0000007ED8024FB0: {[B1 Value[50 x 1]] }
0000007ED8025050: {[W1 Value[50 x 50]] }
0000007ED80250F0: {[W2 Value[2 x 50]] }
0000007ED8025190: {[CrossEntropyWithSoftmax Value[1]] }
0000007ED8025230: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0000007ED80252D0: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0000007ED8025370: {[W0*features Value[50 x *]] }
0000007ED8025410: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0000007ED80AAB10: {[W2*H1 Gradient[2 x 1 x *]] }
0000007ED80AB150: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0000007ED80AB1F0: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0000007ED80ABB50: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0000007ED80ABFB0: {[CrossEntropyWithSoftmax Gradient[1]] }
0000007ED80AC050: {[B2 Gradient[2 x 1]] }
0000007EDA7AF480: {[MeanOfFeatures Value[2]] }
0000007EDA7AF520: {[InvStdOfFeatures Value[2]] }
0000007EDA7AF700: {[W0 Value[50 x 2]] }


08/04/2016 09:19:09: Precomputing --> 3 PreCompute nodes found.

08/04/2016 09:19:09: 	MeanOfFeatures = Mean()
08/04/2016 09:19:09: 	InvStdOfFeatures = InvStdDev()
08/04/2016 09:19:09: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 09:19:09: Precomputing --> Completed.


08/04/2016 09:19:09: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 09:19:09: Starting minibatch loop.
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.71882043 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0189s; samplesPerSecond = 13208.6
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.73075317 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0173s; samplesPerSecond = 14434.2
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70195178 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0173s; samplesPerSecond = 14483.5
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.74146509 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0174s; samplesPerSecond = 14377.7
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.74525684 * 250; EvalErrorPrediction = 0.58000000 * 250; time = 0.0172s; samplesPerSecond = 14513.8
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.71782935 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0174s; samplesPerSecond = 14370.3
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.70220215 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0175s; samplesPerSecond = 14246.6
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.72996240 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0173s; samplesPerSecond = 14469.3
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72194482 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0174s; samplesPerSecond = 14400.1
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.71382080 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0176s; samplesPerSecond = 14204.5
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70678320 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0175s; samplesPerSecond = 14285.7
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74901660 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0180s; samplesPerSecond = 13887.3
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.86809180 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0177s; samplesPerSecond = 14130.7
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.82510840 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0171s; samplesPerSecond = 14601.1
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.72418066 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0175s; samplesPerSecond = 14301.2
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.72361523 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0171s; samplesPerSecond = 14601.1
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70143164 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0174s; samplesPerSecond = 14387.7
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.69573828 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0173s; samplesPerSecond = 14478.5
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.69309766 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0174s; samplesPerSecond = 14392.6
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.72553418 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0174s; samplesPerSecond = 14356.3
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.73060254 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0175s; samplesPerSecond = 14322.5
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69694336 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0175s; samplesPerSecond = 14292.2
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70959375 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0178s; samplesPerSecond = 14072.6
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.70739453 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0175s; samplesPerSecond = 14307.0
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70199219 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0179s; samplesPerSecond = 13940.0
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70068359 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0175s; samplesPerSecond = 14315.2
08/04/2016 09:19:09:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.71364648 * 250; EvalErrorPrediction = 0.57200000 * 250; time = 0.0175s; samplesPerSecond = 14273.5
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.70387891 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0176s; samplesPerSecond = 14194.9
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.70170117 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0180s; samplesPerSecond = 13892.7
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.70699805 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0177s; samplesPerSecond = 14141.1
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.70372266 * 250; EvalErrorPrediction = 0.52800000 * 250; time = 0.0175s; samplesPerSecond = 14319.3
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.70533398 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0176s; samplesPerSecond = 14243.4
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69420117 * 250; EvalErrorPrediction = 0.42800000 * 250; time = 0.0176s; samplesPerSecond = 14168.3
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.69292773 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0174s; samplesPerSecond = 14371.9
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.68997656 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0174s; samplesPerSecond = 14377.7
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.71021680 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0174s; samplesPerSecond = 14408.4
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.69446484 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0175s; samplesPerSecond = 14288.2
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.68870898 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0172s; samplesPerSecond = 14556.0
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.67341602 * 250; EvalErrorPrediction = 0.32800000 * 250; time = 0.0177s; samplesPerSecond = 14121.9
08/04/2016 09:19:10:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.66508203 * 250; EvalErrorPrediction = 0.16800000 * 250; time = 0.0174s; samplesPerSecond = 14387.7
08/04/2016 09:19:10: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.71570225 * 10000; EvalErrorPrediction = 0.49410000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.703535s
08/04/2016 09:19:10: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn.1'

08/04/2016 09:19:10: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/04/2016 09:19:10: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.65606458 * 250; EvalErrorPrediction = 0.43200000 * 250; time = 0.0421s; samplesPerSecond = 5935.1
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.64762157 * 250; EvalErrorPrediction = 0.15200000 * 250; time = 0.0393s; samplesPerSecond = 6353.7
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.63819788 * 250; EvalErrorPrediction = 0.12400000 * 250; time = 0.0396s; samplesPerSecond = 6310.7
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.62867163 * 250; EvalErrorPrediction = 0.23600000 * 250; time = 0.0399s; samplesPerSecond = 6272.1
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.61672596 * 250; EvalErrorPrediction = 0.18400000 * 250; time = 0.0400s; samplesPerSecond = 6246.4
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.61136195 * 250; EvalErrorPrediction = 0.19200000 * 250; time = 0.0399s; samplesPerSecond = 6264.6
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.58460418 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0398s; samplesPerSecond = 6278.9
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.56167089 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0400s; samplesPerSecond = 6255.2
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.54178820 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0400s; samplesPerSecond = 6246.9
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.51962791 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0400s; samplesPerSecond = 6254.5
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.49103774 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0399s; samplesPerSecond = 6267.2
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.43947415 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0401s; samplesPerSecond = 6232.2
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.41244278 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0400s; samplesPerSecond = 6253.0
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.40551966 * 250; EvalErrorPrediction = 0.14000000 * 250; time = 0.0397s; samplesPerSecond = 6303.9
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.38404481 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0401s; samplesPerSecond = 6238.6
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.33224253 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0399s; samplesPerSecond = 6267.7
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.29258861 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0393s; samplesPerSecond = 6355.5
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.32003818 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0380s; samplesPerSecond = 6574.6
08/04/2016 09:19:10:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.25319035 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0384s; samplesPerSecond = 6514.0
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.23417364 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0398s; samplesPerSecond = 6288.7
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.24222992 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0403s; samplesPerSecond = 6199.2
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.19921862 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0400s; samplesPerSecond = 6250.6
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.20636665 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0400s; samplesPerSecond = 6253.0
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.18887167 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0399s; samplesPerSecond = 6262.5
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.18745312 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0399s; samplesPerSecond = 6262.8
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.18289221 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0397s; samplesPerSecond = 6299.3
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.18796674 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0392s; samplesPerSecond = 6375.6
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.20287825 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0390s; samplesPerSecond = 6411.9
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.19195067 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0393s; samplesPerSecond = 6357.3
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.17604074 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0394s; samplesPerSecond = 6338.1
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.19544093 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0396s; samplesPerSecond = 6308.4
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14786548 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0394s; samplesPerSecond = 6339.7
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.16522937 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0396s; samplesPerSecond = 6319.0
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.15760806 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0394s; samplesPerSecond = 6346.3
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.19912716 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0400s; samplesPerSecond = 6247.0
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13564869 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0400s; samplesPerSecond = 6249.8
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18309655 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0400s; samplesPerSecond = 6256.1
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15595176 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0400s; samplesPerSecond = 6246.9
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13070632 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0400s; samplesPerSecond = 6253.9
08/04/2016 09:19:11:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.13914936 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0403s; samplesPerSecond = 6196.9
08/04/2016 09:19:11: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.32866949 * 10000; EvalErrorPrediction = 0.10210000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=1.59287s
08/04/2016 09:19:11: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn.2'

08/04/2016 09:19:11: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/04/2016 09:19:11: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
08/04/2016 09:19:11:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18077906 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0399s; samplesPerSecond = 6267.9
08/04/2016 09:19:11:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.16113051 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0395s; samplesPerSecond = 6321.4
08/04/2016 09:19:11:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.11521442 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0398s; samplesPerSecond = 6284.4
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16649158 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0400s; samplesPerSecond = 6249.8
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.13695540 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0402s; samplesPerSecond = 6218.6
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.18780659 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0400s; samplesPerSecond = 6251.6
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.14372000 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0399s; samplesPerSecond = 6258.1
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.20167735 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0399s; samplesPerSecond = 6263.0
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.13450781 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0399s; samplesPerSecond = 6260.8
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.16807289 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0400s; samplesPerSecond = 6244.4
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14838763 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0401s; samplesPerSecond = 6235.0
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.19108144 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0398s; samplesPerSecond = 6275.3
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.17191786 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0400s; samplesPerSecond = 6255.6
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.14498571 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0398s; samplesPerSecond = 6284.4
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.19910357 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0401s; samplesPerSecond = 6238.6
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.17052425 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0399s; samplesPerSecond = 6259.9
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14455982 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0399s; samplesPerSecond = 6273.2
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18285871 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0399s; samplesPerSecond = 6261.0
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.17116587 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0400s; samplesPerSecond = 6248.1
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17447576 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0401s; samplesPerSecond = 6239.4
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.17342147 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0398s; samplesPerSecond = 6287.4
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13629722 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0397s; samplesPerSecond = 6292.9
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15675417 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0396s; samplesPerSecond = 6305.3
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.18055417 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0395s; samplesPerSecond = 6333.0
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.15885388 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0398s; samplesPerSecond = 6283.6
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.20146835 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0398s; samplesPerSecond = 6284.2
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16691803 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0392s; samplesPerSecond = 6375.4
08/04/2016 09:19:12:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13605666 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0400s; samplesPerSecond = 6255.5
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.14472687 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0401s; samplesPerSecond = 6227.7
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.13398276 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0396s; samplesPerSecond = 6312.5
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.13997345 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0409s; samplesPerSecond = 6112.0
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13337033 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0402s; samplesPerSecond = 6217.4
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15817814 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0400s; samplesPerSecond = 6256.3
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14059459 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0398s; samplesPerSecond = 6287.6
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.18303018 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0401s; samplesPerSecond = 6228.2
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13675992 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0399s; samplesPerSecond = 6266.4
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14834970 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0399s; samplesPerSecond = 6265.7
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14456724 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0401s; samplesPerSecond = 6238.6
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13680651 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0399s; samplesPerSecond = 6266.6
08/04/2016 09:19:13:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17949508 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0403s; samplesPerSecond = 6208.6
08/04/2016 09:19:13: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15963937 * 10000; EvalErrorPrediction = 0.07450000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=1.59892s
08/04/2016 09:19:13: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804091805.204544\Examples\Other\Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn'
08/04/2016 09:19:13: CNTKCommandTrainEnd: Multigpu_Demo_Train

08/04/2016 09:19:13: Action "train" complete.


08/04/2016 09:19:13: ##############################################################################
08/04/2016 09:19:13: #                                                                            #
08/04/2016 09:19:13: # Action "test"                                                              #
08/04/2016 09:19:13: #                                                                            #
08/04/2016 09:19:13: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0000007ED8023610: {[B2 Value[2 x 1]] }
0000007ED8023A70: {[MeanOfFeatures Value[2]] }
0000007ED8023D90: {[InvStdOfFeatures Value[2]] }
0000007ED8024150: {[W0 Value[50 x 2]] }
0000007ED80243D0: {[W1 Value[50 x 50]] }
0000007ED8024510: {[labels Value[2 x *1]] }
0000007ED80245B0: {[B1 Value[50 x 1]] }
0000007ED80246F0: {[Prior Value[2]] }
0000007ED8024830: {[features Value[2 x *1]] }
0000007ED8024D30: {[W2 Value[2 x 50]] }
0000007ED8024E70: {[B0 Value[50 x 1]] }
0000007EE9904440: {[LogOfPrior Value[2]] }
0000007EE99044E0: {[W0*features+B0 Value[50 x 1 x *1]] }
0000007EE99048A0: {[EvalErrorPrediction Value[1]] }
0000007EE9904DA0: {[W0*features Value[50 x *1]] }
0000007EE9904EE0: {[W2*H1 Value[2 x 1 x *1]] }
0000007EE99052A0: {[MVNormalizedFeatures Value[2 x *1]] }
0000007EE9905340: {[W1*H1+B1 Value[50 x 1 x *1]] }
0000007EE99053E0: {[H1 Value[50 x 1 x *1]] }
0000007EE9905C00: {[H2 Value[50 x 1 x *1]] }
0000007EE9905CA0: {[HLast Value[2 x 1 x *1]] }
0000007EE9905DE0: {[CrossEntropyWithSoftmax Value[1]] }
0000007EE9905F20: {[W1*H1 Value[50 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
Actual gradient aggregation time: 6.9e-005
08/04/2016 09:19:13: Minibatch[1-1]: EvalErrorPrediction = 0.02985075 * 603; CrossEntropyWithSoftmax = 0.08770187 * 603
08/04/2016 09:19:13: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.02985075 * 603; CrossEntropyWithSoftmax = 0.08770187 * 603; perplexity = 1.09166262

08/04/2016 09:19:13: Action "test" complete.

08/04/2016 09:19:13: __COMPLETED__
~MPIWrapper