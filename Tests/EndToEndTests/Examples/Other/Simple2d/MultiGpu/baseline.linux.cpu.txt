CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu DeviceId=-1 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
08/04/2016 13:55:23: -------------------------------------------------------------------
08/04/2016 13:55:23: Build info: 

08/04/2016 13:55:23: 		Built time: Aug  4 2016 13:07:13
08/04/2016 13:55:23: 		Last modified date: Thu Aug  4 10:38:25 2016
08/04/2016 13:55:23: 		Build type: release
08/04/2016 13:55:23: 		Build target: GPU
08/04/2016 13:55:23: 		With 1bit-SGD: yes
08/04/2016 13:55:23: 		Math lib: mkl
08/04/2016 13:55:23: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 13:55:23: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 13:55:23: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 13:55:23: 		Build Branch: HEAD
08/04/2016 13:55:23: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 13:55:23: 		Built by philly on ee6c20c358b8
08/04/2016 13:55:23: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 13:55:23: -------------------------------------------------------------------
08/04/2016 13:55:25: -------------------------------------------------------------------
08/04/2016 13:55:25: GPU info:

08/04/2016 13:55:25: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:25: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:25: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:25: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:25: -------------------------------------------------------------------

08/04/2016 13:55:25: Running on localhost at 2016/08/04 13:55:25
08/04/2016 13:55:25: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config/Multigpu.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config  OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu  DeviceId=-1  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



08/04/2016 13:55:25: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:55:25: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 13:55:25: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:55:25: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:55:25: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 13:55:25: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:55:25: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/MultiGpu/../../../../../../Examples/Other/Simple2d/Config
configparameters: Multigpu.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:deviceId=-1
configparameters: Multigpu.cntk:ModelDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/Models
configparameters: Multigpu.cntk:modelPath=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
08/04/2016 13:55:25: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 13:55:25: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
08/04/2016 13:55:25: Precision = "float"
08/04/2016 13:55:25: CNTKModelPath: /tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
08/04/2016 13:55:25: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
08/04/2016 13:55:25: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 13:55:25: ##############################################################################
08/04/2016 13:55:25: #                                                                            #
08/04/2016 13:55:25: # Action "train"                                                             #
08/04/2016 13:55:25: #                                                                            #
08/04/2016 13:55:25: ##############################################################################

08/04/2016 13:55:25: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using CPU

08/04/2016 13:55:25: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 13:55:25: Created model with 25 nodes on CPU.

08/04/2016 13:55:25: Training criterion node(s):
08/04/2016 13:55:25: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/04/2016 13:55:25: Evaluation criterion node(s):

08/04/2016 13:55:25: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x253ccb8: {[features Value[2 x *]] }
0x276a368: {[MeanOfFeatures Value[2]] }
0x276afb8: {[InvStdOfFeatures Value[2]] }
0x276bca8: {[W0 Value[50 x 2]] }
0x276c278: {[B0 Value[50 x 1]] }
0x276d068: {[W1 Value[50 x 50]] }
0x276fbb8: {[B1 Value[50 x 1]] }
0x2770a98: {[W2 Value[2 x 50]] }
0x2771068: {[B2 Value[2 x 1]] }
0x2771b48: {[labels Value[2 x *]] }
0x27728c8: {[Prior Value[2]] }
0x27781d8: {[EvalErrorPrediction Value[1]] }
0x2778378: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x2778538: {[CrossEntropyWithSoftmax Value[1]] }
0x2778a88: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x2778bf8: {[LogOfPrior Value[2]] }
0x277a358: {[MVNormalizedFeatures Value[2 x *]] }
0x277ab18: {[W0*features Value[50 x *]] }
0x277ad28: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x277aee8: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x277b0a8: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x277b268: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x277b428: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x277b5e8: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x277c148: {[CrossEntropyWithSoftmax Gradient[1]] }
0x277c308: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x277c4c8: {[W2*H1 Gradient[2 x 1 x *]] }
0x277c688: {[B2 Gradient[2 x 1]] }


08/04/2016 13:55:25: Precomputing --> 3 PreCompute nodes found.

08/04/2016 13:55:25: 	MeanOfFeatures = Mean()
08/04/2016 13:55:25: 	InvStdOfFeatures = InvStdDev()
08/04/2016 13:55:25: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 13:55:25: Precomputing --> Completed.


08/04/2016 13:55:25: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 13:55:25: Starting minibatch loop.
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.71180627 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0717s; samplesPerSecond = 3484.6
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.73593127 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0282s; samplesPerSecond = 8880.0
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70349194 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0136s; samplesPerSecond = 18331.1
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.74209155 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0209s; samplesPerSecond = 11950.9
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.74485010 * 250; EvalErrorPrediction = 0.58000000 * 250; time = 0.0169s; samplesPerSecond = 14833.3
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.71670825 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0209s; samplesPerSecond = 11983.5
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.70175635 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0137s; samplesPerSecond = 18293.6
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.72852002 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0145s; samplesPerSecond = 17296.3
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72082910 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0168s; samplesPerSecond = 14900.5
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.71396533 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0139s; samplesPerSecond = 17957.2
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70685742 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0138s; samplesPerSecond = 18100.2
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74966406 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0716s; samplesPerSecond = 3490.5
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.86757520 * 250; EvalErrorPrediction = 0.56800000 * 250; time = 0.0148s; samplesPerSecond = 16846.4
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.82215039 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0109s; samplesPerSecond = 22961.1
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.72304492 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0168s; samplesPerSecond = 14880.1
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.72316211 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0168s; samplesPerSecond = 14918.2
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70117480 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0261s; samplesPerSecond = 9589.2
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.69559277 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0106s; samplesPerSecond = 23485.2
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.69298633 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0170s; samplesPerSecond = 14738.0
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.72534570 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0168s; samplesPerSecond = 14861.5
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.73046191 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0208s; samplesPerSecond = 11996.2
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69667383 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0133s; samplesPerSecond = 18809.7
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70928223 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0169s; samplesPerSecond = 14757.1
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.70710547 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0138s; samplesPerSecond = 18159.4
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70161328 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0171s; samplesPerSecond = 14649.9
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70020703 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0199s; samplesPerSecond = 12543.9
08/04/2016 13:55:25:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.71318164 * 250; EvalErrorPrediction = 0.57200000 * 250; time = 0.0329s; samplesPerSecond = 7589.1
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.70337500 * 250; EvalErrorPrediction = 0.45200000 * 250; time = 0.0214s; samplesPerSecond = 11695.4
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.70067383 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0190s; samplesPerSecond = 13139.2
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.70614258 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0169s; samplesPerSecond = 14808.7
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.70261133 * 250; EvalErrorPrediction = 0.52800000 * 250; time = 0.0137s; samplesPerSecond = 18213.6
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.70384375 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0294s; samplesPerSecond = 8504.3
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69216797 * 250; EvalErrorPrediction = 0.42000000 * 250; time = 0.0496s; samplesPerSecond = 5037.1
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.68958203 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0571s; samplesPerSecond = 4377.0
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.68496289 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0288s; samplesPerSecond = 8691.4
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.70399414 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0141s; samplesPerSecond = 17767.0
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.68649609 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0180s; samplesPerSecond = 13910.5
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.67689648 * 250; EvalErrorPrediction = 0.44000000 * 250; time = 0.0171s; samplesPerSecond = 14615.6
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.65426953 * 250; EvalErrorPrediction = 0.25200000 * 250; time = 0.0168s; samplesPerSecond = 14849.1
08/04/2016 13:55:26:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.63557617 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0210s; samplesPerSecond = 11878.7
08/04/2016 13:55:26: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.71316553 * 10000; EvalErrorPrediction = 0.48640000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.909981s
08/04/2016 13:55:26: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.1'

08/04/2016 13:55:26: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/04/2016 13:55:26: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.60984246 * 250; EvalErrorPrediction = 0.25200000 * 250; time = 0.0241s; samplesPerSecond = 10364.8
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.58826140 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0150s; samplesPerSecond = 16662.2
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.56657994 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0207s; samplesPerSecond = 12068.5
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.53496020 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0250s; samplesPerSecond = 10012.8
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.51136577 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0188s; samplesPerSecond = 13270.3
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.48949160 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0223s; samplesPerSecond = 11231.9
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.43609760 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0210s; samplesPerSecond = 11924.1
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.40240205 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0180s; samplesPerSecond = 13882.7
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.35902133 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0180s; samplesPerSecond = 13910.5
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.34261992 * 250; EvalErrorPrediction = 0.12400000 * 250; time = 0.0181s; samplesPerSecond = 13845.8
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.30814949 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0174s; samplesPerSecond = 14326.6
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.25891358 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0209s; samplesPerSecond = 11961.2
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.26468305 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0218s; samplesPerSecond = 11485.3
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.27280469 * 250; EvalErrorPrediction = 0.12400000 * 250; time = 0.0218s; samplesPerSecond = 11455.3
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.26075676 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0353s; samplesPerSecond = 7090.2
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.21673628 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0148s; samplesPerSecond = 16899.9
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.20166129 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0178s; samplesPerSecond = 14037.8
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.24836576 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0177s; samplesPerSecond = 14086.9
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.20303750 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0274s; samplesPerSecond = 9139.4
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.18237879 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0148s; samplesPerSecond = 16891.9
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.19605028 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0209s; samplesPerSecond = 11952.0
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.16390019 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0177s; samplesPerSecond = 14117.9
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.18123733 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0208s; samplesPerSecond = 12025.6
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.16410544 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0179s; samplesPerSecond = 13969.6
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.16400304 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0194s; samplesPerSecond = 12917.2
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.16129848 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0208s; samplesPerSecond = 11996.7
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.17472508 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0178s; samplesPerSecond = 14067.1
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.19118966 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0184s; samplesPerSecond = 13592.1
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.17919790 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0213s; samplesPerSecond = 11758.6
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.16470148 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0213s; samplesPerSecond = 11716.2
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.18931512 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0250s; samplesPerSecond = 10008.0
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14086536 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0179s; samplesPerSecond = 13978.2
08/04/2016 13:55:26:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15654529 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0277s; samplesPerSecond = 9035.4
08/04/2016 13:55:27:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14988725 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0276s; samplesPerSecond = 9073.1
08/04/2016 13:55:27:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.19741118 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0148s; samplesPerSecond = 16849.8
08/04/2016 13:55:27:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13155175 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0179s; samplesPerSecond = 13972.7
08/04/2016 13:55:27:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18222240 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0210s; samplesPerSecond = 11877.6
08/04/2016 13:55:27:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15339981 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0148s; samplesPerSecond = 16948.0
08/04/2016 13:55:27:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.12647946 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0177s; samplesPerSecond = 14086.9
08/04/2016 13:55:27:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.13563517 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0344s; samplesPerSecond = 7273.6
08/04/2016 13:55:27: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.26404628 * 10000; EvalErrorPrediction = 0.08180000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.829468s
08/04/2016 13:55:27: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.2'

08/04/2016 13:55:27: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/04/2016 13:55:27: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18043166 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0175s; samplesPerSecond = 14325.0
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.15959404 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0175s; samplesPerSecond = 14298.8
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.11197311 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0231s; samplesPerSecond = 10838.5
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16539350 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0303s; samplesPerSecond = 8255.7
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.13447855 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0116s; samplesPerSecond = 21618.8
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.18804308 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0221s; samplesPerSecond = 11330.7
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.14277089 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0186s; samplesPerSecond = 13453.2
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.20140945 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0253s; samplesPerSecond = 9897.5
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.13481723 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0194s; samplesPerSecond = 12919.9
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.16735080 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0256s; samplesPerSecond = 9778.2
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14835800 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0356s; samplesPerSecond = 7027.0
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.19052789 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0361s; samplesPerSecond = 6919.5
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.17146078 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0358s; samplesPerSecond = 6986.9
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.14513920 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0575s; samplesPerSecond = 4345.7
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.19846239 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0659s; samplesPerSecond = 3796.0
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.16920616 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0674s; samplesPerSecond = 3709.9
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14497345 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0376s; samplesPerSecond = 6640.6
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18319743 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0338s; samplesPerSecond = 7403.0
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.17100097 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0337s; samplesPerSecond = 7420.8
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17518508 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0342s; samplesPerSecond = 7311.9
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.17328011 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0516s; samplesPerSecond = 4849.6
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13546787 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0663s; samplesPerSecond = 3770.2
08/04/2016 13:55:27:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15676585 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0663s; samplesPerSecond = 3770.3
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.18059172 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0662s; samplesPerSecond = 3775.3
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.15798730 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0701s; samplesPerSecond = 3567.7
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.20033480 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0742s; samplesPerSecond = 3369.1
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16739316 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0671s; samplesPerSecond = 3727.3
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13441415 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0664s; samplesPerSecond = 3762.9
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.14444018 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0529s; samplesPerSecond = 4722.0
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.13378916 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0339s; samplesPerSecond = 7367.0
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.13961139 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0338s; samplesPerSecond = 7386.4
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13320160 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0355s; samplesPerSecond = 7050.4
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15760973 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0310s; samplesPerSecond = 8054.1
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14040818 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0180s; samplesPerSecond = 13898.9
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.18262730 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0206s; samplesPerSecond = 12141.8
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13701284 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0179s; samplesPerSecond = 14001.7
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14846803 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0208s; samplesPerSecond = 12006.0
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14459666 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0303s; samplesPerSecond = 8242.7
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13655855 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0259s; samplesPerSecond = 9634.3
08/04/2016 13:55:28:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17961145 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0209s; samplesPerSecond = 11969.2
08/04/2016 13:55:28: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15919859 * 10000; EvalErrorPrediction = 0.07510000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=1.52563s
08/04/2016 13:55:28: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn'
08/04/2016 13:55:28: CNTKCommandTrainEnd: Multigpu_Demo_Train

08/04/2016 13:55:28: Action "train" complete.


08/04/2016 13:55:28: ##############################################################################
08/04/2016 13:55:28: #                                                                            #
08/04/2016 13:55:28: # Action "test"                                                              #
08/04/2016 13:55:28: #                                                                            #
08/04/2016 13:55:28: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x7f92a8646cc8: {[CrossEntropyWithSoftmax Value[1]] }
0x7f92a8647218: {[B0 Value[50 x 1]] }
0x7f92a8647928: {[B1 Value[50 x 1]] }
0x7f92a8647e88: {[B2 Value[2 x 1]] }
0x7f92a8648e28: {[features Value[2 x *1]] }
0x7f92a8649bc8: {[InvStdOfFeatures Value[2]] }
0x7f92a864a5b8: {[labels Value[2 x *1]] }
0x7f92a864ae18: {[MeanOfFeatures Value[2]] }
0x7f92a864b948: {[Prior Value[2]] }
0x7f92a864bbc8: {[W0 Value[50 x 2]] }
0x7f92a864c558: {[W1 Value[50 x 50]] }
0x7f92a864d638: {[W2 Value[2 x 50]] }
0x7f92a8655178: {[EvalErrorPrediction Value[1]] }
0x7f92a8655808: {[LogOfPrior Value[2]] }
0x7f92a8656718: {[MVNormalizedFeatures Value[2 x *1]] }
0x7f92a8656e68: {[W0*features Value[50 x *1]] }
0x7f92a8656f68: {[W0*features+B0 Value[50 x 1 x *1]] }
0x7f92a8657398: {[H1 Value[50 x 1 x *1]] }
0x7f92a8657558: {[W1*H1 Value[50 x 1 x *1]] }
0x7f92a8657718: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x7f92a86578d8: {[H2 Value[50 x 1 x *1]] }
0x7f92a8657a98: {[W2*H1 Value[2 x 1 x *1]] }
0x7f92a8657c58: {[HLast Value[2 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
Actual gradient aggregation time: 0.000156
08/04/2016 13:55:28: Minibatch[1-1]: EvalErrorPrediction = 0.03150912 * 603; CrossEntropyWithSoftmax = 0.08774310 * 603
08/04/2016 13:55:28: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.03150912 * 603; CrossEntropyWithSoftmax = 0.08774310 * 603; perplexity = 1.09170763

08/04/2016 13:55:28: Action "test" complete.

08/04/2016 13:55:28: __COMPLETED__
~MPIWrapper