CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Simple.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu DeviceId=0 timestamping=true Simple_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 06:18:04
		Last modified date: Thu Aug  4 03:39:14 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by svcphil on dphaim-26-new
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@3\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
08/04/2016 08:08:57: -------------------------------------------------------------------
08/04/2016 08:08:57: Build info: 

08/04/2016 08:08:57: 		Built time: Aug  4 2016 06:18:04
08/04/2016 08:08:57: 		Last modified date: Thu Aug  4 03:39:14 2016
08/04/2016 08:08:57: 		Build type: Release
08/04/2016 08:08:57: 		Build target: GPU
08/04/2016 08:08:57: 		With 1bit-SGD: no
08/04/2016 08:08:57: 		Math lib: mkl
08/04/2016 08:08:57: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/04/2016 08:08:57: 		CUB_PATH: C:\src\cub-1.4.1
08/04/2016 08:08:57: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/04/2016 08:08:57: 		Build Branch: HEAD
08/04/2016 08:08:57: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 08:08:57: 		Built by svcphil on dphaim-26-new
08/04/2016 08:08:57: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@3\Source\CNTK\
08/04/2016 08:08:57: -------------------------------------------------------------------
08/04/2016 08:08:57: -------------------------------------------------------------------
08/04/2016 08:08:57: GPU info:

08/04/2016 08:08:57: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
08/04/2016 08:08:57: -------------------------------------------------------------------

08/04/2016 08:08:57: Running on cntk-muc01 at 2016/08/04 08:08:57
08/04/2016 08:08:57: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Simple.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu  DeviceId=0  timestamping=true  Simple_Demo_Train=[SGD=[maxEpochs=3]]



08/04/2016 08:08:57: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 08:08:57: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "$OutputDir$/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "$DataDir$/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu
DeviceId=0
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 08:08:57: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 08:08:57: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 08:08:57: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/Models/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu
DeviceId=0
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 08:08:57: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 08:08:57: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Simple.cntk:command=Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
configparameters: Simple.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
configparameters: Simple.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Simple.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Simple.cntk:deviceId=0
configparameters: Simple.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/Models
configparameters: Simple.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/Models/simple.dnn
configparameters: Simple.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu
configparameters: Simple.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Simple.cntk:precision=float
configparameters: Simple.cntk:RootDir=..
configparameters: Simple.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu
configparameters: Simple.cntk:Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]

configparameters: Simple.cntk:Simple_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Simple.cntk:Simple_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Simple.cntk:timestamping=true
configparameters: Simple.cntk:traceLevel=1
08/04/2016 08:08:57: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 08:08:57: Commands: Simple_Demo_Train Simple_Demo_Test Simple_Demo_Output
08/04/2016 08:08:57: Precision = "float"
08/04/2016 08:08:57: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/Models/simple.dnn
08/04/2016 08:08:57: CNTKCommandTrainInfo: Simple_Demo_Train : 3
08/04/2016 08:08:57: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 08:08:57: ##############################################################################
08/04/2016 08:08:57: #                                                                            #
08/04/2016 08:08:57: # Action "train"                                                             #
08/04/2016 08:08:57: #                                                                            #
08/04/2016 08:08:57: ##############################################################################

08/04/2016 08:08:57: CNTKCommandTrainBegin: Simple_Demo_Train
SimpleNetworkBuilder Using GPU 0

08/04/2016 08:08:57: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 08:08:58: Created model with 25 nodes on GPU 0.

08/04/2016 08:08:58: Training criterion node(s):
08/04/2016 08:08:58: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/04/2016 08:08:58: Evaluation criterion node(s):

08/04/2016 08:08:58: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
00000005ABC2BFC0: {[features Value[2 x *]] }
00000005BDEF4CC0: {[InvStdOfFeatures Value[2]] }
00000005BDEF4FE0: {[W0 Value[50 x 2]] }
00000005BDEF5940: {[B0 Value[50 x 1]] }
00000005BDEF6200: {[W1 Value[50 x 50]] }
00000005BDEF6340: {[MeanOfFeatures Value[2]] }
00000005BDEF6660: {[B1 Value[50 x 1]] }
00000005BE313670: {[W2 Value[2 x 50]] }
00000005BE3138F0: {[CrossEntropyWithSoftmax Value[1]] }
00000005BE313B70: {[ScaledLogLikelihood Value[2 x 1 x *]] }
00000005BE313C10: {[CrossEntropyWithSoftmax Gradient[1]] }
00000005BE313D50: {[W2*H1 Gradient[2 x 1 x *]] }
00000005BE313E90: {[W0*features Value[50 x *]] }
00000005BE313F30: {[labels Value[2 x *]] }
00000005BE314110: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
00000005BE314250: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
00000005BE3142F0: {[B2 Gradient[2 x 1]] }
00000005BE314570: {[EvalErrorPrediction Value[1]] }
00000005BE314610: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
00000005BE3146B0: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
00000005BE3147F0: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
00000005BE314A70: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
00000005BE314ED0: {[B2 Value[2 x 1]] }
00000005BE314F70: {[Prior Value[2]] }
00000005BE315150: {[MVNormalizedFeatures Value[2 x *]] }
00000005BE3151F0: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
00000005BE315330: {[LogOfPrior Value[2]] }
00000005BE3153D0: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }


08/04/2016 08:08:58: Precomputing --> 3 PreCompute nodes found.

08/04/2016 08:08:58: 	MeanOfFeatures = Mean()
08/04/2016 08:08:58: 	InvStdOfFeatures = InvStdDev()
08/04/2016 08:08:58: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 08:08:58: Precomputing --> Completed.


08/04/2016 08:08:58: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 08:08:58: Starting minibatch loop.
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.71882043 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0216s; samplesPerSecond = 11571.4
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.73075317 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0196s; samplesPerSecond = 12739.5
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70195178 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0200s; samplesPerSecond = 12489.4
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.74146509 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0199s; samplesPerSecond = 12563.4
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.74525684 * 250; EvalErrorPrediction = 0.58000000 * 250; time = 0.0196s; samplesPerSecond = 12757.1
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.71782935 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0191s; samplesPerSecond = 13056.9
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.70220215 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0202s; samplesPerSecond = 12353.6
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.72996240 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0183s; samplesPerSecond = 13673.9
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72194482 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0197s; samplesPerSecond = 12697.4
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.71382080 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0197s; samplesPerSecond = 12681.3
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70678320 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0198s; samplesPerSecond = 12600.2
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74901660 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0196s; samplesPerSecond = 12754.5
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.86809180 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0197s; samplesPerSecond = 12698.7
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.82510840 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0196s; samplesPerSecond = 12735.0
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.72418066 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0197s; samplesPerSecond = 12668.5
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.72361523 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0194s; samplesPerSecond = 12895.2
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70143164 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0189s; samplesPerSecond = 13211.4
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.69573828 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0168s; samplesPerSecond = 14876.5
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.69309766 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0192s; samplesPerSecond = 13054.1
08/04/2016 08:08:58:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.72553418 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0200s; samplesPerSecond = 12507.5
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.73060254 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0199s; samplesPerSecond = 12538.2
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69694336 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0199s; samplesPerSecond = 12591.3
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70959375 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0197s; samplesPerSecond = 12689.7
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.70739453 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0194s; samplesPerSecond = 12862.7
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70199219 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0193s; samplesPerSecond = 12926.6
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70068359 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0194s; samplesPerSecond = 12887.3
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.71364648 * 250; EvalErrorPrediction = 0.57200000 * 250; time = 0.0197s; samplesPerSecond = 12683.9
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.70387891 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0195s; samplesPerSecond = 12800.2
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.70170117 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0197s; samplesPerSecond = 12698.7
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.70699805 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0195s; samplesPerSecond = 12850.8
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.70372266 * 250; EvalErrorPrediction = 0.52800000 * 250; time = 0.0164s; samplesPerSecond = 15250.4
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.70533398 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0191s; samplesPerSecond = 13072.6
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69420117 * 250; EvalErrorPrediction = 0.42800000 * 250; time = 0.0199s; samplesPerSecond = 12560.9
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.69292773 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0200s; samplesPerSecond = 12510.0
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.68997656 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0199s; samplesPerSecond = 12588.1
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.71021680 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0198s; samplesPerSecond = 12598.9
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.69446484 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0192s; samplesPerSecond = 13013.4
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.68870898 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0195s; samplesPerSecond = 12803.4
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.67341602 * 250; EvalErrorPrediction = 0.32800000 * 250; time = 0.0198s; samplesPerSecond = 12645.4
08/04/2016 08:08:59:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.66508203 * 250; EvalErrorPrediction = 0.16800000 * 250; time = 0.0195s; samplesPerSecond = 12842.9
08/04/2016 08:08:59: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.71570225 * 10000; EvalErrorPrediction = 0.49410000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.782296s
08/04/2016 08:08:59: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/Models/simple.dnn.1'

08/04/2016 08:08:59: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/04/2016 08:08:59: Starting minibatch loop.
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.65599969 * 250; EvalErrorPrediction = 0.43200000 * 250; time = 0.0204s; samplesPerSecond = 12244.1
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.64737152 * 250; EvalErrorPrediction = 0.14400000 * 250; time = 0.0195s; samplesPerSecond = 12806.7
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.63773108 * 250; EvalErrorPrediction = 0.12000000 * 250; time = 0.0189s; samplesPerSecond = 13219.1
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.62781836 * 250; EvalErrorPrediction = 0.23600000 * 250; time = 0.0165s; samplesPerSecond = 15193.9
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.61534375 * 250; EvalErrorPrediction = 0.19600000 * 250; time = 0.0173s; samplesPerSecond = 14425.0
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.60942896 * 250; EvalErrorPrediction = 0.18800000 * 250; time = 0.0180s; samplesPerSecond = 13885.0
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.58207617 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0201s; samplesPerSecond = 12417.4
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.55878760 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0184s; samplesPerSecond = 13572.2
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.53771777 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0200s; samplesPerSecond = 12508.8
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.51471191 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0189s; samplesPerSecond = 13194.0
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.48663721 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0200s; samplesPerSecond = 12508.8
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.43422266 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0200s; samplesPerSecond = 12482.5
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.40550342 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0199s; samplesPerSecond = 12584.3
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.39532568 * 250; EvalErrorPrediction = 0.14800000 * 250; time = 0.0198s; samplesPerSecond = 12642.9
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.37977588 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0202s; samplesPerSecond = 12390.3
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.32332471 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0203s; samplesPerSecond = 12303.1
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.28772363 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0202s; samplesPerSecond = 12405.7
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.31419824 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0191s; samplesPerSecond = 13071.2
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.24966211 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0189s; samplesPerSecond = 13238.0
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.23059082 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0190s; samplesPerSecond = 13159.3
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.23868848 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0182s; samplesPerSecond = 13720.4
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.19674902 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0186s; samplesPerSecond = 13443.8
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.20635449 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0186s; samplesPerSecond = 13425.0
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.18781445 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0188s; samplesPerSecond = 13332.6
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.18553223 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0187s; samplesPerSecond = 13343.3
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.18162988 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0184s; samplesPerSecond = 13578.1
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.18604785 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0185s; samplesPerSecond = 13488.7
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.20210156 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0186s; samplesPerSecond = 13404.8
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.18954492 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0184s; samplesPerSecond = 13584.7
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.17442773 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0188s; samplesPerSecond = 13326.9
08/04/2016 08:08:59:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.19605859 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0191s; samplesPerSecond = 13121.3
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14854199 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0189s; samplesPerSecond = 13197.5
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.16501563 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0190s; samplesPerSecond = 13175.9
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.15824023 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0185s; samplesPerSecond = 13550.1
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.19857324 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0189s; samplesPerSecond = 13201.0
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13599902 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0188s; samplesPerSecond = 13313.5
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18236230 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0188s; samplesPerSecond = 13316.3
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15452051 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0190s; samplesPerSecond = 13183.6
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13171680 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0189s; samplesPerSecond = 13235.2
08/04/2016 08:09:00:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.13999023 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0182s; samplesPerSecond = 13730.2
08/04/2016 08:09:00: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.32634651 * 10000; EvalErrorPrediction = 0.10090000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.760573s
08/04/2016 08:09:00: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/Models/simple.dnn.2'

08/04/2016 08:09:00: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/04/2016 08:09:00: Starting minibatch loop.
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18034673 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0204s; samplesPerSecond = 12228.5
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.16120363 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0196s; samplesPerSecond = 12755.8
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.11593542 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0185s; samplesPerSecond = 13536.9
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16610974 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0190s; samplesPerSecond = 13160.7
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.13637207 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0178s; samplesPerSecond = 14043.4
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.18853754 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0170s; samplesPerSecond = 14676.5
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.14470251 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0193s; samplesPerSecond = 12936.6
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.20182983 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0197s; samplesPerSecond = 12715.5
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.13468726 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0182s; samplesPerSecond = 13752.1
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.16711707 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0187s; samplesPerSecond = 13397.6
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14737134 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0195s; samplesPerSecond = 12799.5
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.18846606 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0193s; samplesPerSecond = 12940.6
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.16995166 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0196s; samplesPerSecond = 12722.6
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.14084619 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0190s; samplesPerSecond = 13144.1
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.19002344 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0193s; samplesPerSecond = 12983.6
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.17097485 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0191s; samplesPerSecond = 13065.1
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14279517 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0194s; samplesPerSecond = 12907.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18353711 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0194s; samplesPerSecond = 12893.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.17142773 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0193s; samplesPerSecond = 12929.9
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17531250 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0178s; samplesPerSecond = 14079.7
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.17361060 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0187s; samplesPerSecond = 13342.6
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13674609 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0196s; samplesPerSecond = 12738.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15603247 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0194s; samplesPerSecond = 12901.9
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.17896729 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0195s; samplesPerSecond = 12848.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.15771875 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0196s; samplesPerSecond = 12767.5
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.20094092 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0192s; samplesPerSecond = 13018.8
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16060107 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0196s; samplesPerSecond = 12757.7
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13768408 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0195s; samplesPerSecond = 12831.0
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.14508301 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0176s; samplesPerSecond = 14214.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.13299756 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0183s; samplesPerSecond = 13679.1
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.14154687 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0194s; samplesPerSecond = 12917.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13292676 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0197s; samplesPerSecond = 12696.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15860498 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0196s; samplesPerSecond = 12777.3
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14054102 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0194s; samplesPerSecond = 12902.6
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.18226709 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0195s; samplesPerSecond = 12850.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13772705 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0196s; samplesPerSecond = 12740.8
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14827881 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0186s; samplesPerSecond = 13414.2
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14563770 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0196s; samplesPerSecond = 12756.4
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13642676 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0194s; samplesPerSecond = 12863.4
08/04/2016 08:09:00:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17906006 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0193s; samplesPerSecond = 12955.4
08/04/2016 08:09:00: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15902367 * 10000; EvalErrorPrediction = 0.07480000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=0.766437s
08/04/2016 08:09:00: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/Models/simple.dnn'
08/04/2016 08:09:00: CNTKCommandTrainEnd: Simple_Demo_Train

08/04/2016 08:09:00: Action "train" complete.


08/04/2016 08:09:00: ##############################################################################
08/04/2016 08:09:00: #                                                                            #
08/04/2016 08:09:00: # Action "test"                                                              #
08/04/2016 08:09:00: #                                                                            #
08/04/2016 08:09:00: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
00000005ABC2BDE0: {[EvalErrorPrediction Value[1]] }
00000005ABC2BF20: {[CrossEntropyWithSoftmax Value[1]] }
00000005ABC2BFC0: {[LogOfPrior Value[2]] }
00000005BDEF4CC0: {[Prior Value[2]] }
00000005BDEF5260: {[W1 Value[50 x 50]] }
00000005BDEF5940: {[W0 Value[50 x 2]] }
00000005BDEF6660: {[W2 Value[2 x 50]] }
00000005BE7EA050: {[B1 Value[50 x 1]] }
00000005BE7EA190: {[B2 Value[2 x 1]] }
00000005BE7EA230: {[InvStdOfFeatures Value[2]] }
00000005BE7EA7D0: {[labels Value[2 x *1]] }
00000005BE7EAB90: {[B0 Value[50 x 1]] }
00000005BE7EB810: {[features Value[2 x *1]] }
00000005BE7EBD10: {[MeanOfFeatures Value[2]] }
00000005CF8A3550: {[W1*H1+B1 Value[50 x 1 x *1]] }
00000005CF8A3690: {[MVNormalizedFeatures Value[2 x *1]] }
00000005CF8A3AF0: {[W1*H1 Value[50 x 1 x *1]] }
00000005CF8A3C30: {[W2*H1 Value[2 x 1 x *1]] }
00000005CF8A3D70: {[W0*features+B0 Value[50 x 1 x *1]] }
00000005CF8A41D0: {[H2 Value[50 x 1 x *1]] }
00000005CF8A4310: {[H1 Value[50 x 1 x *1]] }
00000005CF8A46D0: {[HLast Value[2 x 1 x *1]] }
00000005CF8A4770: {[W0*features Value[50 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
08/04/2016 08:09:01: Minibatch[1-1]: EvalErrorPrediction = 0.03150912 * 603; CrossEntropyWithSoftmax = 0.08780119 * 603
08/04/2016 08:09:01: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.03150912 * 603; CrossEntropyWithSoftmax = 0.08780119 * 603; perplexity = 1.09177104

08/04/2016 08:09:01: Action "test" complete.


08/04/2016 08:09:01: ##############################################################################
08/04/2016 08:09:01: #                                                                            #
08/04/2016 08:09:01: # Action "write"                                                             #
08/04/2016 08:09:01: #                                                                            #
08/04/2016 08:09:01: ##############################################################################


Post-processing network...

8 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()
	labels = InputValue()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *2]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *2]
Validating --> MeanOfFeatures = Mean (features) : [2 x *2] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *2] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *2], [2], [2] -> [2 x *2]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *2] -> [50 x *2]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *2] -> [2 x 1 x *2]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *2], [2 x 1] -> [2 x 1 x *2]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *2] -> [2 x 1 x *2]
Validating --> Prior = Mean (labels) : [2 x *2] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *2], [2] -> [2 x 1 x *2]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[50 x 1 x *2]] [H2 Gradient[50 x 1 x *2]] [HLast Gradient[2 x 1 x *2]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *2]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *2]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *2]] [ScaledLogLikelihood Value[2 x 1 x *2]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *2]] [W0*features+B0 Gradient[50 x 1 x *2]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *2]] [W1*H1+B1 Gradient[50 x 1 x *2]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *2]] [features Gradient[2 x *2]] [labels Gradient[2 x *2]] }
00000005ABC2BFC0: {[PosteriorProb Value[2 x 1 x *2]] }
00000005BDEF4CC0: {[W1 Value[50 x 50]] }
00000005BDEF5B20: {[W0 Value[50 x 2]] }
00000005BDEF6160: {[W2 Value[2 x 50]] }
00000005BDEF67A0: {[Prior Value[2]] }
00000005BE7EA050: {[B2 Value[2 x 1]] }
00000005BE7EA230: {[InvStdOfFeatures Value[2]] }
00000005BE7EA5F0: {[LogOfPrior Value[2]] }
00000005BE7EAB90: {[labels Value[2 x *2]] }
00000005BE7EAD70: {[MeanOfFeatures Value[2]] }
00000005BE7EB1D0: {[B0 Value[50 x 1]] }
00000005BE7EB810: {[B1 Value[50 x 1]] }
00000005BE7EBC70: {[features Value[2 x *2]] }
00000005CF8A3910: {[W1*H1+B1 Value[50 x 1 x *2]] }
00000005CF8A39B0: {[W0*features+B0 Value[50 x 1 x *2]] }
00000005CF8A3D70: {[HLast Value[2 x 1 x *2]] }
00000005CF8A3EB0: {[W2*H1 Value[2 x 1 x *2]] }
00000005CF8A4090: {[H2 Value[50 x 1 x *2]] }
00000005CF8A4450: {[MVNormalizedFeatures Value[2 x *2]] }
00000005CF8A4BD0: {[W1*H1 Value[50 x 1 x *2]] }
00000005CF8A4C70: {[W0*features Value[50 x *2]] }
00000005CF8A5170: {[H1 Value[50 x 1 x *2]] }

Minibatch[0]: ActualMBSize = 603
Written to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_gpu/SimpleOutput*
Total Samples Evaluated = 603

08/04/2016 08:09:01: Action "write" complete.

08/04/2016 08:09:01: __COMPLETED__