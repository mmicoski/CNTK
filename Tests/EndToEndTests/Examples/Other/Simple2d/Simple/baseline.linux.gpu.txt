CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config/Simple.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu DeviceId=0 timestamping=true Simple_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
08/04/2016 13:55:37: -------------------------------------------------------------------
08/04/2016 13:55:37: Build info: 

08/04/2016 13:55:37: 		Built time: Aug  4 2016 13:07:13
08/04/2016 13:55:37: 		Last modified date: Thu Aug  4 10:38:25 2016
08/04/2016 13:55:37: 		Build type: release
08/04/2016 13:55:37: 		Build target: GPU
08/04/2016 13:55:37: 		With 1bit-SGD: yes
08/04/2016 13:55:37: 		Math lib: mkl
08/04/2016 13:55:37: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 13:55:37: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 13:55:37: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 13:55:37: 		Build Branch: HEAD
08/04/2016 13:55:37: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 13:55:37: 		Built by philly on ee6c20c358b8
08/04/2016 13:55:37: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 13:55:37: -------------------------------------------------------------------
08/04/2016 13:55:38: -------------------------------------------------------------------
08/04/2016 13:55:38: GPU info:

08/04/2016 13:55:38: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:38: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:38: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:38: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:38: -------------------------------------------------------------------

08/04/2016 13:55:38: Running on localhost at 2016/08/04 13:55:38
08/04/2016 13:55:38: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config/Simple.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config  OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu  DeviceId=0  timestamping=true  Simple_Demo_Train=[SGD=[maxEpochs=3]]



08/04/2016 13:55:38: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:55:38: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "$OutputDir$/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "$DataDir$/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu
DeviceId=0
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 13:55:38: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:55:38: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:55:38: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu
DeviceId=0
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 13:55:38: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:55:38: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Simple.cntk:command=Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
configparameters: Simple.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
configparameters: Simple.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Simple.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Simple.cntk:deviceId=0
configparameters: Simple.cntk:ModelDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/Models
configparameters: Simple.cntk:modelPath=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn
configparameters: Simple.cntk:OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu
configparameters: Simple.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Simple.cntk:precision=float
configparameters: Simple.cntk:RootDir=..
configparameters: Simple.cntk:RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu
configparameters: Simple.cntk:Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]

configparameters: Simple.cntk:Simple_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Simple.cntk:Simple_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Simple.cntk:timestamping=true
configparameters: Simple.cntk:traceLevel=1
08/04/2016 13:55:38: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 13:55:38: Commands: Simple_Demo_Train Simple_Demo_Test Simple_Demo_Output
08/04/2016 13:55:38: Precision = "float"
08/04/2016 13:55:38: CNTKModelPath: /tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn
08/04/2016 13:55:38: CNTKCommandTrainInfo: Simple_Demo_Train : 3
08/04/2016 13:55:38: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 13:55:38: ##############################################################################
08/04/2016 13:55:38: #                                                                            #
08/04/2016 13:55:38: # Action "train"                                                             #
08/04/2016 13:55:38: #                                                                            #
08/04/2016 13:55:38: ##############################################################################

08/04/2016 13:55:38: CNTKCommandTrainBegin: Simple_Demo_Train
SimpleNetworkBuilder Using GPU 0

08/04/2016 13:55:38: Creating virgin network.
SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 13:55:39: Created model with 25 nodes on GPU 0.

08/04/2016 13:55:39: Training criterion node(s):
08/04/2016 13:55:39: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/04/2016 13:55:39: Evaluation criterion node(s):

08/04/2016 13:55:39: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x7fd877831398: {[B1 Value[50 x 1]] }
0x7fd8778326e8: {[W2 Value[2 x 50]] }
0x7fd877833028: {[B2 Value[2 x 1]] }
0x7fd877834018: {[labels Value[2 x *]] }
0x7fd877835268: {[Prior Value[2]] }
0x7fd87783ad68: {[EvalErrorPrediction Value[1]] }
0x7fd87783aec8: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x7fd87783b088: {[CrossEntropyWithSoftmax Value[1]] }
0x7fd87783b648: {[LogOfPrior Value[2]] }
0x7fd87783c7d8: {[MVNormalizedFeatures Value[2 x *]] }
0x7fd87783ced8: {[W0*features Value[50 x *]] }
0x7fd87783d408: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x7fd87783d568: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x7fd87783d728: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x7fd87783d8e8: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x7fd87783daa8: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x7fd87783dc68: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x7fd87783de28: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x7fd87783e988: {[CrossEntropyWithSoftmax Gradient[1]] }
0x7fd87783eb48: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x7fd87783ed08: {[W2*H1 Gradient[2 x 1 x *]] }
0x7fd87783eec8: {[B2 Gradient[2 x 1]] }
0x7fd879c753e8: {[B0 Value[50 x 1]] }
0x7fd879c77598: {[W1 Value[50 x 50]] }
0x7fd87a413328: {[InvStdOfFeatures Value[2]] }
0x7fd87a414038: {[W0 Value[50 x 2]] }
0x7fd87a9e0268: {[MeanOfFeatures Value[2]] }
0x7fd87f5bc268: {[features Value[2 x *]] }


08/04/2016 13:55:39: Precomputing --> 3 PreCompute nodes found.

08/04/2016 13:55:39: 	MeanOfFeatures = Mean()
08/04/2016 13:55:39: 	InvStdOfFeatures = InvStdDev()
08/04/2016 13:55:39: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 13:55:39: Precomputing --> Completed.


08/04/2016 13:55:39: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 13:55:39: Starting minibatch loop.
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.71882043 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0085s; samplesPerSecond = 29578.8
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.73075317 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0068s; samplesPerSecond = 36976.8
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70195178 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0068s; samplesPerSecond = 36699.9
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.74146509 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0067s; samplesPerSecond = 37363.6
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.74525684 * 250; EvalErrorPrediction = 0.58000000 * 250; time = 0.0066s; samplesPerSecond = 37959.3
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.71782935 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0063s; samplesPerSecond = 39376.3
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.70220215 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0063s; samplesPerSecond = 39808.9
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.72996240 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0064s; samplesPerSecond = 39038.1
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72194482 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0063s; samplesPerSecond = 39519.4
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.71382080 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0063s; samplesPerSecond = 39936.1
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70678320 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0063s; samplesPerSecond = 39726.7
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74901660 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0063s; samplesPerSecond = 39657.4
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.86809180 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0063s; samplesPerSecond = 39488.2
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.82510840 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0063s; samplesPerSecond = 39808.9
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.72418066 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0063s; samplesPerSecond = 39961.6
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.72361523 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0063s; samplesPerSecond = 39676.2
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70143164 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0063s; samplesPerSecond = 39663.7
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.69573828 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0063s; samplesPerSecond = 39663.7
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.69309766 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0063s; samplesPerSecond = 39853.3
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.72553418 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0063s; samplesPerSecond = 39500.7
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.73060254 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0063s; samplesPerSecond = 39550.7
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69694336 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0063s; samplesPerSecond = 39513.2
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70959375 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0062s; samplesPerSecond = 40096.2
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.70739453 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0063s; samplesPerSecond = 39407.3
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70199219 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0063s; samplesPerSecond = 39563.2
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70068359 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0062s; samplesPerSecond = 40186.5
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.71364648 * 250; EvalErrorPrediction = 0.57200000 * 250; time = 0.0063s; samplesPerSecond = 39866.1
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.70387891 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0064s; samplesPerSecond = 39135.9
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.70170117 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0062s; samplesPerSecond = 40400.8
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.70699805 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0063s; samplesPerSecond = 39682.5
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.70372266 * 250; EvalErrorPrediction = 0.52800000 * 250; time = 0.0063s; samplesPerSecond = 39544.4
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.70533398 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0063s; samplesPerSecond = 39878.8
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69420117 * 250; EvalErrorPrediction = 0.42800000 * 250; time = 0.0063s; samplesPerSecond = 39827.9
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.69292773 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0062s; samplesPerSecond = 40019.2
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.68997656 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0062s; samplesPerSecond = 40057.7
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.71021680 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0063s; samplesPerSecond = 39720.4
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.69446484 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0062s; samplesPerSecond = 40122.0
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.68870898 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0063s; samplesPerSecond = 39885.1
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.67341602 * 250; EvalErrorPrediction = 0.32800000 * 250; time = 0.0062s; samplesPerSecond = 40205.9
08/04/2016 13:55:39:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.66508203 * 250; EvalErrorPrediction = 0.16800000 * 250; time = 0.0064s; samplesPerSecond = 39056.4
08/04/2016 13:55:39: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.71570225 * 10000; EvalErrorPrediction = 0.49410000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.258991s
08/04/2016 13:55:39: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn.1'

08/04/2016 13:55:39: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/04/2016 13:55:39: Starting minibatch loop.
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.65599969 * 250; EvalErrorPrediction = 0.43200000 * 250; time = 0.0065s; samplesPerSecond = 38598.1
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.64737152 * 250; EvalErrorPrediction = 0.14400000 * 250; time = 0.0063s; samplesPerSecond = 39929.7
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.63773096 * 250; EvalErrorPrediction = 0.12000000 * 250; time = 0.0063s; samplesPerSecond = 39444.6
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.62781848 * 250; EvalErrorPrediction = 0.23600000 * 250; time = 0.0063s; samplesPerSecond = 39821.6
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.61534351 * 250; EvalErrorPrediction = 0.19600000 * 250; time = 0.0062s; samplesPerSecond = 40057.7
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.60942896 * 250; EvalErrorPrediction = 0.18800000 * 250; time = 0.0062s; samplesPerSecond = 40597.6
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.58207642 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0062s; samplesPerSecond = 40134.9
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.55878760 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0062s; samplesPerSecond = 40109.1
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.53771777 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0062s; samplesPerSecond = 40584.4
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.51471191 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0062s; samplesPerSecond = 40038.4
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.48663721 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0063s; samplesPerSecond = 39968.0
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.43422266 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0062s; samplesPerSecond = 40433.4
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.40550342 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0063s; samplesPerSecond = 39859.7
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.39532520 * 250; EvalErrorPrediction = 0.14800000 * 250; time = 0.0064s; samplesPerSecond = 39203.4
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.37977588 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0065s; samplesPerSecond = 38568.3
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.32332520 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0064s; samplesPerSecond = 38777.7
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.28772363 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0064s; samplesPerSecond = 39068.6
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.31419824 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0064s; samplesPerSecond = 39283.5
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.24966211 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0064s; samplesPerSecond = 39068.6
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.23059082 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0064s; samplesPerSecond = 39258.8
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.23868848 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0065s; samplesPerSecond = 38705.7
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.19674902 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0063s; samplesPerSecond = 39407.3
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.20635449 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0064s; samplesPerSecond = 39019.8
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.18781445 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0064s; samplesPerSecond = 38959.0
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.18553223 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0063s; samplesPerSecond = 39531.9
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.18162988 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0063s; samplesPerSecond = 39376.3
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.18604785 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0065s; samplesPerSecond = 38331.8
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.20210156 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0064s; samplesPerSecond = 39080.8
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.18954492 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0064s; samplesPerSecond = 39295.8
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.17442773 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0064s; samplesPerSecond = 38801.8
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.19605859 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0065s; samplesPerSecond = 38508.9
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14854199 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0064s; samplesPerSecond = 39019.8
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.16501562 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0065s; samplesPerSecond = 38556.4
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.15824023 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0065s; samplesPerSecond = 38296.6
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.19857324 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0063s; samplesPerSecond = 39550.7
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13599902 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0064s; samplesPerSecond = 39221.8
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18236230 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0064s; samplesPerSecond = 38898.4
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15452051 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0065s; samplesPerSecond = 38753.7
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13171680 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0064s; samplesPerSecond = 39154.3
08/04/2016 13:55:39:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.13999023 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0063s; samplesPerSecond = 39751.9
08/04/2016 13:55:39: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.32634651 * 10000; EvalErrorPrediction = 0.10090000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.256878s
08/04/2016 13:55:39: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn.2'

08/04/2016 13:55:39: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/04/2016 13:55:39: Starting minibatch loop.
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18034674 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0066s; samplesPerSecond = 37867.3
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.16120361 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0065s; samplesPerSecond = 38717.7
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.11593546 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0065s; samplesPerSecond = 38191.3
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16610971 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0064s; samplesPerSecond = 38946.9
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.13637201 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0064s; samplesPerSecond = 38783.7
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.18853748 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0066s; samplesPerSecond = 38121.4
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.14470264 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0066s; samplesPerSecond = 38011.3
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.20182983 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0065s; samplesPerSecond = 38610.0
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.13468726 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0063s; samplesPerSecond = 39376.3
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.16711707 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0065s; samplesPerSecond = 38604.1
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14737134 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0064s; samplesPerSecond = 39320.5
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.18846606 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0064s; samplesPerSecond = 38952.9
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.16995166 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0064s; samplesPerSecond = 38856.1
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.14084619 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0064s; samplesPerSecond = 38916.6
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.19002344 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0064s; samplesPerSecond = 39302.0
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.17097485 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0065s; samplesPerSecond = 38723.7
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14279541 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0064s; samplesPerSecond = 39117.5
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18353711 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0064s; samplesPerSecond = 39283.5
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.17142773 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0063s; samplesPerSecond = 39407.3
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17531250 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0063s; samplesPerSecond = 39563.2
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.17361060 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0063s; samplesPerSecond = 39987.2
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13674609 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0063s; samplesPerSecond = 39866.1
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15603247 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0063s; samplesPerSecond = 39961.6
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.17896729 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0063s; samplesPerSecond = 39872.4
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.15771875 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0064s; samplesPerSecond = 39032.0
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.20094116 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0069s; samplesPerSecond = 36095.9
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16060107 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0064s; samplesPerSecond = 39135.9
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13768408 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0064s; samplesPerSecond = 39111.4
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.14508301 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0064s; samplesPerSecond = 39080.8
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.13299805 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0064s; samplesPerSecond = 39148.1
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.14154687 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0063s; samplesPerSecond = 39376.3
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13292676 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0063s; samplesPerSecond = 39507.0
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15860498 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0065s; samplesPerSecond = 38735.7
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14054102 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0064s; samplesPerSecond = 38874.2
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.18226709 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0064s; samplesPerSecond = 39252.6
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13772705 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0065s; samplesPerSecond = 38562.4
08/04/2016 13:55:39:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14827881 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0065s; samplesPerSecond = 38568.3
08/04/2016 13:55:40:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14563770 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0063s; samplesPerSecond = 39426.0
08/04/2016 13:55:40:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13642676 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0064s; samplesPerSecond = 39142.0
08/04/2016 13:55:40:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17905957 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0064s; samplesPerSecond = 39001.6
08/04/2016 13:55:40: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15902368 * 10000; EvalErrorPrediction = 0.07480000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=0.259384s
08/04/2016 13:55:40: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn'
08/04/2016 13:55:40: CNTKCommandTrainEnd: Simple_Demo_Train

08/04/2016 13:55:40: Action "train" complete.


08/04/2016 13:55:40: ##############################################################################
08/04/2016 13:55:40: #                                                                            #
08/04/2016 13:55:40: # Action "test"                                                              #
08/04/2016 13:55:40: #                                                                            #
08/04/2016 13:55:40: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x7fd87e38a028: {[B0 Value[50 x 1]] }
0x7fd87e394a48: {[CrossEntropyWithSoftmax Value[1]] }
0x7fd87e394fc8: {[B1 Value[50 x 1]] }
0x7fd87e396068: {[B2 Value[2 x 1]] }
0x7fd87e3978f8: {[features Value[2 x *1]] }
0x7fd87e398b88: {[InvStdOfFeatures Value[2]] }
0x7fd87e399a58: {[labels Value[2 x *1]] }
0x7fd87e39a738: {[MeanOfFeatures Value[2]] }
0x7fd87e39aef8: {[Prior Value[2]] }
0x7fd87e39beb8: {[W0 Value[50 x 2]] }
0x7fd87e39c288: {[W1 Value[50 x 50]] }
0x7fd87e39eda8: {[EvalErrorPrediction Value[1]] }
0x7fd87e3a0cd8: {[W2 Value[2 x 50]] }
0x7fd87e3a5028: {[MVNormalizedFeatures Value[2 x *1]] }
0x7fd87e3a5368: {[W0*features Value[50 x *1]] }
0x7fd87e3a5558: {[LogOfPrior Value[2]] }
0x7fd87e3a7318: {[W0*features+B0 Value[50 x 1 x *1]] }
0x7fd87e3a74d8: {[H1 Value[50 x 1 x *1]] }
0x7fd87e3a7698: {[W1*H1 Value[50 x 1 x *1]] }
0x7fd87e3a7858: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x7fd87e3a7a18: {[H2 Value[50 x 1 x *1]] }
0x7fd87e3a7bd8: {[W2*H1 Value[2 x 1 x *1]] }
0x7fd87e3a7d98: {[HLast Value[2 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
08/04/2016 13:55:40: Minibatch[1-1]: EvalErrorPrediction = 0.03150912 * 603; CrossEntropyWithSoftmax = 0.08780119 * 603
08/04/2016 13:55:40: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.03150912 * 603; CrossEntropyWithSoftmax = 0.08780119 * 603; perplexity = 1.09177104

08/04/2016 13:55:40: Action "test" complete.


08/04/2016 13:55:40: ##############################################################################
08/04/2016 13:55:40: #                                                                            #
08/04/2016 13:55:40: # Action "write"                                                             #
08/04/2016 13:55:40: #                                                                            #
08/04/2016 13:55:40: ##############################################################################


Post-processing network...

8 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()
	labels = InputValue()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *2]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *2]
Validating --> MeanOfFeatures = Mean (features) : [2 x *2] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *2] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *2], [2], [2] -> [2 x *2]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *2] -> [50 x *2]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *2] -> [2 x 1 x *2]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *2], [2 x 1] -> [2 x 1 x *2]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *2] -> [2 x 1 x *2]
Validating --> Prior = Mean (labels) : [2 x *2] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *2], [2] -> [2 x 1 x *2]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[50 x 1 x *2]] [H2 Gradient[50 x 1 x *2]] [HLast Gradient[2 x 1 x *2]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *2]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *2]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *2]] [ScaledLogLikelihood Value[2 x 1 x *2]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *2]] [W0*features+B0 Gradient[50 x 1 x *2]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *2]] [W1*H1+B1 Gradient[50 x 1 x *2]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *2]] [features Gradient[2 x *2]] [labels Gradient[2 x *2]] }
0x7fd877838738: {[features Value[2 x *2]] }
0x7fd8778395d8: {[MeanOfFeatures Value[2]] }
0x7fd8778396f8: {[InvStdOfFeatures Value[2]] }
0x7fd87e399f68: {[PosteriorProb Value[2 x 1 x *2]] }
0x7fd87e39a668: {[B0 Value[50 x 1]] }
0x7fd87e39a718: {[B1 Value[50 x 1]] }
0x7fd87e39b728: {[B2 Value[2 x 1]] }
0x7fd87e39ce38: {[labels Value[2 x *2]] }
0x7fd87e39eaa8: {[Prior Value[2]] }
0x7fd87e39f248: {[W0 Value[50 x 2]] }
0x7fd87e39f618: {[W1 Value[50 x 50]] }
0x7fd87e3a6488: {[W2 Value[2 x 50]] }
0x7fd87e3ac5c8: {[W0*features Value[50 x *2]] }
0x7fd87e3ac9a8: {[H1 Value[50 x 1 x *2]] }
0x7fd87e3aca48: {[LogOfPrior Value[2]] }
0x7fd87e3adc18: {[MVNormalizedFeatures Value[2 x *2]] }
0x7fd87e3ae098: {[W0*features+B0 Value[50 x 1 x *2]] }
0x7fd87e3ae4a8: {[W1*H1 Value[50 x 1 x *2]] }
0x7fd87e3ae668: {[W1*H1+B1 Value[50 x 1 x *2]] }
0x7fd87e3ae828: {[H2 Value[50 x 1 x *2]] }
0x7fd87e3ae9e8: {[W2*H1 Value[2 x 1 x *2]] }
0x7fd87e3aeba8: {[HLast Value[2 x 1 x *2]] }

Minibatch[0]: ActualMBSize = 603
Written to /tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_gpu/SimpleOutput*
Total Samples Evaluated = 603

08/04/2016 13:55:40: Action "write" complete.

08/04/2016 13:55:40: __COMPLETED__