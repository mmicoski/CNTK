CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU W3565 @ 3.20GHz
    Hardware threads: 8
    Total Memory: 12580436 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/jenkins/workspace/CNTK-Test-Windows-W1/x64/release/cntk.exe configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Simple.cntk currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu DeviceId=-1 timestamping=true Simple_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 06:18:04
		Last modified date: Thu Aug  4 03:39:14 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		Math lib: mkl
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
		CUB_PATH: C:\src\cub-1.4.1
		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by svcphil on dphaim-26-new
		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@3\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
08/04/2016 08:08:52: -------------------------------------------------------------------
08/04/2016 08:08:52: Build info: 

08/04/2016 08:08:52: 		Built time: Aug  4 2016 06:18:04
08/04/2016 08:08:52: 		Last modified date: Thu Aug  4 03:39:14 2016
08/04/2016 08:08:52: 		Build type: Release
08/04/2016 08:08:52: 		Build target: GPU
08/04/2016 08:08:52: 		With 1bit-SGD: no
08/04/2016 08:08:52: 		Math lib: mkl
08/04/2016 08:08:52: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5
08/04/2016 08:08:52: 		CUB_PATH: C:\src\cub-1.4.1
08/04/2016 08:08:52: 		CUDNN_PATH: c:\NVIDIA\cudnn-4.0\cuda
08/04/2016 08:08:52: 		Build Branch: HEAD
08/04/2016 08:08:52: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 08:08:52: 		Built by svcphil on dphaim-26-new
08/04/2016 08:08:52: 		Build Path: c:\jenkins\workspace\CNTK-Build-Windows@3\Source\CNTK\
08/04/2016 08:08:52: -------------------------------------------------------------------
08/04/2016 08:08:53: -------------------------------------------------------------------
08/04/2016 08:08:53: GPU info:

08/04/2016 08:08:53: 		Device[0]: cores = 2496; computeCapability = 5.2; type = "Quadro M4000"; memory = 8192 MB
08/04/2016 08:08:53: -------------------------------------------------------------------

08/04/2016 08:08:53: Running on cntk-muc01 at 2016/08/04 08:08:53
08/04/2016 08:08:53: Command line: 
C:\jenkins\workspace\CNTK-Test-Windows-W1\x64\release\cntk.exe  configFile=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config/Simple.cntk  currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu  DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data  ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config  OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu  DeviceId=-1  timestamping=true  Simple_Demo_Train=[SGD=[maxEpochs=3]]



08/04/2016 08:08:53: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 08:08:53: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "$OutputDir$/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "$DataDir$/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu
DeviceId=-1
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 08:08:53: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 08:08:53: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 08:08:53: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu
DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu
DeviceId=-1
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 08:08:53: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 08:08:53: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Simple.cntk:command=Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
configparameters: Simple.cntk:ConfigDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Config
configparameters: Simple.cntk:currentDirectory=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Simple.cntk:DataDir=C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data
configparameters: Simple.cntk:deviceId=-1
configparameters: Simple.cntk:ModelDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/Models
configparameters: Simple.cntk:modelPath=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn
configparameters: Simple.cntk:OutputDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu
configparameters: Simple.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Simple.cntk:precision=float
configparameters: Simple.cntk:RootDir=..
configparameters: Simple.cntk:RunDir=C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu
configparameters: Simple.cntk:Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]

configparameters: Simple.cntk:Simple_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Simple.cntk:Simple_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\jenkins\workspace\CNTK-Test-Windows-W1\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Simple.cntk:timestamping=true
configparameters: Simple.cntk:traceLevel=1
08/04/2016 08:08:53: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 08:08:53: Commands: Simple_Demo_Train Simple_Demo_Test Simple_Demo_Output
08/04/2016 08:08:53: Precision = "float"
08/04/2016 08:08:53: CNTKModelPath: C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn
08/04/2016 08:08:53: CNTKCommandTrainInfo: Simple_Demo_Train : 3
08/04/2016 08:08:53: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 08:08:53: ##############################################################################
08/04/2016 08:08:53: #                                                                            #
08/04/2016 08:08:53: # Action "train"                                                             #
08/04/2016 08:08:53: #                                                                            #
08/04/2016 08:08:53: ##############################################################################

08/04/2016 08:08:53: CNTKCommandTrainBegin: Simple_Demo_Train
SimpleNetworkBuilder Using CPU

08/04/2016 08:08:53: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 08:08:53: Created model with 25 nodes on CPU.

08/04/2016 08:08:53: Training criterion node(s):
08/04/2016 08:08:53: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/04/2016 08:08:53: Evaluation criterion node(s):

08/04/2016 08:08:53: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0000009A99491F30: {[labels Value[2 x *]] }
0000009A99491FD0: {[LogOfPrior Value[2]] }
0000009A994922F0: {[W0*features Value[50 x *]] }
0000009A99492390: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0000009A99492430: {[MVNormalizedFeatures Value[2 x *]] }
0000009A994924D0: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0000009A994926B0: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0000009A99492930: {[Prior Value[2]] }
0000009A994929D0: {[EvalErrorPrediction Value[1]] }
0000009A99492BB0: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0000009A99492E30: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0000009A99493010: {[CrossEntropyWithSoftmax Gradient[1]] }
0000009A994930B0: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0000009A994931F0: {[W2*H1 Gradient[2 x 1 x *]] }
0000009A99493290: {[CrossEntropyWithSoftmax Value[1]] }
0000009A994935B0: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0000009A99493650: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0000009A994936F0: {[W2 Value[2 x 50]] }
0000009A99493790: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0000009A99493830: {[B2 Value[2 x 1]] }
0000009A99493970: {[B2 Gradient[2 x 1]] }
0000009AFE78C540: {[features Value[2 x *]] }
0000009AFE78C5E0: {[MeanOfFeatures Value[2]] }
0000009AFE78CA40: {[InvStdOfFeatures Value[2]] }
0000009AFE78CAE0: {[W0 Value[50 x 2]] }
0000009AFE78CCC0: {[W1 Value[50 x 50]] }
0000009AFE78CD60: {[B1 Value[50 x 1]] }
0000009AFE78D260: {[B0 Value[50 x 1]] }


08/04/2016 08:08:53: Precomputing --> 3 PreCompute nodes found.

08/04/2016 08:08:53: 	MeanOfFeatures = Mean()
08/04/2016 08:08:53: 	InvStdOfFeatures = InvStdDev()
08/04/2016 08:08:53: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 08:08:53: Precomputing --> Completed.


08/04/2016 08:08:53: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 08:08:53: Starting minibatch loop.
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.72158575 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0265s; samplesPerSecond = 9438.2
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.72945282 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0174s; samplesPerSecond = 14391.8
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70152979 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0102s; samplesPerSecond = 24560.4
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.74128882 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0099s; samplesPerSecond = 25255.1
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.74553027 * 250; EvalErrorPrediction = 0.58000000 * 250; time = 0.0098s; samplesPerSecond = 25533.7
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.71826636 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0112s; samplesPerSecond = 22309.5
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.70235205 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0098s; samplesPerSecond = 25453.1
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.73039795 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0101s; samplesPerSecond = 24750.0
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72226611 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0100s; samplesPerSecond = 25040.1
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.71367187 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0100s; samplesPerSecond = 25045.1
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70665674 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0099s; samplesPerSecond = 25250.0
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74862354 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0096s; samplesPerSecond = 26085.1
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.86821289 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0101s; samplesPerSecond = 24811.4
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.82599316 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0099s; samplesPerSecond = 25339.5
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.72434082 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0097s; samplesPerSecond = 25866.5
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.72374707 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0096s; samplesPerSecond = 25930.9
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70148535 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0097s; samplesPerSecond = 25701.7
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.69553027 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0097s; samplesPerSecond = 25775.9
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.69299316 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0096s; samplesPerSecond = 25995.6
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.72501367 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0096s; samplesPerSecond = 26134.2
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.73040039 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0094s; samplesPerSecond = 26488.7
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69652344 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0097s; samplesPerSecond = 25667.4
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70915527 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0097s; samplesPerSecond = 25680.5
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.70665039 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0098s; samplesPerSecond = 25432.3
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70112695 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0098s; samplesPerSecond = 25416.8
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.69939258 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0096s; samplesPerSecond = 26063.4
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.71169336 * 250; EvalErrorPrediction = 0.57200000 * 250; time = 0.0098s; samplesPerSecond = 25570.2
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.70169922 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0095s; samplesPerSecond = 26396.4
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.69898828 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0099s; samplesPerSecond = 25347.3
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.70277734 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0098s; samplesPerSecond = 25625.3
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.69721484 * 250; EvalErrorPrediction = 0.52800000 * 250; time = 0.0097s; samplesPerSecond = 25667.4
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.69657227 * 250; EvalErrorPrediction = 0.46800000 * 250; time = 0.0096s; samplesPerSecond = 26033.5
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.68540820 * 250; EvalErrorPrediction = 0.39600000 * 250; time = 0.0100s; samplesPerSecond = 24975.0
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.67916602 * 250; EvalErrorPrediction = 0.42800000 * 250; time = 0.0099s; samplesPerSecond = 25234.7
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.67157227 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0096s; samplesPerSecond = 26036.2
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.68412500 * 250; EvalErrorPrediction = 0.44800000 * 250; time = 0.0095s; samplesPerSecond = 26354.6
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.66154102 * 250; EvalErrorPrediction = 0.45200000 * 250; time = 0.0094s; samplesPerSecond = 26590.1
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.63971680 * 250; EvalErrorPrediction = 0.30400000 * 250; time = 0.0098s; samplesPerSecond = 25518.0
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.60428906 * 250; EvalErrorPrediction = 0.12000000 * 250; time = 0.0096s; samplesPerSecond = 25995.6
08/04/2016 08:08:53:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.57421875 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0110s; samplesPerSecond = 22777.0
08/04/2016 08:08:53: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.70727925 * 10000; EvalErrorPrediction = 0.47510000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.421599s
08/04/2016 08:08:53: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn.1'

08/04/2016 08:08:53: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/04/2016 08:08:53: Starting minibatch loop.
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.53028986 * 250; EvalErrorPrediction = 0.13200000 * 250; time = 0.0097s; samplesPerSecond = 25888.0
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.49788080 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0112s; samplesPerSecond = 22407.5
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.47061023 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0095s; samplesPerSecond = 26332.4
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.42760925 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0095s; samplesPerSecond = 26315.8
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.40836890 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0095s; samplesPerSecond = 26307.5
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.39042139 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0093s; samplesPerSecond = 26954.2
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.33780884 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0097s; samplesPerSecond = 25765.2
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.32121533 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0098s; samplesPerSecond = 25414.3
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.28648096 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0098s; samplesPerSecond = 25525.8
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.29183154 * 250; EvalErrorPrediction = 0.12000000 * 250; time = 0.0095s; samplesPerSecond = 26452.2
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.26609082 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0097s; samplesPerSecond = 25786.5
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.22948193 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0095s; samplesPerSecond = 26216.4
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.24973975 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0096s; samplesPerSecond = 25987.5
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.25798828 * 250; EvalErrorPrediction = 0.11600000 * 250; time = 0.0097s; samplesPerSecond = 25794.5
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.25312158 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0099s; samplesPerSecond = 25247.4
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.21122607 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0099s; samplesPerSecond = 25370.4
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.20185840 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0096s; samplesPerSecond = 26039.0
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.24792188 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0094s; samplesPerSecond = 26511.1
08/04/2016 08:08:53:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.20568262 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0095s; samplesPerSecond = 26379.7
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.18670605 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0099s; samplesPerSecond = 25362.7
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.20154199 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0095s; samplesPerSecond = 26404.7
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.16976660 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0095s; samplesPerSecond = 26404.7
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.18794043 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0098s; samplesPerSecond = 25502.4
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.17097119 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0099s; samplesPerSecond = 25380.7
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.17111719 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0095s; samplesPerSecond = 26301.9
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.16854688 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0098s; samplesPerSecond = 25565.0
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.17842773 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0096s; samplesPerSecond = 26068.8
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.19504785 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0098s; samplesPerSecond = 25593.8
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.18517090 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0097s; samplesPerSecond = 25685.8
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.16892578 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0097s; samplesPerSecond = 25823.8
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.19334668 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0096s; samplesPerSecond = 25976.7
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14720117 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0098s; samplesPerSecond = 25591.2
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.16194629 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0097s; samplesPerSecond = 25896.0
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.15622559 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0095s; samplesPerSecond = 26332.4
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.19808398 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0094s; samplesPerSecond = 26519.6
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13561621 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0095s; samplesPerSecond = 26321.3
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18180371 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0097s; samplesPerSecond = 25778.5
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15394336 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0096s; samplesPerSecond = 25971.3
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13239355 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0097s; samplesPerSecond = 25821.1
08/04/2016 08:08:54:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.14059277 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0106s; samplesPerSecond = 23660.8
08/04/2016 08:08:54: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.24177361 * 10000; EvalErrorPrediction = 0.07610000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.390578s
08/04/2016 08:08:54: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn.2'

08/04/2016 08:08:54: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/04/2016 08:08:54: Starting minibatch loop.
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18061520 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0094s; samplesPerSecond = 26652.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.16272726 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0109s; samplesPerSecond = 22900.1
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.11642905 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0097s; samplesPerSecond = 25847.8
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16767398 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0097s; samplesPerSecond = 25696.4
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.13866888 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0099s; samplesPerSecond = 25316.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.18733411 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0099s; samplesPerSecond = 25191.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.14666479 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0098s; samplesPerSecond = 25588.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.20152905 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0098s; samplesPerSecond = 25641.0
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.13597058 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0096s; samplesPerSecond = 25955.1
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.16771094 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0097s; samplesPerSecond = 25797.1
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14776990 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0097s; samplesPerSecond = 25842.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.18771326 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0096s; samplesPerSecond = 25998.3
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.17035144 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0099s; samplesPerSecond = 25270.4
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.14387671 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0097s; samplesPerSecond = 25736.1
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.18934985 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0094s; samplesPerSecond = 26477.4
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.16943774 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0096s; samplesPerSecond = 26049.8
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14288574 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0096s; samplesPerSecond = 26068.8
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18284570 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0096s; samplesPerSecond = 26022.7
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.17150049 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0097s; samplesPerSecond = 25643.7
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17612769 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0096s; samplesPerSecond = 26036.2
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.17437231 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0095s; samplesPerSecond = 26301.9
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13774658 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0098s; samplesPerSecond = 25633.1
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15612793 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0096s; samplesPerSecond = 25922.9
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.17963916 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0096s; samplesPerSecond = 25941.7
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.15503711 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0097s; samplesPerSecond = 25706.9
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.19616113 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0097s; samplesPerSecond = 25837.1
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16320020 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0097s; samplesPerSecond = 25786.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13371924 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0097s; samplesPerSecond = 25754.6
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.14497168 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0097s; samplesPerSecond = 25725.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.13384375 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0095s; samplesPerSecond = 26249.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.14045264 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0098s; samplesPerSecond = 25481.6
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13401416 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0097s; samplesPerSecond = 25871.9
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15810059 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0095s; samplesPerSecond = 26340.7
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14149609 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0096s; samplesPerSecond = 26014.6
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.18146289 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0094s; samplesPerSecond = 26652.5
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13763086 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0097s; samplesPerSecond = 25746.7
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14693994 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0096s; samplesPerSecond = 26022.7
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14701660 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0096s; samplesPerSecond = 26039.0
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13530859 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0097s; samplesPerSecond = 25861.2
08/04/2016 08:08:54:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17790088 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0108s; samplesPerSecond = 23219.1
08/04/2016 08:08:54: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15905812 * 10000; EvalErrorPrediction = 0.07520000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=0.391534s
08/04/2016 08:08:54: SGD: Saving checkpoint model 'C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/Models/simple.dnn'
08/04/2016 08:08:54: CNTKCommandTrainEnd: Simple_Demo_Train

08/04/2016 08:08:54: Action "train" complete.


08/04/2016 08:08:54: ##############################################################################
08/04/2016 08:08:54: #                                                                            #
08/04/2016 08:08:54: # Action "test"                                                              #
08/04/2016 08:08:54: #                                                                            #
08/04/2016 08:08:54: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0000009A99573470: {[B1 Value[50 x 1]] }
0000009A99573AB0: {[B2 Value[2 x 1]] }
0000009A99573B50: {[InvStdOfFeatures Value[2]] }
0000009A99573BF0: {[labels Value[2 x *1]] }
0000009A99573DD0: {[MeanOfFeatures Value[2]] }
0000009A99573FB0: {[W0 Value[50 x 2]] }
0000009A99574230: {[features Value[2 x *1]] }
0000009A995745F0: {[Prior Value[2]] }
0000009A995747D0: {[W1 Value[50 x 50]] }
0000009A995749B0: {[W2 Value[2 x 50]] }
0000009A99574C30: {[B0 Value[50 x 1]] }
0000009AFE78C5E0: {[MVNormalizedFeatures Value[2 x *1]] }
0000009AFE78C680: {[H1 Value[50 x 1 x *1]] }
0000009AFE78C7C0: {[W2*H1 Value[2 x 1 x *1]] }
0000009AFE78C900: {[CrossEntropyWithSoftmax Value[1]] }
0000009AFE78CAE0: {[LogOfPrior Value[2]] }
0000009AFE78CCC0: {[W0*features Value[50 x *1]] }
0000009AFE78CD60: {[H2 Value[50 x 1 x *1]] }
0000009AFE78CF40: {[EvalErrorPrediction Value[1]] }
0000009AFE78CFE0: {[W0*features+B0 Value[50 x 1 x *1]] }
0000009AFE78D080: {[W1*H1+B1 Value[50 x 1 x *1]] }
0000009AFE78D120: {[W1*H1 Value[50 x 1 x *1]] }
0000009AFE78D300: {[HLast Value[2 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
08/04/2016 08:08:54: Minibatch[1-1]: EvalErrorPrediction = 0.03150912 * 603; CrossEntropyWithSoftmax = 0.09041682 * 603
08/04/2016 08:08:54: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.03150912 * 603; CrossEntropyWithSoftmax = 0.09041682 * 603; perplexity = 1.09463045

08/04/2016 08:08:54: Action "test" complete.


08/04/2016 08:08:54: ##############################################################################
08/04/2016 08:08:54: #                                                                            #
08/04/2016 08:08:54: # Action "write"                                                             #
08/04/2016 08:08:54: #                                                                            #
08/04/2016 08:08:54: ##############################################################################


Post-processing network...

8 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()
	labels = InputValue()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *2]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *2]
Validating --> MeanOfFeatures = Mean (features) : [2 x *2] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *2] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *2], [2], [2] -> [2 x *2]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *2] -> [50 x *2]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *2] -> [2 x 1 x *2]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *2], [2 x 1] -> [2 x 1 x *2]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *2] -> [2 x 1 x *2]
Validating --> Prior = Mean (labels) : [2 x *2] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *2], [2] -> [2 x 1 x *2]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[50 x 1 x *2]] [H2 Gradient[50 x 1 x *2]] [HLast Gradient[2 x 1 x *2]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *2]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *2]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *2]] [ScaledLogLikelihood Value[2 x 1 x *2]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *2]] [W0*features+B0 Gradient[50 x 1 x *2]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *2]] [W1*H1+B1 Gradient[50 x 1 x *2]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *2]] [features Gradient[2 x *2]] [labels Gradient[2 x *2]] }
0000009A99573470: {[W1 Value[50 x 50]] }
0000009A99573510: {[B1 Value[50 x 1]] }
0000009A995735B0: {[features Value[2 x *2]] }
0000009A99573B50: {[W2 Value[2 x 50]] }
0000009A99573DD0: {[W0 Value[50 x 2]] }
0000009A99573FB0: {[B2 Value[2 x 1]] }
0000009A99574230: {[B0 Value[50 x 1]] }
0000009A99574370: {[InvStdOfFeatures Value[2]] }
0000009A99574690: {[labels Value[2 x *2]] }
0000009A99574870: {[MeanOfFeatures Value[2]] }
0000009A99574A50: {[Prior Value[2]] }
0000009AFE78C4A0: {[W1*H1 Value[50 x 1 x *2]] }
0000009AFE78C5E0: {[PosteriorProb Value[2 x 1 x *2]] }
0000009AFE78C720: {[W0*features Value[50 x *2]] }
0000009AFE78C860: {[HLast Value[2 x 1 x *2]] }
0000009AFE78C900: {[W1*H1+B1 Value[50 x 1 x *2]] }
0000009AFE78CC20: {[W2*H1 Value[2 x 1 x *2]] }
0000009AFE78CE00: {[LogOfPrior Value[2]] }
0000009AFE78CEA0: {[W0*features+B0 Value[50 x 1 x *2]] }
0000009AFE78CF40: {[H1 Value[50 x 1 x *2]] }
0000009AFE78CFE0: {[H2 Value[50 x 1 x *2]] }
0000009AFE78D080: {[MVNormalizedFeatures Value[2 x *2]] }

Minibatch[0]: ActualMBSize = 603
Written to C:\Users\svcphil\AppData\Local\Temp\cntk-test-20160804080528.656509\Examples\Other\Simple2d_Simple@release_cpu/SimpleOutput*
Total Samples Evaluated = 603

08/04/2016 08:08:54: Action "write" complete.

08/04/2016 08:08:54: __COMPLETED__