CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/cpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config/Simple.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config OutputDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu DeviceId=-1 timestamping=true Simple_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:05:16
		Last modified date: Wed Aug  3 23:33:00 2016
		Build type: release
		Build target: CPU-only
		With 1bit-SGD: no
		Math lib: mkl
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on fe7a2a47641f
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
08/04/2016 13:40:48: -------------------------------------------------------------------
08/04/2016 13:40:48: Build info: 

08/04/2016 13:40:48: 		Built time: Aug  4 2016 13:05:16
08/04/2016 13:40:48: 		Last modified date: Wed Aug  3 23:33:00 2016
08/04/2016 13:40:48: 		Build type: release
08/04/2016 13:40:48: 		Build target: CPU-only
08/04/2016 13:40:48: 		With 1bit-SGD: no
08/04/2016 13:40:48: 		Math lib: mkl
08/04/2016 13:40:48: 		Build Branch: HEAD
08/04/2016 13:40:48: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 13:40:48: 		Built by philly on fe7a2a47641f
08/04/2016 13:40:48: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 13:40:48: -------------------------------------------------------------------

08/04/2016 13:40:48: Running on localhost at 2016/08/04 13:40:48
08/04/2016 13:40:48: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/cpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config/Simple.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config  OutputDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu  DeviceId=-1  timestamping=true  Simple_Demo_Train=[SGD=[maxEpochs=3]]



08/04/2016 13:40:48: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:40:48: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "$OutputDir$/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "$DataDir$/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu
DeviceId=-1
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 13:40:48: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:40:48: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:40:48: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu
DeviceId=-1
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 13:40:48: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:40:48: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Simple.cntk:command=Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
configparameters: Simple.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
configparameters: Simple.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Simple.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Simple.cntk:deviceId=-1
configparameters: Simple.cntk:ModelDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/Models
configparameters: Simple.cntk:modelPath=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn
configparameters: Simple.cntk:OutputDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu
configparameters: Simple.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Simple.cntk:precision=float
configparameters: Simple.cntk:RootDir=..
configparameters: Simple.cntk:RunDir=/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu
configparameters: Simple.cntk:Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]

configparameters: Simple.cntk:Simple_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Simple.cntk:Simple_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Simple.cntk:timestamping=true
configparameters: Simple.cntk:traceLevel=1
08/04/2016 13:40:48: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 13:40:48: Commands: Simple_Demo_Train Simple_Demo_Test Simple_Demo_Output
08/04/2016 13:40:48: Precision = "float"
08/04/2016 13:40:48: CNTKModelPath: /tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn
08/04/2016 13:40:48: CNTKCommandTrainInfo: Simple_Demo_Train : 3
08/04/2016 13:40:48: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 13:40:48: ##############################################################################
08/04/2016 13:40:48: #                                                                            #
08/04/2016 13:40:48: # Action "train"                                                             #
08/04/2016 13:40:48: #                                                                            #
08/04/2016 13:40:48: ##############################################################################

08/04/2016 13:40:48: CNTKCommandTrainBegin: Simple_Demo_Train
SimpleNetworkBuilder Using CPU

08/04/2016 13:40:48: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 13:40:48: Created model with 25 nodes on CPU.

08/04/2016 13:40:48: Training criterion node(s):
08/04/2016 13:40:48: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/04/2016 13:40:48: Evaluation criterion node(s):

08/04/2016 13:40:48: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x10b3e18: {[MeanOfFeatures Value[2]] }
0x1267638: {[features Value[2 x *]] }
0x12685d8: {[InvStdOfFeatures Value[2]] }
0x1269028: {[W0 Value[50 x 2]] }
0x1269598: {[B0 Value[50 x 1]] }
0x126a548: {[W1 Value[50 x 50]] }
0x126d0d8: {[B1 Value[50 x 1]] }
0x126dfb8: {[W2 Value[2 x 50]] }
0x126e588: {[B2 Value[2 x 1]] }
0x126f068: {[labels Value[2 x *]] }
0x126fdf8: {[Prior Value[2]] }
0x1275568: {[EvalErrorPrediction Value[1]] }
0x12756c8: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x1275828: {[CrossEntropyWithSoftmax Value[1]] }
0x1275e08: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x1275ff8: {[LogOfPrior Value[2]] }
0x1277b08: {[MVNormalizedFeatures Value[2 x *]] }
0x1278208: {[W0*features Value[50 x *]] }
0x1278418: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x1278578: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x12786d8: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x1278898: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x1278a58: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x1278c18: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x1279778: {[CrossEntropyWithSoftmax Gradient[1]] }
0x1279938: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x1279af8: {[W2*H1 Gradient[2 x 1 x *]] }
0x1279cb8: {[B2 Gradient[2 x 1]] }


08/04/2016 13:40:48: Precomputing --> 3 PreCompute nodes found.

08/04/2016 13:40:48: 	MeanOfFeatures = Mean()
08/04/2016 13:40:48: 	InvStdOfFeatures = InvStdDev()
08/04/2016 13:40:48: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 13:40:49: Precomputing --> Completed.


08/04/2016 13:40:49: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 13:40:49: Starting minibatch loop.
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.71180627 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0687s; samplesPerSecond = 3640.3
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.73593127 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0272s; samplesPerSecond = 9176.0
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70349194 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0108s; samplesPerSecond = 23111.8
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.74209155 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0272s; samplesPerSecond = 9189.8
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.74485010 * 250; EvalErrorPrediction = 0.58000000 * 250; time = 0.0151s; samplesPerSecond = 16577.2
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.71670825 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0170s; samplesPerSecond = 14684.3
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.70175635 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0169s; samplesPerSecond = 14834.2
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.72852002 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0245s; samplesPerSecond = 10201.2
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72082910 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0376s; samplesPerSecond = 6652.1
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.71396533 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0922s; samplesPerSecond = 2712.4
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70685742 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0745s; samplesPerSecond = 3357.5
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74966406 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0347s; samplesPerSecond = 7196.1
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.86757520 * 250; EvalErrorPrediction = 0.56800000 * 250; time = 0.0170s; samplesPerSecond = 14725.8
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.82215039 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0171s; samplesPerSecond = 14655.0
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.72304492 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0202s; samplesPerSecond = 12359.7
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.72316211 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0169s; samplesPerSecond = 14764.1
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70117480 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0172s; samplesPerSecond = 14570.5
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.69559277 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0172s; samplesPerSecond = 14574.7
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.69298633 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0277s; samplesPerSecond = 9028.9
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.72534570 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0340s; samplesPerSecond = 7357.5
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.73046191 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0139s; samplesPerSecond = 17974.0
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69667383 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0377s; samplesPerSecond = 6631.8
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70928223 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0395s; samplesPerSecond = 6322.4
08/04/2016 13:40:49:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.70710547 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0478s; samplesPerSecond = 5228.6
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70161328 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0327s; samplesPerSecond = 7654.2
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70020703 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0263s; samplesPerSecond = 9507.1
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.71318164 * 250; EvalErrorPrediction = 0.57200000 * 250; time = 0.0216s; samplesPerSecond = 11581.6
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.70337500 * 250; EvalErrorPrediction = 0.45200000 * 250; time = 0.0273s; samplesPerSecond = 9147.1
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.70067383 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0140s; samplesPerSecond = 17832.9
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.70614258 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0172s; samplesPerSecond = 14537.4
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.70261133 * 250; EvalErrorPrediction = 0.52800000 * 250; time = 0.0240s; samplesPerSecond = 10404.5
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.70384375 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0506s; samplesPerSecond = 4937.6
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69216797 * 250; EvalErrorPrediction = 0.42000000 * 250; time = 0.0170s; samplesPerSecond = 14727.5
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.68958203 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0266s; samplesPerSecond = 9396.4
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.68496289 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0220s; samplesPerSecond = 11348.2
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.70399414 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0257s; samplesPerSecond = 9727.6
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.68649609 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0169s; samplesPerSecond = 14785.0
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.67689648 * 250; EvalErrorPrediction = 0.44000000 * 250; time = 0.0173s; samplesPerSecond = 14411.7
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.65426953 * 250; EvalErrorPrediction = 0.25200000 * 250; time = 0.0199s; samplesPerSecond = 12535.7
08/04/2016 13:40:50:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.63557617 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0249s; samplesPerSecond = 10057.9
08/04/2016 13:40:50: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.71316553 * 10000; EvalErrorPrediction = 0.48640000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=1.14586s
08/04/2016 13:40:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn.1'

08/04/2016 13:40:50: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/04/2016 13:40:50: Starting minibatch loop.
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.60966968 * 250; EvalErrorPrediction = 0.24000000 * 250; time = 0.0364s; samplesPerSecond = 6869.5
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.58749353 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0286s; samplesPerSecond = 8731.8
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.56516199 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0553s; samplesPerSecond = 4524.4
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.53302783 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0469s; samplesPerSecond = 5335.5
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.50897412 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0169s; samplesPerSecond = 14751.9
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.48610352 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0396s; samplesPerSecond = 6308.7
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.43181177 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0169s; samplesPerSecond = 14799.9
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.39902173 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0172s; samplesPerSecond = 14519.7
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.35448828 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0188s; samplesPerSecond = 13316.3
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.33939355 * 250; EvalErrorPrediction = 0.12800000 * 250; time = 0.0136s; samplesPerSecond = 18345.9
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.30524609 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0209s; samplesPerSecond = 11971.5
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.25703418 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0139s; samplesPerSecond = 17999.9
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.26056299 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0224s; samplesPerSecond = 11146.8
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.26545068 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0174s; samplesPerSecond = 14337.3
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.26116699 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0172s; samplesPerSecond = 14558.6
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.21240869 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0173s; samplesPerSecond = 14469.3
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.20002637 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0171s; samplesPerSecond = 14636.1
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.24575000 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0199s; samplesPerSecond = 12542.0
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.20194385 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0170s; samplesPerSecond = 14706.7
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.18040283 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0171s; samplesPerSecond = 14624.2
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.19450195 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0296s; samplesPerSecond = 8453.1
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.16307764 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0440s; samplesPerSecond = 5684.9
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.18243945 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0110s; samplesPerSecond = 22669.6
08/04/2016 13:40:50:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.16395215 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0379s; samplesPerSecond = 6589.7
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.16292627 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0335s; samplesPerSecond = 7455.1
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.16162793 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0321s; samplesPerSecond = 7787.2
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.17408594 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0146s; samplesPerSecond = 17146.8
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.19150000 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0599s; samplesPerSecond = 4175.2
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.17794824 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0197s; samplesPerSecond = 12701.3
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.16503418 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0283s; samplesPerSecond = 8824.6
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.19027637 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0187s; samplesPerSecond = 13359.7
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14140039 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0184s; samplesPerSecond = 13594.3
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15725977 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0399s; samplesPerSecond = 6264.3
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.15069043 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0337s; samplesPerSecond = 7425.4
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.19696191 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0181s; samplesPerSecond = 13788.5
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13182520 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0350s; samplesPerSecond = 7141.2
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18144336 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0367s; samplesPerSecond = 6804.8
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15216895 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0246s; samplesPerSecond = 10153.5
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.12746387 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0246s; samplesPerSecond = 10169.6
08/04/2016 13:40:51:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.13657422 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0174s; samplesPerSecond = 14377.7
08/04/2016 13:40:51: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.26270742 * 10000; EvalErrorPrediction = 0.08160000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=1.05372s
08/04/2016 13:40:51: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn.2'

08/04/2016 13:40:51: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/04/2016 13:40:51: Starting minibatch loop.
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18022488 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0284s; samplesPerSecond = 8808.7
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.15976477 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0210s; samplesPerSecond = 11885.0
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.11259378 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0172s; samplesPerSecond = 14575.6
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16496838 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0199s; samplesPerSecond = 12583.0
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.13411646 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0211s; samplesPerSecond = 11852.3
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.18882501 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0201s; samplesPerSecond = 12464.5
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.14354260 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0264s; samplesPerSecond = 9473.3
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.20155469 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0115s; samplesPerSecond = 21780.8
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.13468494 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0208s; samplesPerSecond = 12040.1
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.16650659 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0174s; samplesPerSecond = 14363.7
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14735815 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0181s; samplesPerSecond = 13810.6
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.18816052 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0288s; samplesPerSecond = 8666.4
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.16989038 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0172s; samplesPerSecond = 14536.6
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.14076904 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0140s; samplesPerSecond = 17805.0
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.19055200 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0170s; samplesPerSecond = 14693.8
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.17005713 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0218s; samplesPerSecond = 11478.9
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14290771 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0140s; samplesPerSecond = 17863.5
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18376733 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0180s; samplesPerSecond = 13908.2
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.17130981 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0170s; samplesPerSecond = 14729.3
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17539185 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0168s; samplesPerSecond = 14904.0
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.17331128 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0200s; samplesPerSecond = 12498.8
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13604541 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0295s; samplesPerSecond = 8480.9
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15574902 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0442s; samplesPerSecond = 5655.0
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.17897437 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0142s; samplesPerSecond = 17587.1
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.15730835 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0395s; samplesPerSecond = 6327.8
08/04/2016 13:40:51:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.20031689 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0359s; samplesPerSecond = 6967.7
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16121826 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0141s; samplesPerSecond = 17777.1
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13665186 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0202s; samplesPerSecond = 12374.4
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.14458643 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0385s; samplesPerSecond = 6492.3
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.13292041 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0498s; samplesPerSecond = 5020.4
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.14115576 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0175s; samplesPerSecond = 14307.8
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13277881 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0166s; samplesPerSecond = 15084.8
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15838867 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0209s; samplesPerSecond = 11940.6
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14043262 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0170s; samplesPerSecond = 14707.6
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.18202979 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0186s; samplesPerSecond = 13409.1
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13776709 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0176s; samplesPerSecond = 14244.2
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14839697 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0171s; samplesPerSecond = 14637.9
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14561279 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0200s; samplesPerSecond = 12489.4
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13614014 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0377s; samplesPerSecond = 6636.1
08/04/2016 13:40:52:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17902002 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0243s; samplesPerSecond = 10284.7
08/04/2016 13:40:52: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15864377 * 10000; EvalErrorPrediction = 0.07460000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=0.904043s
08/04/2016 13:40:52: SGD: Saving checkpoint model '/tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn'
08/04/2016 13:40:52: CNTKCommandTrainEnd: Simple_Demo_Train

08/04/2016 13:40:52: Action "train" complete.


08/04/2016 13:40:52: ##############################################################################
08/04/2016 13:40:52: #                                                                            #
08/04/2016 13:40:52: # Action "test"                                                              #
08/04/2016 13:40:52: #                                                                            #
08/04/2016 13:40:52: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x7facbfe460e8: {[B0 Value[50 x 1]] }
0x7facbfe464c8: {[EvalErrorPrediction Value[1]] }
0x7facbfe46d48: {[B1 Value[50 x 1]] }
0x7facbfe478c8: {[B2 Value[2 x 1]] }
0x7facbfe488e8: {[features Value[2 x *1]] }
0x7facbfe49208: {[InvStdOfFeatures Value[2]] }
0x7facbfe49c88: {[labels Value[2 x *1]] }
0x7facbfe4a828: {[MeanOfFeatures Value[2]] }
0x7facbfe4b368: {[Prior Value[2]] }
0x7facbfe4b568: {[W0 Value[50 x 2]] }
0x7facbfe4bec8: {[W1 Value[50 x 50]] }
0x7facbfe4cfc8: {[W2 Value[2 x 50]] }
0x7facbfe54d18: {[CrossEntropyWithSoftmax Value[1]] }
0x7facbfe55218: {[LogOfPrior Value[2]] }
0x7facbfe56158: {[MVNormalizedFeatures Value[2 x *1]] }
0x7facbfe568a8: {[W0*features Value[50 x *1]] }
0x7facbfe569a8: {[W0*features+B0 Value[50 x 1 x *1]] }
0x7facbfe56dd8: {[H1 Value[50 x 1 x *1]] }
0x7facbfe56f98: {[W1*H1 Value[50 x 1 x *1]] }
0x7facbfe57158: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x7facbfe57318: {[H2 Value[50 x 1 x *1]] }
0x7facbfe574d8: {[W2*H1 Value[2 x 1 x *1]] }
0x7facbfe57698: {[HLast Value[2 x 1 x *1]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
08/04/2016 13:40:52: Minibatch[1-1]: EvalErrorPrediction = 0.02985075 * 603; CrossEntropyWithSoftmax = 0.08754387 * 603
08/04/2016 13:40:52: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.02985075 * 603; CrossEntropyWithSoftmax = 0.08754387 * 603; perplexity = 1.09149014

08/04/2016 13:40:52: Action "test" complete.


08/04/2016 13:40:52: ##############################################################################
08/04/2016 13:40:52: #                                                                            #
08/04/2016 13:40:52: # Action "write"                                                             #
08/04/2016 13:40:52: #                                                                            #
08/04/2016 13:40:52: ##############################################################################


Post-processing network...

8 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()
	labels = InputValue()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *2]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *2]
Validating --> MeanOfFeatures = Mean (features) : [2 x *2] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *2] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *2], [2], [2] -> [2 x *2]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *2] -> [50 x *2]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *2] -> [2 x 1 x *2]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *2], [2 x 1] -> [2 x 1 x *2]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *2] -> [2 x 1 x *2]
Validating --> Prior = Mean (labels) : [2 x *2] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *2], [2] -> [2 x 1 x *2]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[50 x 1 x *2]] [H2 Gradient[50 x 1 x *2]] [HLast Gradient[2 x 1 x *2]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *2]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *2]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *2]] [ScaledLogLikelihood Value[2 x 1 x *2]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *2]] [W0*features+B0 Gradient[50 x 1 x *2]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *2]] [W1*H1+B1 Gradient[50 x 1 x *2]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *2]] [features Gradient[2 x *2]] [labels Gradient[2 x *2]] }
0x7facbfe30968: {[MVNormalizedFeatures Value[2 x *2]] }
0x7facbfe310d8: {[B0 Value[50 x 1]] }
0x7facbfe31188: {[B1 Value[50 x 1]] }
0x7facbfe31d58: {[B2 Value[2 x 1]] }
0x7facbfe46d48: {[features Value[2 x *2]] }
0x7facbfe47aa8: {[InvStdOfFeatures Value[2]] }
0x7facbfe481e8: {[labels Value[2 x *2]] }
0x7facbfe48cb8: {[MeanOfFeatures Value[2]] }
0x7facbfe49858: {[Prior Value[2]] }
0x7facbfe49a28: {[W0 Value[50 x 2]] }
0x7facbfe4a3b8: {[W1 Value[50 x 50]] }
0x7facbfe4b448: {[W2 Value[2 x 50]] }
0x7facbfe53838: {[PosteriorProb Value[2 x 1 x *2]] }
0x7facbfe53c78: {[LogOfPrior Value[2]] }
0x7facbfe552c8: {[W0*features Value[50 x *2]] }
0x7facbfe55818: {[W0*features+B0 Value[50 x 1 x *2]] }
0x7facbfe55bc8: {[H1 Value[50 x 1 x *2]] }
0x7facbfe55d88: {[W1*H1 Value[50 x 1 x *2]] }
0x7facbfe55f48: {[W1*H1+B1 Value[50 x 1 x *2]] }
0x7facbfe56108: {[H2 Value[50 x 1 x *2]] }
0x7facbfe562c8: {[W2*H1 Value[2 x 1 x *2]] }
0x7facbfe56488: {[HLast Value[2 x 1 x *2]] }

Minibatch[0]: ActualMBSize = 603
Written to /tmp/cntk-test-20160804134048.636961/Examples/Other/Simple2d_Simple@release_cpu/SimpleOutput*
Total Samples Evaluated = 603

08/04/2016 13:40:52: Action "write" complete.

08/04/2016 13:40:52: __COMPLETED__