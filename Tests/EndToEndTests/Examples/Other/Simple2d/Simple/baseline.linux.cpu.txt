CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 24
    Total Memory: 264172964 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config/Simple.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu DeviceId=-1 timestamping=true Simple_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 13:07:13
		Last modified date: Thu Aug  4 10:38:25 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: mkl
		CUDA_PATH: /usr/local/cuda-7.5
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: HEAD
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
		Built by philly on ee6c20c358b8
		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
-------------------------------------------------------------------
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
08/04/2016 13:55:32: -------------------------------------------------------------------
08/04/2016 13:55:32: Build info: 

08/04/2016 13:55:32: 		Built time: Aug  4 2016 13:07:13
08/04/2016 13:55:32: 		Last modified date: Thu Aug  4 10:38:25 2016
08/04/2016 13:55:32: 		Build type: release
08/04/2016 13:55:32: 		Build target: GPU
08/04/2016 13:55:32: 		With 1bit-SGD: yes
08/04/2016 13:55:32: 		Math lib: mkl
08/04/2016 13:55:32: 		CUDA_PATH: /usr/local/cuda-7.5
08/04/2016 13:55:32: 		CUB_PATH: /usr/local/cub-1.4.1
08/04/2016 13:55:32: 		CUDNN_PATH: /usr/local/cudnn-4.0
08/04/2016 13:55:32: 		Build Branch: HEAD
08/04/2016 13:55:32: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c
08/04/2016 13:55:32: 		Built by philly on ee6c20c358b8
08/04/2016 13:55:32: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/04/2016 13:55:32: -------------------------------------------------------------------
08/04/2016 13:55:33: -------------------------------------------------------------------
08/04/2016 13:55:33: GPU info:

08/04/2016 13:55:33: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:33: 		Device[1]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:33: 		Device[2]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:33: 		Device[3]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; memory = 3071 MB
08/04/2016 13:55:33: -------------------------------------------------------------------

08/04/2016 13:55:33: Running on localhost at 2016/08/04 13:55:33
08/04/2016 13:55:33: Command line: 
/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/1bitsgd/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config/Simple.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config  OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu  DeviceId=-1  timestamping=true  Simple_Demo_Train=[SGD=[maxEpochs=3]]



08/04/2016 13:55:33: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:55:33: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "$OutputDir$/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "$DataDir$/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu
DeviceId=-1
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 13:55:33: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:55:33: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/04/2016 13:55:33: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu
DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu
DeviceId=-1
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

08/04/2016 13:55:33: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/04/2016 13:55:33: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Simple.cntk:command=Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
configparameters: Simple.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Other/Simple2d/Simple/../../../../../../Examples/Other/Simple2d/Config
configparameters: Simple.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Simple.cntk:DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data
configparameters: Simple.cntk:deviceId=-1
configparameters: Simple.cntk:ModelDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/Models
configparameters: Simple.cntk:modelPath=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn
configparameters: Simple.cntk:OutputDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu
configparameters: Simple.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Simple.cntk:precision=float
configparameters: Simple.cntk:RootDir=..
configparameters: Simple.cntk:RunDir=/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu
configparameters: Simple.cntk:Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]

configparameters: Simple.cntk:Simple_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Simple.cntk:Simple_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Simple.cntk:timestamping=true
configparameters: Simple.cntk:traceLevel=1
08/04/2016 13:55:33: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/04/2016 13:55:33: Commands: Simple_Demo_Train Simple_Demo_Test Simple_Demo_Output
08/04/2016 13:55:33: Precision = "float"
08/04/2016 13:55:33: CNTKModelPath: /tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn
08/04/2016 13:55:33: CNTKCommandTrainInfo: Simple_Demo_Train : 3
08/04/2016 13:55:33: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/04/2016 13:55:33: ##############################################################################
08/04/2016 13:55:33: #                                                                            #
08/04/2016 13:55:33: # Action "train"                                                             #
08/04/2016 13:55:33: #                                                                            #
08/04/2016 13:55:33: ##############################################################################

08/04/2016 13:55:33: CNTKCommandTrainBegin: Simple_Demo_Train
SimpleNetworkBuilder Using CPU

08/04/2016 13:55:33: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/04/2016 13:55:33: Created model with 25 nodes on CPU.

08/04/2016 13:55:33: Training criterion node(s):
08/04/2016 13:55:33: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/04/2016 13:55:33: Evaluation criterion node(s):

08/04/2016 13:55:33: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x7f146383cd58: {[MeanOfFeatures Value[2]] }
0x7f146383daf8: {[InvStdOfFeatures Value[2]] }
0x7f146383e768: {[W0 Value[50 x 2]] }
0x7f146383ed68: {[B0 Value[50 x 1]] }
0x7f146383fc88: {[W1 Value[50 x 50]] }
0x7f14638427d8: {[B1 Value[50 x 1]] }
0x7f14638436e8: {[W2 Value[2 x 50]] }
0x7f1463843cb8: {[B2 Value[2 x 1]] }
0x7f1463844798: {[labels Value[2 x *]] }
0x7f1463845518: {[Prior Value[2]] }
0x7f146384ae28: {[EvalErrorPrediction Value[1]] }
0x7f146384afc8: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x7f146384b188: {[CrossEntropyWithSoftmax Value[1]] }
0x7f146384b6d8: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x7f146384b848: {[LogOfPrior Value[2]] }
0x7f146384cfa8: {[MVNormalizedFeatures Value[2 x *]] }
0x7f146384d768: {[W0*features Value[50 x *]] }
0x7f146384d978: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x7f146384db38: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x7f146384dcf8: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x7f146384deb8: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x7f146384e078: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x7f146384e238: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x7f146384ed98: {[CrossEntropyWithSoftmax Gradient[1]] }
0x7f146384ef58: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x7f146384f118: {[W2*H1 Gradient[2 x 1 x *]] }
0x7f146384f2d8: {[B2 Gradient[2 x 1]] }
0x7f146450d488: {[features Value[2 x *]] }


08/04/2016 13:55:33: Precomputing --> 3 PreCompute nodes found.

08/04/2016 13:55:33: 	MeanOfFeatures = Mean()
08/04/2016 13:55:33: 	InvStdOfFeatures = InvStdDev()
08/04/2016 13:55:33: 	Prior = Mean()
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 13:55:34: Precomputing --> Completed.


08/04/2016 13:55:34: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 0: frames [0..10000] (first sequence at sample 0), data subset 0 of 1

08/04/2016 13:55:34: Starting minibatch loop.
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[   1-  10]: CrossEntropyWithSoftmax = 0.71180627 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0310s; samplesPerSecond = 8051.8
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  11-  20]: CrossEntropyWithSoftmax = 0.73593127 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0195s; samplesPerSecond = 12795.6
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  21-  30]: CrossEntropyWithSoftmax = 0.70349194 * 250; EvalErrorPrediction = 0.45600000 * 250; time = 0.0159s; samplesPerSecond = 15752.0
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  31-  40]: CrossEntropyWithSoftmax = 0.74209155 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0132s; samplesPerSecond = 18939.4
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  41-  50]: CrossEntropyWithSoftmax = 0.74485010 * 250; EvalErrorPrediction = 0.58000000 * 250; time = 0.0211s; samplesPerSecond = 11832.1
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  51-  60]: CrossEntropyWithSoftmax = 0.71670825 * 250; EvalErrorPrediction = 0.46000000 * 250; time = 0.0153s; samplesPerSecond = 16380.6
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  61-  70]: CrossEntropyWithSoftmax = 0.70175635 * 250; EvalErrorPrediction = 0.48800000 * 250; time = 0.0133s; samplesPerSecond = 18853.7
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  71-  80]: CrossEntropyWithSoftmax = 0.72852002 * 250; EvalErrorPrediction = 0.54000000 * 250; time = 0.0163s; samplesPerSecond = 15332.7
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  81-  90]: CrossEntropyWithSoftmax = 0.72082910 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0188s; samplesPerSecond = 13309.2
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[  91- 100]: CrossEntropyWithSoftmax = 0.71396533 * 250; EvalErrorPrediction = 0.48400000 * 250; time = 0.0248s; samplesPerSecond = 10088.0
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: CrossEntropyWithSoftmax = 0.70685742 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0165s; samplesPerSecond = 15146.9
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: CrossEntropyWithSoftmax = 0.74966406 * 250; EvalErrorPrediction = 0.53200000 * 250; time = 0.0159s; samplesPerSecond = 15698.6
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: CrossEntropyWithSoftmax = 0.86757520 * 250; EvalErrorPrediction = 0.56800000 * 250; time = 0.0191s; samplesPerSecond = 13074.6
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: CrossEntropyWithSoftmax = 0.82215039 * 250; EvalErrorPrediction = 0.55600000 * 250; time = 0.0165s; samplesPerSecond = 15179.1
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: CrossEntropyWithSoftmax = 0.72304492 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0166s; samplesPerSecond = 15095.7
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: CrossEntropyWithSoftmax = 0.72316211 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0133s; samplesPerSecond = 18729.4
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: CrossEntropyWithSoftmax = 0.70117480 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0401s; samplesPerSecond = 6239.9
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: CrossEntropyWithSoftmax = 0.69559277 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0134s; samplesPerSecond = 18693.0
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: CrossEntropyWithSoftmax = 0.69298633 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0164s; samplesPerSecond = 15206.8
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: CrossEntropyWithSoftmax = 0.72534570 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0165s; samplesPerSecond = 15113.0
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: CrossEntropyWithSoftmax = 0.73046191 * 250; EvalErrorPrediction = 0.51600000 * 250; time = 0.0492s; samplesPerSecond = 5081.5
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: CrossEntropyWithSoftmax = 0.69667383 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0323s; samplesPerSecond = 7746.7
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: CrossEntropyWithSoftmax = 0.70928223 * 250; EvalErrorPrediction = 0.52400000 * 250; time = 0.0241s; samplesPerSecond = 10360.5
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: CrossEntropyWithSoftmax = 0.70710547 * 250; EvalErrorPrediction = 0.53600000 * 250; time = 0.0177s; samplesPerSecond = 14151.5
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: CrossEntropyWithSoftmax = 0.70161328 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0134s; samplesPerSecond = 18631.7
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: CrossEntropyWithSoftmax = 0.70020703 * 250; EvalErrorPrediction = 0.50000000 * 250; time = 0.0195s; samplesPerSecond = 12823.8
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: CrossEntropyWithSoftmax = 0.71318164 * 250; EvalErrorPrediction = 0.57200000 * 250; time = 0.0134s; samplesPerSecond = 18700.0
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: CrossEntropyWithSoftmax = 0.70337500 * 250; EvalErrorPrediction = 0.45200000 * 250; time = 0.0174s; samplesPerSecond = 14406.7
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: CrossEntropyWithSoftmax = 0.70067383 * 250; EvalErrorPrediction = 0.48000000 * 250; time = 0.0164s; samplesPerSecond = 15204.0
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: CrossEntropyWithSoftmax = 0.70614258 * 250; EvalErrorPrediction = 0.54400000 * 250; time = 0.0165s; samplesPerSecond = 15140.5
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: CrossEntropyWithSoftmax = 0.70261133 * 250; EvalErrorPrediction = 0.52800000 * 250; time = 0.0169s; samplesPerSecond = 14780.7
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: CrossEntropyWithSoftmax = 0.70384375 * 250; EvalErrorPrediction = 0.49200000 * 250; time = 0.0169s; samplesPerSecond = 14828.9
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: CrossEntropyWithSoftmax = 0.69216797 * 250; EvalErrorPrediction = 0.42000000 * 250; time = 0.0196s; samplesPerSecond = 12771.4
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: CrossEntropyWithSoftmax = 0.68958203 * 250; EvalErrorPrediction = 0.47600000 * 250; time = 0.0162s; samplesPerSecond = 15468.4
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: CrossEntropyWithSoftmax = 0.68496289 * 250; EvalErrorPrediction = 0.49600000 * 250; time = 0.0166s; samplesPerSecond = 15059.3
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: CrossEntropyWithSoftmax = 0.70399414 * 250; EvalErrorPrediction = 0.47200000 * 250; time = 0.0166s; samplesPerSecond = 15102.1
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: CrossEntropyWithSoftmax = 0.68649609 * 250; EvalErrorPrediction = 0.50400000 * 250; time = 0.0134s; samplesPerSecond = 18622.0
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: CrossEntropyWithSoftmax = 0.67689648 * 250; EvalErrorPrediction = 0.44000000 * 250; time = 0.0583s; samplesPerSecond = 4286.8
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: CrossEntropyWithSoftmax = 0.65426953 * 250; EvalErrorPrediction = 0.25200000 * 250; time = 0.0237s; samplesPerSecond = 10543.2
08/04/2016 13:55:34:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: CrossEntropyWithSoftmax = 0.63557617 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0231s; samplesPerSecond = 10806.6
08/04/2016 13:55:34: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 0.71316553 * 10000; EvalErrorPrediction = 0.48640000 * 10000; totalSamplesSeen = 10000; learningRatePerSample = 0.02; epochTime=0.82153s
08/04/2016 13:55:34: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn.1'

08/04/2016 13:55:34: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 1: frames [10000..20000] (first sequence at sample 10000), data subset 0 of 1

08/04/2016 13:55:34: Starting minibatch loop.
08/04/2016 13:55:34:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.60966968 * 250; EvalErrorPrediction = 0.24000000 * 250; time = 0.0331s; samplesPerSecond = 7542.2
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.58749353 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0176s; samplesPerSecond = 14237.7
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.56516199 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0137s; samplesPerSecond = 18237.5
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.53302783 * 250; EvalErrorPrediction = 0.10400000 * 250; time = 0.0173s; samplesPerSecond = 14469.3
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.50897412 * 250; EvalErrorPrediction = 0.10000000 * 250; time = 0.0163s; samplesPerSecond = 15329.9
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.48610352 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0172s; samplesPerSecond = 14537.4
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.43181177 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0163s; samplesPerSecond = 15349.7
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.39902173 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0163s; samplesPerSecond = 15293.3
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.35448828 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0348s; samplesPerSecond = 7173.6
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.33939355 * 250; EvalErrorPrediction = 0.12800000 * 250; time = 0.0131s; samplesPerSecond = 19091.3
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.30524609 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0163s; samplesPerSecond = 15334.6
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.25703418 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0356s; samplesPerSecond = 7013.2
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.26056299 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0329s; samplesPerSecond = 7607.1
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.26545068 * 250; EvalErrorPrediction = 0.10800000 * 250; time = 0.0330s; samplesPerSecond = 7584.0
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.26116699 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0165s; samplesPerSecond = 15113.0
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.21240869 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0132s; samplesPerSecond = 18965.3
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.20002637 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0371s; samplesPerSecond = 6735.1
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.24575000 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0194s; samplesPerSecond = 12899.2
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.20194385 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0163s; samplesPerSecond = 15328.0
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.18040283 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0131s; samplesPerSecond = 19078.1
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.19450195 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0235s; samplesPerSecond = 10651.9
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.16307764 * 250; EvalErrorPrediction = 0.04400000 * 250; time = 0.0132s; samplesPerSecond = 19008.5
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.18243945 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0163s; samplesPerSecond = 15362.9
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.16395215 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0163s; samplesPerSecond = 15355.3
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.16292627 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0163s; samplesPerSecond = 15336.5
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.16162793 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0404s; samplesPerSecond = 6192.0
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.17408594 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0131s; samplesPerSecond = 19091.3
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.19150000 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0193s; samplesPerSecond = 12985.0
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.17794824 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0134s; samplesPerSecond = 18605.3
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.16503418 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0163s; samplesPerSecond = 15366.6
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.19027637 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0131s; samplesPerSecond = 19030.2
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.14140039 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0160s; samplesPerSecond = 15589.9
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15725977 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0165s; samplesPerSecond = 15191.1
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.15069043 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0205s; samplesPerSecond = 12199.9
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.19696191 * 250; EvalErrorPrediction = 0.11200000 * 250; time = 0.0203s; samplesPerSecond = 12345.1
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13182520 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0164s; samplesPerSecond = 15283.0
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.18144336 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0163s; samplesPerSecond = 15369.5
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.15216895 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0164s; samplesPerSecond = 15287.7
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.12746387 * 250; EvalErrorPrediction = 0.05200000 * 250; time = 0.0287s; samplesPerSecond = 8707.2
08/04/2016 13:55:35:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.13657422 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0216s; samplesPerSecond = 11584.3
08/04/2016 13:55:35: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 0.26270742 * 10000; EvalErrorPrediction = 0.08160000 * 10000; totalSamplesSeen = 20000; learningRatePerSample = 0.0080000004; epochTime=0.807345s
08/04/2016 13:55:35: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn.2'

08/04/2016 13:55:35: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples
BlockRandomizer::StartEpoch: epoch 2: frames [20000..30000] (first sequence at sample 20000), data subset 0 of 1

08/04/2016 13:55:35: Starting minibatch loop.
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: CrossEntropyWithSoftmax = 0.18022488 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0183s; samplesPerSecond = 13653.7
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: CrossEntropyWithSoftmax = 0.15976477 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0195s; samplesPerSecond = 12825.8
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: CrossEntropyWithSoftmax = 0.11259378 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0126s; samplesPerSecond = 19864.9
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: CrossEntropyWithSoftmax = 0.16496838 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0235s; samplesPerSecond = 10650.5
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: CrossEntropyWithSoftmax = 0.13411646 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0131s; samplesPerSecond = 19066.5
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: CrossEntropyWithSoftmax = 0.18882501 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0163s; samplesPerSecond = 15369.5
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: CrossEntropyWithSoftmax = 0.14354260 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0171s; samplesPerSecond = 14599.4
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: CrossEntropyWithSoftmax = 0.20155469 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0168s; samplesPerSecond = 14846.5
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: CrossEntropyWithSoftmax = 0.13468494 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0181s; samplesPerSecond = 13831.3
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: CrossEntropyWithSoftmax = 0.16650659 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0166s; samplesPerSecond = 15072.0
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: CrossEntropyWithSoftmax = 0.14735815 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0195s; samplesPerSecond = 12834.3
08/04/2016 13:55:35:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: CrossEntropyWithSoftmax = 0.18816052 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0130s; samplesPerSecond = 19165.9
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: CrossEntropyWithSoftmax = 0.16989038 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0406s; samplesPerSecond = 6163.9
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: CrossEntropyWithSoftmax = 0.14076904 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0139s; samplesPerSecond = 18012.8
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: CrossEntropyWithSoftmax = 0.19055200 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0194s; samplesPerSecond = 12879.3
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: CrossEntropyWithSoftmax = 0.17005713 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0181s; samplesPerSecond = 13817.5
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: CrossEntropyWithSoftmax = 0.14290771 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0172s; samplesPerSecond = 14518.8
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: CrossEntropyWithSoftmax = 0.18376733 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0170s; samplesPerSecond = 14689.5
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: CrossEntropyWithSoftmax = 0.17130981 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0266s; samplesPerSecond = 9399.9
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: CrossEntropyWithSoftmax = 0.17539185 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0802s; samplesPerSecond = 3117.8
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: CrossEntropyWithSoftmax = 0.17331128 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0095s; samplesPerSecond = 26313.0
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: CrossEntropyWithSoftmax = 0.13604541 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0099s; samplesPerSecond = 25216.9
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: CrossEntropyWithSoftmax = 0.15574902 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0182s; samplesPerSecond = 13746.8
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: CrossEntropyWithSoftmax = 0.17897437 * 250; EvalErrorPrediction = 0.09600000 * 250; time = 0.0180s; samplesPerSecond = 13913.6
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: CrossEntropyWithSoftmax = 0.15730835 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0131s; samplesPerSecond = 19092.7
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: CrossEntropyWithSoftmax = 0.20031689 * 250; EvalErrorPrediction = 0.08800000 * 250; time = 0.0164s; samplesPerSecond = 15198.5
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: CrossEntropyWithSoftmax = 0.16121826 * 250; EvalErrorPrediction = 0.08000000 * 250; time = 0.0288s; samplesPerSecond = 8671.8
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: CrossEntropyWithSoftmax = 0.13665186 * 250; EvalErrorPrediction = 0.05600000 * 250; time = 0.0494s; samplesPerSecond = 5058.1
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: CrossEntropyWithSoftmax = 0.14458643 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0172s; samplesPerSecond = 14567.1
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: CrossEntropyWithSoftmax = 0.13292041 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0160s; samplesPerSecond = 15622.1
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: CrossEntropyWithSoftmax = 0.14115576 * 250; EvalErrorPrediction = 0.04800000 * 250; time = 0.0167s; samplesPerSecond = 14928.9
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: CrossEntropyWithSoftmax = 0.13277881 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0162s; samplesPerSecond = 15421.6
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: CrossEntropyWithSoftmax = 0.15838867 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0155s; samplesPerSecond = 16106.2
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: CrossEntropyWithSoftmax = 0.14043262 * 250; EvalErrorPrediction = 0.07200000 * 250; time = 0.0161s; samplesPerSecond = 15529.9
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: CrossEntropyWithSoftmax = 0.18202979 * 250; EvalErrorPrediction = 0.09200000 * 250; time = 0.0161s; samplesPerSecond = 15485.6
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: CrossEntropyWithSoftmax = 0.13776709 * 250; EvalErrorPrediction = 0.06000000 * 250; time = 0.0160s; samplesPerSecond = 15608.4
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: CrossEntropyWithSoftmax = 0.14839697 * 250; EvalErrorPrediction = 0.07600000 * 250; time = 0.0163s; samplesPerSecond = 15298.9
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: CrossEntropyWithSoftmax = 0.14561279 * 250; EvalErrorPrediction = 0.06400000 * 250; time = 0.0208s; samplesPerSecond = 12030.8
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: CrossEntropyWithSoftmax = 0.13614014 * 250; EvalErrorPrediction = 0.06800000 * 250; time = 0.0162s; samplesPerSecond = 15404.5
08/04/2016 13:55:36:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: CrossEntropyWithSoftmax = 0.17902002 * 250; EvalErrorPrediction = 0.08400000 * 250; time = 0.0162s; samplesPerSecond = 15403.6
08/04/2016 13:55:36: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 0.15864377 * 10000; EvalErrorPrediction = 0.07460000 * 10000; totalSamplesSeen = 30000; learningRatePerSample = 0.0080000004; epochTime=0.804389s
08/04/2016 13:55:36: SGD: Saving checkpoint model '/tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/Models/simple.dnn'
08/04/2016 13:55:36: CNTKCommandTrainEnd: Simple_Demo_Train

08/04/2016 13:55:36: Action "train" complete.


08/04/2016 13:55:36: ##############################################################################
08/04/2016 13:55:36: #                                                                            #
08/04/2016 13:55:36: # Action "test"                                                              #
08/04/2016 13:55:36: #                                                                            #
08/04/2016 13:55:36: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x7f1463885098: {[CrossEntropyWithSoftmax Value[1]] }
0x7f14638856f8: {[B2 Value[2 x 1]] }
0x7f14638857a8: {[B0 Value[50 x 1]] }
0x7f1463885e48: {[B1 Value[50 x 1]] }
0x7f14647ad608: {[features Value[2 x *1]] }
0x7f14647aed18: {[InvStdOfFeatures Value[2]] }
0x7f14647af768: {[labels Value[2 x *1]] }
0x7f14647aff78: {[MeanOfFeatures Value[2]] }
0x7f14647b0268: {[Prior Value[2]] }
0x7f14647b1ee8: {[EvalErrorPrediction Value[1]] }
0x7f14647b23d8: {[W0*features Value[50 x *1]] }
0x7f14647b27d8: {[W0*features+B0 Value[50 x 1 x *1]] }
0x7f14647b2908: {[LogOfPrior Value[2]] }
0x7f14647b4128: {[MVNormalizedFeatures Value[2 x *1]] }
0x7f14647b4938: {[H1 Value[50 x 1 x *1]] }
0x7f14647b4af8: {[W1*H1 Value[50 x 1 x *1]] }
0x7f14647b4cb8: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x7f14647b4e78: {[H2 Value[50 x 1 x *1]] }
0x7f14647b5038: {[W2*H1 Value[2 x 1 x *1]] }
0x7f14647b51f8: {[HLast Value[2 x 1 x *1]] }
0x7f14685933d8: {[W0 Value[50 x 2]] }
0x7f1468593d48: {[W2 Value[2 x 50]] }
0x7f1468594758: {[W1 Value[50 x 50]] }

BlockRandomizer::StartEpoch: epoch 0: frames [0..603] (first sequence at sample 0), data subset 0 of 1
08/04/2016 13:55:36: Minibatch[1-1]: EvalErrorPrediction = 0.02985075 * 603; CrossEntropyWithSoftmax = 0.08754387 * 603
08/04/2016 13:55:36: Final Results: Minibatch[1-1]: EvalErrorPrediction = 0.02985075 * 603; CrossEntropyWithSoftmax = 0.08754387 * 603; perplexity = 1.09149014

08/04/2016 13:55:36: Action "test" complete.


08/04/2016 13:55:36: ##############################################################################
08/04/2016 13:55:36: #                                                                            #
08/04/2016 13:55:36: # Action "write"                                                             #
08/04/2016 13:55:36: #                                                                            #
08/04/2016 13:55:36: ##############################################################################


Post-processing network...

8 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()
	labels = InputValue()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *2]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *2]
Validating --> MeanOfFeatures = Mean (features) : [2 x *2] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *2] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *2], [2], [2] -> [2 x *2]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *2] -> [50 x *2]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *2] -> [2 x 1 x *2]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *2], [2 x 1] -> [2 x 1 x *2]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *2] -> [2 x 1 x *2]
Validating --> Prior = Mean (labels) : [2 x *2] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *2], [2] -> [2 x 1 x *2]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[50 x 1 x *2]] [H2 Gradient[50 x 1 x *2]] [HLast Gradient[2 x 1 x *2]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *2]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *2]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *2]] [ScaledLogLikelihood Value[2 x 1 x *2]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *2]] [W0*features+B0 Gradient[50 x 1 x *2]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *2]] [W1*H1+B1 Gradient[50 x 1 x *2]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *2]] [features Gradient[2 x *2]] [labels Gradient[2 x *2]] }
0x7f14638810b8: {[features Value[2 x *2]] }
0x7f1463881e68: {[InvStdOfFeatures Value[2]] }
0x7f1463882828: {[labels Value[2 x *2]] }
0x7f1463883088: {[MeanOfFeatures Value[2]] }
0x7f14638832c8: {[Prior Value[2]] }
0x7f1463883d98: {[W0 Value[50 x 2]] }
0x7f1463884738: {[W1 Value[50 x 50]] }
0x7f146450b418: {[W2 Value[2 x 50]] }
0x7f14647af428: {[B0 Value[50 x 1]] }
0x7f14647af4d8: {[B1 Value[50 x 1]] }
0x7f14647afb78: {[B2 Value[2 x 1]] }
0x7f1468592618: {[PosteriorProb Value[2 x 1 x *2]] }
0x7f1468592bd8: {[LogOfPrior Value[2]] }
0x7f1468593f88: {[MVNormalizedFeatures Value[2 x *2]] }
0x7f1468594598: {[W0*features Value[50 x *2]] }
0x7f14685946f8: {[W0*features+B0 Value[50 x 1 x *2]] }
0x7f14685948b8: {[H1 Value[50 x 1 x *2]] }
0x7f1468594a78: {[W1*H1 Value[50 x 1 x *2]] }
0x7f1468594c38: {[W1*H1+B1 Value[50 x 1 x *2]] }
0x7f1468594df8: {[H2 Value[50 x 1 x *2]] }
0x7f1468594fb8: {[W2*H1 Value[2 x 1 x *2]] }
0x7f1468595178: {[HLast Value[2 x 1 x *2]] }

Minibatch[0]: ActualMBSize = 603
Written to /tmp/cntk-test-20160804135456.444145/Examples/Other/Simple2d_Simple@release_cpu/SimpleOutput*
Total Samples Evaluated = 603

08/04/2016 13:55:36: Action "write" complete.

08/04/2016 13:55:36: __COMPLETED__